--[[

Vex Hub Interface Library
Elegant & Fluid Design
Inspired by Luna Interface Suite

]]

local VexHub = { Folder = "VexHub", Options = {}, ThemeGradient = ColorSequence.new{
    ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 65, 80)), 
    ColorSequenceKeypoint.new(0.50, Color3.fromRGB(117, 76, 236)), 
    ColorSequenceKeypoint.new(1.00, Color3.fromRGB(66, 153, 225))
}}

local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local HttpService = game:GetService("HttpService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local Player = Players.LocalPlayer
local Camera = workspace.CurrentCamera
local CoreGui = game:GetService("CoreGui")

local isStudio = RunService:IsStudio()
local tweeninfo = TweenInfo.new(0.3, Enum.EasingStyle.Quint, Enum.EasingDirection.Out)
local fastTween = TweenInfo.new(0.15, Enum.EasingStyle.Quint, Enum.EasingDirection.Out)
local longTween = TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out)

-- Preset color themes (improved with more harmonious colors)
local PresetThemes = {
    ["VexDefault"] = {Color3.fromRGB(255, 65, 80), Color3.fromRGB(117, 76, 236), Color3.fromRGB(66, 153, 225)},
    ["Midnight"] = {Color3.fromRGB(46, 52, 73), Color3.fromRGB(52, 58, 85), Color3.fromRGB(69, 77, 113)},
    ["Sunset"] = {Color3.fromRGB(255, 153, 102), Color3.fromRGB(255, 94, 98), Color3.fromRGB(189, 81, 144)},
    ["Ocean"] = {Color3.fromRGB(24, 167, 181), Color3.fromRGB(30, 96, 145), Color3.fromRGB(41, 46, 95)},
    ["Forest"] = {Color3.fromRGB(76, 214, 115), Color3.fromRGB(68, 173, 142), Color3.fromRGB(59, 130, 165)},
    ["Amethyst"] = {Color3.fromRGB(153, 97, 217), Color3.fromRGB(97, 97, 217), Color3.fromRGB(97, 162, 217)},
    ["Crimson"] = {Color3.fromRGB(199, 29, 62), Color3.fromRGB(152, 30, 78), Color3.fromRGB(104, 31, 95)},
    ["Darkness"] = {Color3.fromRGB(33, 33, 33), Color3.fromRGB(22, 22, 22), Color3.fromRGB(11, 11, 11)},
    ["Fluent"] = {Color3.fromRGB(0, 120, 212), Color3.fromRGB(0, 99, 177), Color3.fromRGB(0, 75, 151)},
    ["Sakura"] = {Color3.fromRGB(255, 183, 197), Color3.fromRGB(249, 140, 182), Color3.fromRGB(215, 100, 154)},
}

-- Icon module (Using Material icons)
local IconModule = {
    Material = {
        ["home"] = "http://www.roblox.com/asset/?id=6026568195",
        ["settings"] = "http://www.roblox.com/asset/?id=6031280882",
        ["code"] = "http://www.roblox.com/asset/?id=6022668955",
        ["info"] = "http://www.roblox.com/asset/?id=6026568227",
        ["close"] = "http://www.roblox.com/asset/?id=6031094678",
        ["minimize"] = "http://www.roblox.com/asset/?id=6026568240",
        ["maximize"] = "http://www.roblox.com/asset/?id=6026568267",
        ["warning"] = "http://www.roblox.com/asset/?id=6031071053",
        ["check"] = "http://www.roblox.com/asset/?id=6031094667",
        ["search"] = "http://www.roblox.com/asset/?id=6031154871",
        ["person"] = "http://www.roblox.com/asset/?id=6034287594",
        ["group"] = "http://www.roblox.com/asset/?id=6034281901",
        ["games"] = "http://www.roblox.com/asset/?id=6026660074",
        ["folder"] = "http://www.roblox.com/asset/?id=6031302932",
    }
}

-- Helper functions
local function GetIcon(icon, source)
    if source == "Custom" then
        return "rbxassetid://" .. icon
    else
        if icon ~= nil and IconModule[source] then
            local sourceIcon = IconModule[source]
            return sourceIcon[icon]
        else
            return nil
        end
    end
end

local function Kwargify(defaults, passed)
    for i, v in pairs(defaults) do
        if passed[i] == nil then
            passed[i] = v
        end
    end
    return passed
end

local function tween(object, goal, callback, tweenIn)
    local tween = TweenService:Create(object, tweenIn or tweeninfo, goal)
    tween.Completed:Connect(callback or function() end)
    tween:Play()
    return tween
end

local function Draggable(bar, window)
    pcall(function()
        local dragging, dragInput, mousePos, framePos

        bar.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                dragging = true
                mousePos = input.Position
                framePos = window.Position
                
                -- Add subtle scale effect when dragging
                tween(window, {Size = UDim2.new(window.Size.X.Scale, window.Size.X.Offset * 0.99, window.Size.Y.Scale, window.Size.Y.Offset * 0.99)}, nil, fastTween)

                input.Changed:Connect(function()
                    if input.UserInputState == Enum.UserInputState.End then
                        dragging = false
                        -- Return to original size
                        tween(window, {Size = UDim2.new(window.Size.X.Scale, window.Size.X.Offset / 0.99, window.Size.Y.Scale, window.Size.Y.Offset / 0.99)}, nil, fastTween)
                    end
                end)
            end
        end)

        bar.InputChanged:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
                dragInput = input
            end
        end)

        UserInputService.InputChanged:Connect(function(input)
            if input == dragInput and dragging then
                local delta = input.Position - mousePos
                window.Position = UDim2.new(framePos.X.Scale, framePos.X.Offset + delta.X, framePos.Y.Scale, framePos.Y.Offset + delta.Y)
            end
        end)
    end)
end

-- Create notification function
function VexHub:Notification(options)
    task.spawn(function()
        options = Kwargify({
            Title = "Notification",
            Content = "Content text goes here",
            Duration = 5,
            Icon = "info",
            IconSource = "Material",
            Theme = "Fluent" -- Default theme
        }, options or {})
        
        -- Create notification UI here
        local screenGui = Instance.new("ScreenGui")
        if syn and syn.protect_gui then
            syn.protect_gui(screenGui)
            screenGui.Parent = CoreGui
        elseif gethui then
            screenGui.Parent = gethui()
        else
            screenGui.Parent = CoreGui
        end
        
        local theme = PresetThemes[options.Theme] or PresetThemes["Fluent"]
        
        local notifFrame = Instance.new("Frame")
        notifFrame.Size = UDim2.new(0, 300, 0, 80)
        notifFrame.Position = UDim2.new(1, 20, 1, -90) -- Start off-screen
        notifFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 30)
        notifFrame.BorderSizePixel = 0
        notifFrame.BackgroundTransparency = 1
        notifFrame.Parent = screenGui
        
        -- Add shadow to notification
        local notifShadow = Instance.new("ImageLabel")
        notifShadow.Name = "Shadow"
        notifShadow.AnchorPoint = Vector2.new(0.5, 0.5)
        notifShadow.BackgroundTransparency = 1
        notifShadow.Position = UDim2.new(0.5, 0, 0.5, 0)
        notifShadow.Size = UDim2.new(1, 30, 1, 30)
        notifShadow.ZIndex = -1
        notifShadow.Image = "rbxassetid://6014054483"
        notifShadow.ImageColor3 = Color3.fromRGB(0, 0, 0)
        notifShadow.ImageTransparency = 1 -- Start transparent
        notifShadow.ScaleType = Enum.ScaleType.Slice
        notifShadow.SliceCenter = Rect.new(128, 128, 128, 128)
        notifShadow.Parent = notifFrame
        
        local uiCorner = Instance.new("UICorner")
        uiCorner.CornerRadius = UDim.new(0, 8)
        uiCorner.Parent = notifFrame
        
        local uiStroke = Instance.new("UIStroke")
        uiStroke.Color = Color3.fromRGB(60, 60, 70)
        uiStroke.Thickness = 1.5
        uiStroke.Transparency = 1
        uiStroke.Parent = notifFrame
        
        -- Add accent bar with theme color
        local accentBar = Instance.new("Frame")
        accentBar.Name = "AccentBar"
        accentBar.Size = UDim2.new(0, 4, 1, 0)
        accentBar.Position = UDim2.new(0, 0, 0, 0)
        accentBar.BackgroundColor3 = theme[1]
        accentBar.BorderSizePixel = 0
        accentBar.BackgroundTransparency = 1
        accentBar.Parent = notifFrame
        
        local accentCorner = Instance.new("UICorner")
        accentCorner.CornerRadius = UDim.new(0, 8)
        accentCorner.Parent = accentBar
        
        local iconFrame = Instance.new("Frame")
        iconFrame.Size = UDim2.new(0, 30, 0, 30)
        iconFrame.Position = UDim2.new(0, 15, 0, 25)
        iconFrame.BackgroundTransparency = 1
        iconFrame.Parent = notifFrame
        
        local iconImage = Instance.new("ImageLabel")
        iconImage.Size = UDim2.new(1, 0, 1, 0)
        iconImage.BackgroundTransparency = 1
        iconImage.Image = GetIcon(options.Icon, options.IconSource)
        iconImage.ImageColor3 = theme[1] -- Use theme color for icon
        iconImage.ImageTransparency = 1
        iconImage.Parent = iconFrame
        
        -- Add subtle glow to icon
        local iconGlow = Instance.new("ImageLabel")
        iconGlow.Name = "Glow"
        iconGlow.Size = UDim2.new(1.5, 0, 1.5, 0)
        iconGlow.Position = UDim2.new(0.5, 0, 0.5, 0)
        iconGlow.AnchorPoint = Vector2.new(0.5, 0.5)
        iconGlow.BackgroundTransparency = 1
        iconGlow.Image = "rbxassetid://4996891970" -- Radial gradient
        iconGlow.ImageColor3 = theme[1]
        iconGlow.ImageTransparency = 1 -- Start transparent
        iconGlow.Parent = iconImage
        
        local titleLabel = Instance.new("TextLabel")
        titleLabel.Size = UDim2.new(0, 220, 0, 25)
        titleLabel.Position = UDim2.new(0, 55, 0, 10)
        titleLabel.BackgroundTransparency = 1
        titleLabel.Text = options.Title
        titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
        titleLabel.TextSize = 16
        titleLabel.Font = Enum.Font.GothamBold
        titleLabel.TextXAlignment = Enum.TextXAlignment.Left
        titleLabel.TextTransparency = 1
        titleLabel.Parent = notifFrame
        
        local contentLabel = Instance.new("TextLabel")
        contentLabel.Size = UDim2.new(0, 235, 0, 40)
        contentLabel.Position = UDim2.new(0, 55, 0, 30)
        contentLabel.BackgroundTransparency = 1
        contentLabel.Text = options.Content
        contentLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
        contentLabel.TextSize = 14
        contentLabel.Font = Enum.Font.Gotham
        contentLabel.TextXAlignment = Enum.TextXAlignment.Left
        contentLabel.TextYAlignment = Enum.TextYAlignment.Top
        contentLabel.TextWrapped = true
        contentLabel.TextTransparency = 1
        contentLabel.Parent = notifFrame
        
        -- Add progress bar for duration
        local progressBg = Instance.new("Frame")
        progressBg.Name = "ProgressBackground"
        progressBg.Size = UDim2.new(1, -20, 0, 2)
        progressBg.Position = UDim2.new(0, 10, 1, -6)
        progressBg.BackgroundColor3 = Color3.fromRGB(40, 40, 45)
        progressBg.BorderSizePixel = 0
        progressBg.BackgroundTransparency = 1
        progressBg.Parent = notifFrame
        
        local progressBar = Instance.new("Frame")
        progressBar.Name = "ProgressBar"
        progressBar.Size = UDim2.new(1, 0, 1, 0)
        progressBar.BackgroundColor3 = theme[1]
        progressBar.BorderSizePixel = 0
        progressBar.BackgroundTransparency = 1
        progressBar.Parent = progressBg
        
        local progressCorner = Instance.new("UICorner")
        progressCorner.CornerRadius = UDim.new(1, 0)
        progressCorner.Parent = progressBg
        
        local progressBarCorner = Instance.new("UICorner")
        progressBarCorner.CornerRadius = UDim.new(1, 0)
        progressBarCorner.Parent = progressBar
        
        -- Add close button
        local closeBtn = Instance.new("ImageButton")
        closeBtn.Name = "CloseButton"
        closeBtn.Size = UDim2.new(0, 16, 0, 16)
        closeBtn.Position = UDim2.new(1, -12, 0, 10)
        closeBtn.BackgroundTransparency = 1
        closeBtn.Image = GetIcon("close", "Material")
        closeBtn.ImageColor3 = Color3.fromRGB(200, 200, 200)
        closeBtn.ImageTransparency = 1
        closeBtn.Parent = notifFrame
        
        -- Close button hover effect
        closeBtn.MouseEnter:Connect(function()
            tween(closeBtn, {ImageColor3 = Color3.fromRGB(255, 100, 100)}, nil, fastTween)
        end)
        
        closeBtn.MouseLeave:Connect(function()
            tween(closeBtn, {ImageColor3 = Color3.fromRGB(200, 200, 200)}, nil, fastTween)
        end)
        
        local closed = false
        closeBtn.MouseButton1Click:Connect(function()
            if closed then return end
            closed = true
            
            -- Run exit animation
            TweenService:Create(notifFrame, TweenInfo.new(0.4, Enum.EasingStyle.Quint), {Position = UDim2.new(1, 20, 1, -90), BackgroundTransparency = 1}):Play()
            TweenService:Create(uiStroke, TweenInfo.new(0.4, Enum.EasingStyle.Quint), {Transparency = 1}):Play()
            TweenService:Create(accentBar, TweenInfo.new(0.4, Enum.EasingStyle.Quint), {BackgroundTransparency = 1}):Play()
            TweenService:Create(titleLabel, TweenInfo.new(0.4, Enum.EasingStyle.Quint), {TextTransparency = 1}):Play()
            TweenService:Create(contentLabel, TweenInfo.new(0.4, Enum.EasingStyle.Quint), {TextTransparency = 1}):Play()
            TweenService:Create(iconImage, TweenInfo.new(0.4, Enum.EasingStyle.Quint), {ImageTransparency = 1}):Play()
            TweenService:Create(iconGlow, TweenInfo.new(0.4, Enum.EasingStyle.Quint), {ImageTransparency = 1}):Play()
            TweenService:Create(progressBg, TweenInfo.new(0.4, Enum.EasingStyle.Quint), {BackgroundTransparency = 1}):Play()
            TweenService:Create(progressBar, TweenInfo.new(0.4, Enum.EasingStyle.Quint), {BackgroundTransparency = 1}):Play()
            TweenService:Create(closeBtn, TweenInfo.new(0.4, Enum.EasingStyle.Quint), {ImageTransparency = 1}):Play()
            TweenService:Create(notifShadow, TweenInfo.new(0.5, Enum.EasingStyle.Quint), {ImageTransparency = 1}):Play()
            
            task.wait(0.4)
            screenGui:Destroy()
        end)
        
        -- Staggered animation
        -- Entrance animation
        TweenService:Create(notifFrame, TweenInfo.new(0.6, Enum.EasingStyle.Back), {BackgroundTransparency = 0, Position = UDim2.new(1, -310, 1, -90)}):Play()
        task.wait(0.05)
        TweenService:Create(notifShadow, TweenInfo.new(0.6, Enum.EasingStyle.Quint), {ImageTransparency = 0.6}):Play()
        task.wait(0.05)
        TweenService:Create(uiStroke, TweenInfo.new(0.4, Enum.EasingStyle.Quint), {Transparency = 0}):Play()
        TweenService:Create(accentBar, TweenInfo.new(0.4, Enum.EasingStyle.Quint), {BackgroundTransparency = 0}):Play()
        task.wait(0.05)
        TweenService:Create(titleLabel, TweenInfo.new(0.4, Enum.EasingStyle.Quint), {TextTransparency = 0}):Play()
        task.wait(0.05)
        TweenService:Create(iconImage, TweenInfo.new(0.4, Enum.EasingStyle.Quint), {ImageTransparency = 0}):Play()
        TweenService:Create(iconGlow, TweenInfo.new(0.4, Enum.EasingStyle.Quint), {ImageTransparency = 0.7}):Play()
        task.wait(0.05)
        TweenService:Create(contentLabel, TweenInfo.new(0.4, Enum.EasingStyle.Quint), {TextTransparency = 0}):Play()
        TweenService:Create(closeBtn, TweenInfo.new(0.4, Enum.EasingStyle.Quint), {ImageTransparency = 0}):Play()
        task.wait(0.05)
        TweenService:Create(progressBg, TweenInfo.new(0.4, Enum.EasingStyle.Quint), {BackgroundTransparency = 0}):Play()
        TweenService:Create(progressBar, TweenInfo.new(0.4, Enum.EasingStyle.Quint), {BackgroundTransparency = 0}):Play()
        
        -- Progress bar animation
        TweenService:Create(progressBar, TweenInfo.new(options.Duration, Enum.EasingStyle.Linear), {Size = UDim2.new(0, 0, 1, 0)}):Play()
        
        -- Exit animation if not manually closed
        if not closed then
            task.wait(options.Duration)
            
            TweenService:Create(notifFrame, TweenInfo.new(0.5, Enum.EasingStyle.Quint), {BackgroundTransparency = 1, Position = UDim2.new(1, 20, 1, -90)}):Play()
            TweenService:Create(uiStroke, TweenInfo.new(0.3, Enum.EasingStyle.Quint), {Transparency = 1}):Play()
            TweenService:Create(accentBar, TweenInfo.new(0.3, Enum.EasingStyle.Quint), {BackgroundTransparency = 1}):Play()
            TweenService:Create(titleLabel, TweenInfo.new(0.3, Enum.EasingStyle.Quint), {TextTransparency = 1}):Play()
            TweenService:Create(contentLabel, TweenInfo.new(0.3, Enum.EasingStyle.Quint), {TextTransparency = 1}):Play()
            TweenService:Create(iconImage, TweenInfo.new(0.3, Enum.EasingStyle.Quint), {ImageTransparency = 1}):Play()
            TweenService:Create(iconGlow, TweenInfo.new(0.3, Enum.EasingStyle.Quint), {ImageTransparency = 1}):Play()
            TweenService:Create(progressBg, TweenInfo.new(0.3, Enum.EasingStyle.Quint), {BackgroundTransparency = 1}):Play()
            TweenService:Create(progressBar, TweenInfo.new(0.3, Enum.EasingStyle.Quint), {BackgroundTransparency = 1}):Play()
            TweenService:Create(closeBtn, TweenInfo.new(0.3, Enum.EasingStyle.Quint), {ImageTransparency = 1}):Play()
            TweenService:Create(notifShadow, TweenInfo.new(0.5, Enum.EasingStyle.Quint), {ImageTransparency = 1}):Play()
            
            task.wait(0.5)
            screenGui:Destroy()
        end
    end)
end

-- Main window sizes
local MainSize = UDim2.fromOffset(650, 400)
local MinimizedSize = UDim2.fromOffset(650, 40)

-- Window creation function
function VexHub:CreateWindow(options)
    options = Kwargify({
        Name = "Vex Hub",
        Subtitle = "Fluid UI Library",
        LogoID = "6022668955", -- Default code icon
        LoadingEnabled = true,
        LoadingTitle = "Vex Hub",
        LoadingSubtitle = "Loading...",
        Theme = "Fluent" -- Default to new Fluent theme
    }, options or {})
    
    -- Create GUI objects
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "VexHub"
    screenGui.ResetOnSpawn = false
    screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    
    -- Protect GUI from game scripts
    if syn and syn.protect_gui then
        syn.protect_gui(screenGui)
        screenGui.Parent = CoreGui
    elseif gethui then
        screenGui.Parent = gethui()
    else
        screenGui.Parent = CoreGui
    end
    
    -- Main window frame with smoother corners and shadow
    local mainFrame = Instance.new("Frame")
    mainFrame.Name = "MainFrame"
    mainFrame.Size = UDim2.new(0, 0, 0, 0) -- Start small for animation
    mainFrame.Position = UDim2.new(0.5, 0, 0.5, 0)
    mainFrame.AnchorPoint = Vector2.new(0.5, 0.5)
    mainFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 25) -- Darker background
    mainFrame.BorderSizePixel = 0
    mainFrame.ClipsDescendants = true
    mainFrame.Parent = screenGui
    
    -- Add shadow
    local shadow = Instance.new("ImageLabel")
    shadow.Name = "Shadow"
    shadow.AnchorPoint = Vector2.new(0.5, 0.5)
    shadow.BackgroundTransparency = 1
    shadow.Position = UDim2.new(0.5, 0, 0.5, 0)
    shadow.Size = UDim2.new(1, 45, 1, 45)
    shadow.ZIndex = -1
    shadow.Image = "rbxassetid://6014054483"
    shadow.ImageColor3 = Color3.fromRGB(0, 0, 0)
    shadow.ImageTransparency = 0.5
    shadow.ScaleType = Enum.ScaleType.Slice
    shadow.SliceCenter = Rect.new(128, 128, 128, 128)
    shadow.Parent = mainFrame
    
    local uiCorner = Instance.new("UICorner")
    uiCorner.CornerRadius = UDim.new(0, 10) -- Larger, smoother corners
    uiCorner.Parent = mainFrame
    
    -- Title bar with modern design
    local titleBar = Instance.new("Frame")
    titleBar.Name = "TitleBar"
    titleBar.Size = UDim2.new(1, 0, 0, 40)
    titleBar.BackgroundColor3 = Color3.fromRGB(25, 25, 30) -- Slightly lighter than main frame
    titleBar.BorderSizePixel = 0
    titleBar.Parent = mainFrame
    
    local titleCorner = Instance.new("UICorner")
    titleCorner.CornerRadius = UDim.new(0, 10)
    titleCorner.Parent = titleBar
    
    -- Corner fix for title bar
    local cornerFix = Instance.new("Frame")
    cornerFix.Name = "CornerFix"
    cornerFix.Size = UDim2.new(1, 0, 0, 15)
    cornerFix.Position = UDim2.new(0, 0, 1, -15)
    cornerFix.BackgroundColor3 = Color3.fromRGB(25, 25, 30)
    cornerFix.BorderSizePixel = 0
    cornerFix.Parent = titleBar
    
    -- Logo with subtle glow
    local logoImage = Instance.new("ImageLabel")
    logoImage.Name = "Logo"
    logoImage.Size = UDim2.new(0, 20, 0, 20)
    logoImage.Position = UDim2.new(0, 15, 0, 10)
    logoImage.BackgroundTransparency = 1
    logoImage.Image = "rbxassetid://" .. options.LogoID
    logoImage.ImageColor3 = Color3.fromRGB(255, 255, 255)
    logoImage.Parent = titleBar
    
    -- Add logo glow
    local logoGlow = Instance.new("ImageLabel")
    logoGlow.Name = "Glow"
    logoGlow.Size = UDim2.new(1.5, 0, 1.5, 0)
    logoGlow.Position = UDim2.new(0.5, 0, 0.5, 0)
    logoGlow.AnchorPoint = Vector2.new(0.5, 0.5)
    logoGlow.BackgroundTransparency = 1
    logoGlow.Image = "rbxassetid://4996891970" -- Radial gradient
    logoGlow.ImageColor3 = Color3.fromRGB(255, 255, 255)
    logoGlow.ImageTransparency = 0.85
    logoGlow.Parent = logoImage
    
    -- Modern title text
    local titleText = Instance.new("TextLabel")
    titleText.Name = "Title"
    titleText.Size = UDim2.new(0, 200, 0, 20)
    titleText.Position = UDim2.new(0, 45, 0, 4)
    titleText.BackgroundTransparency = 1
    titleText.Text = options.Name
    titleText.TextColor3 = Color3.fromRGB(255, 255, 255)
    titleText.Font = Enum.Font.GothamBold
    titleText.TextSize = 16
    titleText.TextXAlignment = Enum.TextXAlignment.Left
    titleText.Parent = titleBar
    
    -- Subtitle text with more subtle appearance
    local subtitleText = Instance.new("TextLabel")
    subtitleText.Name = "Subtitle"
    subtitleText.Size = UDim2.new(0, 200, 0, 20)
    subtitleText.Position = UDim2.new(0, 45, 0, 20)
    subtitleText.BackgroundTransparency = 1
    subtitleText.Text = options.Subtitle
    subtitleText.TextColor3 = Color3.fromRGB(180, 180, 180)
    subtitleText.Font = Enum.Font.Gotham
    subtitleText.TextSize = 13
    subtitleText.TextXAlignment = Enum.TextXAlignment.Left
    subtitleText.Parent = titleBar
    
    -- Control buttons container
    local controlsFrame = Instance.new("Frame")
    controlsFrame.Name = "Controls"
    controlsFrame.Size = UDim2.new(0, 100, 1, 0)
    controlsFrame.Position = UDim2.new(1, -100, 0, 0)
    controlsFrame.BackgroundTransparency = 1
    controlsFrame.Parent = titleBar
    
    -- Modern-styled close button
    local closeButton = Instance.new("ImageButton")
    closeButton.Name = "CloseButton"
    closeButton.Size = UDim2.new(0, 20, 0, 20)
    closeButton.Position = UDim2.new(1, -25, 0, 10)
    closeButton.BackgroundTransparency = 1
    closeButton.Image = GetIcon("close", "Material")
    closeButton.ImageColor3 = Color3.fromRGB(255, 255, 255)
    closeButton.Parent = controlsFrame
    
    -- Minimize button
    local minimizeButton = Instance.new("ImageButton")
    minimizeButton.Name = "MinimizeButton"
    minimizeButton.Size = UDim2.new(0, 20, 0, 20)
    minimizeButton.Position = UDim2.new(1, -55, 0, 10)
    minimizeButton.BackgroundTransparency = 1
    minimizeButton.Image = GetIcon("minimize", "Material")
    minimizeButton.ImageColor3 = Color3.fromRGB(255, 255, 255)
    minimizeButton.Parent = controlsFrame
    
    -- Apply theme gradient to title bar with smoother appearance
    local gradientFrame = Instance.new("Frame")
    gradientFrame.Name = "ThemeGradient"
    gradientFrame.Size = UDim2.new(1, 0, 0, 2)
    gradientFrame.Position = UDim2.new(0, 0, 1, 0)
    gradientFrame.BorderSizePixel = 0
    gradientFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    gradientFrame.Parent = titleBar
    
    local gradient = Instance.new("UIGradient")
    local theme = PresetThemes[options.Theme] or PresetThemes["Fluent"]
    gradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, theme[1]),
        ColorSequenceKeypoint.new(0.5, theme[2]),
        ColorSequenceKeypoint.new(1, theme[3])
    })
    gradient.Parent = gradientFrame
    
    -- Content area with slightly lighter background
    local contentFrame = Instance.new("Frame")
    contentFrame.Name = "Content"
    contentFrame.Size = UDim2.new(1, 0, 1, -40)
    contentFrame.Position = UDim2.new(0, 0, 0, 40)
    contentFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 25)
    contentFrame.BorderSizePixel = 0
    contentFrame.ClipsDescendants = true
    contentFrame.Parent = mainFrame
    
    -- Tab navigation container with accent color
    local navFrame = Instance.new("Frame")
    navFrame.Name = "Navigation"
    navFrame.Size = UDim2.new(0, 45, 1, 0) -- Slightly wider
    navFrame.BackgroundColor3 = Color3.fromRGB(15, 15, 20) -- Slightly darker
    navFrame.BorderSizePixel = 0
    navFrame.Parent = contentFrame
    
    -- Add a subtle separator
    local navSeparator = Instance.new("Frame")
    navSeparator.Name = "Separator"
    navSeparator.Size = UDim2.new(0, 1, 1, 0)
    navSeparator.Position = UDim2.new(1, 0, 0, 0)
    navSeparator.BackgroundColor3 = Color3.fromRGB(40, 40, 45)
    navSeparator.BorderSizePixel = 0
    navSeparator.Parent = navFrame
    
    local navList = Instance.new("ScrollingFrame")
    navList.Name = "TabButtons"
    navList.Size = UDim2.new(1, 0, 1, -10)
    navList.Position = UDim2.new(0, 0, 0, 5)
    navList.BackgroundTransparency = 1
    navList.ScrollBarThickness = 0
    navList.ScrollingDirection = Enum.ScrollingDirection.Y
    navList.CanvasSize = UDim2.new(0, 0, 0, 0)
    navList.Parent = navFrame
    
    local navListLayout = Instance.new("UIListLayout")
    navListLayout.Padding = UDim.new(0, 10)
    navListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
    navListLayout.Parent = navList
    
    -- Tab container
    local tabsFrame = Instance.new("Frame")
    tabsFrame.Name = "TabsFrame"
    tabsFrame.Size = UDim2.new(1, -45, 1, 0) -- Adjusted for wider nav
    tabsFrame.Position = UDim2.new(0, 45, 0, 0) -- Adjusted for wider nav
    tabsFrame.BackgroundTransparency = 1
    tabsFrame.Parent = contentFrame
    
    -- Make window draggable
    Draggable(titleBar, mainFrame)
    
    -- Setup close and minimize buttons with animations
    closeButton.MouseEnter:Connect(function()
        tween(closeButton, {ImageColor3 = Color3.fromRGB(255, 100, 100)}, nil, fastTween)
    end)
    
    closeButton.MouseLeave:Connect(function()
        tween(closeButton, {ImageColor3 = Color3.fromRGB(255, 255, 255)}, nil, fastTween)
    end)
    
    closeButton.MouseButton1Click:Connect(function()
        tween(mainFrame, {Size = UDim2.new(0, 0, 0, 0), Position = UDim2.new(0.5, 0, 0.5, 0)}, function()
            screenGui:Destroy()
        end, longTween)
    end)
    
    minimizeButton.MouseEnter:Connect(function()
        tween(minimizeButton, {ImageColor3 = theme[1]}, nil, fastTween)
    end)
    
    minimizeButton.MouseLeave:Connect(function()
        tween(minimizeButton, {ImageColor3 = Color3.fromRGB(255, 255, 255)}, nil, fastTween)
    end)
    
    local isMinimized = false
    minimizeButton.MouseButton1Click:Connect(function()
        isMinimized = not isMinimized
        if isMinimized then
            tween(mainFrame, {Size = MinimizedSize}, function()
                contentFrame.Visible = false
            end, longTween)
        else
            contentFrame.Visible = true
            tween(mainFrame, {Size = MainSize}, nil, longTween)
        end
    end)
    
    -- Window API
    local windowAPI = {}
    local tabs = {}
    local currentTab = nil
    
    -- Create tab function
    function windowAPI:CreateTab(tabTitle, tabIcon)
        -- Create tab button
        local tabButton = Instance.new("ImageButton")
        tabButton.Name = tabTitle .. "Button"
        tabButton.Size = UDim2.new(0, 30, 0, 30)
        tabButton.BackgroundColor3 = Color3.fromRGB(30, 30, 35)
        tabButton.BackgroundTransparency = 0.8
        tabButton.Image = GetIcon(tabIcon or "home", "Material")
        tabButton.Parent = navList
        
        local tabButtonCorner = Instance.new("UICorner")
        tabButtonCorner.CornerRadius = UDim.new(0, 6)
        tabButtonCorner.Parent = tabButton
        
        -- Create tab content
        local tabContent = Instance.new("ScrollingFrame")
        tabContent.Name = tabTitle
        tabContent.Size = UDim2.new(1, 0, 1, 0)
        tabContent.BackgroundTransparency = 1
        tabContent.BorderSizePixel = 0
        tabContent.ScrollBarThickness = 4
        tabContent.ScrollingDirection = Enum.ScrollingDirection.Y
        tabContent.CanvasSize = UDim2.new(0, 0, 0, 0)
        tabContent.Visible = false
        tabContent.Parent = tabsFrame
        
        local elementsLayout = Instance.new("UIListLayout")
        elementsLayout.Padding = UDim.new(0, 10)
        elementsLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
        elementsLayout.Parent = tabContent
        
        local elementsInsets = Instance.new("UIPadding")
        elementsInsets.PaddingTop = UDim.new(0, 10)
        elementsInsets.PaddingBottom = UDim.new(0, 10)
        elementsInsets.Parent = tabContent
        
        -- Auto-update canvas size
        elementsLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
            tabContent.CanvasSize = UDim2.new(0, 0, 0, elementsLayout.AbsoluteContentSize.Y + 20)
        end)
        
        -- Create tab object
        local tabObject = {
            Button = tabButton,
            Content = tabContent,
            Title = tabTitle,
            Elements = {}
        }
        
        -- Tab button click handler
        tabButton.MouseButton1Click:Connect(function()
            if currentTab then
                currentTab.Content.Visible = false
                tween(currentTab.Button, {BackgroundTransparency = 0.8})
            end
            
            tabContent.Visible = true
            tween(tabButton, {BackgroundTransparency = 0})
            currentTab = tabObject
        end)
        
        -- Add tab to list
        table.insert(tabs, tabObject)
        
        -- If this is the first tab, make it active
        if #tabs == 1 then
            tabContent.Visible = true
            tween(tabButton, {BackgroundTransparency = 0})
            currentTab = tabObject
        end
        
        -- Add elements to tabs
        local elementsAPI = {}
        
        -- Button element
        function elementsAPI:AddButton(options)
            options = Kwargify({
                Name = "Button",
                Callback = function() end
            }, options or {})
            
            -- Create button
            local buttonFrame = Instance.new("Frame")
            buttonFrame.Name = options.Name .. "Button"
            buttonFrame.Size = UDim2.new(0.95, 0, 0, 40)
            buttonFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 35)
            buttonFrame.BorderSizePixel = 0
            buttonFrame.Parent = tabContent
            
            local buttonCorner = Instance.new("UICorner")
            buttonCorner.CornerRadius = UDim.new(0, 8)
            buttonCorner.Parent = buttonFrame
            
            local buttonStroke = Instance.new("UIStroke")
            buttonStroke.Color = Color3.fromRGB(60, 60, 70)
            buttonStroke.Thickness = 1
            buttonStroke.Parent = buttonFrame
            
            -- Add shadow
            local buttonShadow = Instance.new("ImageLabel")
            buttonShadow.Name = "Shadow"
            buttonShadow.AnchorPoint = Vector2.new(0.5, 0.5)
            buttonShadow.BackgroundTransparency = 1
            buttonShadow.Position = UDim2.new(0.5, 0, 0.5, 0)
            buttonShadow.Size = UDim2.new(1, 25, 1, 25)
            buttonShadow.ZIndex = -1
            buttonShadow.Image = "rbxassetid://6014054483"
            buttonShadow.ImageColor3 = Color3.fromRGB(0, 0, 0)
            buttonShadow.ImageTransparency = 0.7
            buttonShadow.ScaleType = Enum.ScaleType.Slice
            buttonShadow.SliceCenter = Rect.new(128, 128, 128, 128)
            buttonShadow.Parent = buttonFrame
            
            -- Add ripple effect container
            local rippleContainer = Instance.new("Frame")
            rippleContainer.Name = "RippleContainer"
            rippleContainer.Size = UDim2.new(1, 0, 1, 0)
            rippleContainer.BackgroundTransparency = 1
            rippleContainer.ClipsDescendants = true
            rippleContainer.ZIndex = 2
            rippleContainer.Parent = buttonFrame
            
            local buttonLabel = Instance.new("TextLabel")
            buttonLabel.Name = "Label"
            buttonLabel.Size = UDim2.new(1, -20, 1, 0)
            buttonLabel.Position = UDim2.new(0, 10, 0, 0)
            buttonLabel.BackgroundTransparency = 1
            buttonLabel.Text = options.Name
            buttonLabel.TextColor3 = Color3.fromRGB(240, 240, 240)
            buttonLabel.TextSize = 14
            buttonLabel.Font = Enum.Font.GothamSemibold
            buttonLabel.TextXAlignment = Enum.TextXAlignment.Left
            buttonLabel.Parent = buttonFrame
            
            -- Button interaction
            local buttonClick = Instance.new("TextButton")
            buttonClick.Name = "ButtonInteraction"
            buttonClick.Size = UDim2.new(1, 0, 1, 0)
            buttonClick.BackgroundTransparency = 1
            buttonClick.Text = ""
            buttonClick.ZIndex = 3
            buttonClick.Parent = buttonFrame
            
            -- Function to create ripple effect
            local function createRipple(x, y)
                local ripple = Instance.new("Frame")
                ripple.Name = "Ripple"
                ripple.AnchorPoint = Vector2.new(0.5, 0.5)
                ripple.Position = UDim2.new(0, x, 0, y)
                ripple.Size = UDim2.new(0, 0, 0, 0)
                ripple.BorderSizePixel = 0
                ripple.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                ripple.BackgroundTransparency = 0.85
                ripple.ZIndex = 2
                ripple.Parent = rippleContainer
                
                local rippleCorner = Instance.new("UICorner")
                rippleCorner.CornerRadius = UDim.new(1, 0)
                rippleCorner.Parent = ripple
                
                -- Animate the ripple
                local size = math.max(buttonFrame.AbsoluteSize.X, buttonFrame.AbsoluteSize.Y) * 1.5
                
                TweenService:Create(ripple, TweenInfo.new(0.5, Enum.EasingStyle.Quart, Enum.EasingDirection.Out), 
                    {Size = UDim2.new(0, size, 0, size), BackgroundTransparency = 1}):Play()
                
                -- Remove the ripple after animation
                task.delay(0.5, function()
                    ripple:Destroy()
                end)
            end
            
            -- Button hover and click effects
            buttonClick.MouseEnter:Connect(function()
                tween(buttonFrame, {BackgroundColor3 = Color3.fromRGB(40, 40, 45)}, nil, fastTween)
                tween(buttonShadow, {ImageTransparency = 0.5}, nil, fastTween)
            end)
            
            buttonClick.MouseLeave:Connect(function()
                tween(buttonFrame, {BackgroundColor3 = Color3.fromRGB(30, 30, 35)}, nil, fastTween)
                tween(buttonShadow, {ImageTransparency = 0.7}, nil, fastTween)
            end)
            
            buttonClick.MouseButton1Down:Connect(function()
                local x, y = game:GetService("UserInputService"):GetMouseLocation().X, game:GetService("UserInputService"):GetMouseLocation().Y
                local buttonPos = buttonFrame.AbsolutePosition
                local relX, relY = x - buttonPos.X, y - buttonPos.Y
                
                createRipple(relX, relY)
                tween(buttonFrame, {BackgroundColor3 = Color3.fromRGB(50, 50, 55)}, nil, fastTween)
                tween(buttonFrame, {Size = UDim2.new(0.95, 0, 0, 38)}, nil, fastTween)
            end)
            
            buttonClick.MouseButton1Up:Connect(function()
                tween(buttonFrame, {BackgroundColor3 = Color3.fromRGB(40, 40, 45)}, nil, fastTween)
                tween(buttonFrame, {Size = UDim2.new(0.95, 0, 0, 40)}, nil, fastTween)
            end)
            
            buttonClick.MouseButton1Click:Connect(function()
                options.Callback()
            end)
            
            -- Return button object for future modification
            local buttonObj = {
                Instance = buttonFrame,
                Options = options
            }
            
            table.insert(tabObject.Elements, buttonObj)
            return buttonObj
        end
        
        -- Toggle element
        function elementsAPI:AddToggle(options)
            options = Kwargify({
                Name = "Toggle",
                Default = false,
                Callback = function() end
            }, options or {})
            
            -- Create toggle
            local toggleFrame = Instance.new("Frame")
            toggleFrame.Name = options.Name .. "Toggle"
            toggleFrame.Size = UDim2.new(0.95, 0, 0, 40)
            toggleFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 35)
            toggleFrame.BorderSizePixel = 0
            toggleFrame.Parent = tabContent
            
            local toggleCorner = Instance.new("UICorner")
            toggleCorner.CornerRadius = UDim.new(0, 8)
            toggleCorner.Parent = toggleFrame
            
            local toggleStroke = Instance.new("UIStroke")
            toggleStroke.Color = Color3.fromRGB(60, 60, 70)
            toggleStroke.Thickness = 1
            toggleStroke.Parent = toggleFrame
            
            -- Add shadow
            local toggleShadow = Instance.new("ImageLabel")
            toggleShadow.Name = "Shadow"
            toggleShadow.AnchorPoint = Vector2.new(0.5, 0.5)
            toggleShadow.BackgroundTransparency = 1
            toggleShadow.Position = UDim2.new(0.5, 0, 0.5, 0)
            toggleShadow.Size = UDim2.new(1, 25, 1, 25)
            toggleShadow.ZIndex = -1
            toggleShadow.Image = "rbxassetid://6014054483"
            toggleShadow.ImageColor3 = Color3.fromRGB(0, 0, 0)
            toggleShadow.ImageTransparency = 0.7
            toggleShadow.ScaleType = Enum.ScaleType.Slice
            toggleShadow.SliceCenter = Rect.new(128, 128, 128, 128)
            toggleShadow.Parent = toggleFrame
            
            local toggleLabel = Instance.new("TextLabel")
            toggleLabel.Name = "Label"
            toggleLabel.Size = UDim2.new(1, -80, 1, 0)
            toggleLabel.Position = UDim2.new(0, 10, 0, 0)
            toggleLabel.BackgroundTransparency = 1
            toggleLabel.Text = options.Name
            toggleLabel.TextColor3 = Color3.fromRGB(240, 240, 240)
            toggleLabel.TextSize = 14
            toggleLabel.Font = Enum.Font.GothamSemibold
            toggleLabel.TextXAlignment = Enum.TextXAlignment.Left
            toggleLabel.Parent = toggleFrame
            
            -- Toggle switch with fluent design
            local toggleSwitch = Instance.new("Frame")
            toggleSwitch.Name = "Switch"
            toggleSwitch.Size = UDim2.new(0, 44, 0, 22)
            toggleSwitch.Position = UDim2.new(1, -54, 0.5, 0)
            toggleSwitch.AnchorPoint = Vector2.new(0, 0.5)
            toggleSwitch.BackgroundColor3 = Color3.fromRGB(50, 50, 55)
            toggleSwitch.BorderSizePixel = 0
            toggleSwitch.Parent = toggleFrame
            
            local switchCorner = Instance.new("UICorner")
            switchCorner.CornerRadius = UDim.new(1, 0)
            switchCorner.Parent = toggleSwitch
            
            -- Glow for switch when active
            local switchGlow = Instance.new("ImageLabel")
            switchGlow.Name = "Glow"
            switchGlow.Size = UDim2.new(1.5, 0, 1.5, 0)
            switchGlow.Position = UDim2.new(0.5, 0, 0.5, 0)
            switchGlow.AnchorPoint = Vector2.new(0.5, 0.5)
            switchGlow.BackgroundTransparency = 1
            switchGlow.Image = "rbxassetid://4996891970" -- Radial gradient
            switchGlow.ImageColor3 = Color3.fromRGB(255, 255, 255)
            switchGlow.ImageTransparency = 1 -- Start hidden
            switchGlow.ZIndex = 0
            switchGlow.Parent = toggleSwitch
            
            local toggleIndicator = Instance.new("Frame")
            toggleIndicator.Name = "Indicator"
            toggleIndicator.Size = UDim2.new(0, 16, 0, 16)
            toggleIndicator.Position = UDim2.new(0, 3, 0.5, 0)
            toggleIndicator.AnchorPoint = Vector2.new(0, 0.5)
            toggleIndicator.BackgroundColor3 = Color3.fromRGB(200, 200, 200)
            toggleIndicator.BorderSizePixel = 0
            toggleIndicator.Parent = toggleSwitch
            
            local indicatorCorner = Instance.new("UICorner")
            indicatorCorner.CornerRadius = UDim.new(1, 0)
            indicatorCorner.Parent = toggleIndicator
            
            -- Toggle interaction
            local toggleClick = Instance.new("TextButton")
            toggleClick.Name = "ToggleInteraction"
            toggleClick.Size = UDim2.new(1, 0, 1, 0)
            toggleClick.BackgroundTransparency = 1
            toggleClick.Text = ""
            toggleClick.Parent = toggleFrame
            
            -- Get theme colors
            local theme = PresetThemes[options.Theme] or PresetThemes["Fluent"]
            
            -- Toggle state
            local toggled = options.Default
            
            local function updateToggle()
                if toggled then
                    tween(toggleSwitch, {BackgroundColor3 = theme[1]}, nil, fastTween)
                    tween(toggleIndicator, {Position = UDim2.new(0, 25, 0.5, 0), BackgroundColor3 = Color3.fromRGB(255, 255, 255)}, nil, TweenInfo.new(0.2, Enum.EasingStyle.Back, Enum.EasingDirection.Out))
                    tween(switchGlow, {ImageTransparency = 0.7, ImageColor3 = theme[1]}, nil, fastTween)
                else
                    tween(toggleSwitch, {BackgroundColor3 = Color3.fromRGB(50, 50, 55)}, nil, fastTween)
                    tween(toggleIndicator, {Position = UDim2.new(0, 3, 0.5, 0), BackgroundColor3 = Color3.fromRGB(200, 200, 200)}, nil, TweenInfo.new(0.2, Enum.EasingStyle.Back, Enum.EasingDirection.Out))
                    tween(switchGlow, {ImageTransparency = 1}, nil, fastTween)
                end
                options.Callback(toggled)
            end
            
            -- Set initial state
            updateToggle()
            
            -- Toggle hover and click effects
            toggleClick.MouseEnter:Connect(function()
                tween(toggleFrame, {BackgroundColor3 = Color3.fromRGB(40, 40, 45)}, nil, fastTween)
                tween(toggleShadow, {ImageTransparency = 0.5}, nil, fastTween)
            end)
            
            toggleClick.MouseLeave:Connect(function()
                tween(toggleFrame, {BackgroundColor3 = Color3.fromRGB(30, 30, 35)}, nil, fastTween)
                tween(toggleShadow, {ImageTransparency = 0.7}, nil, fastTween)
            end)
            
            toggleClick.MouseButton1Click:Connect(function()
                -- Scale animation for satisfying click feel
                tween(toggleSwitch, {Size = UDim2.new(0, 42, 0, 20)}, function()
                    tween(toggleSwitch, {Size = UDim2.new(0, 44, 0, 22)}, nil, fastTween)
                end, fastTween)
                
                toggled = not toggled
                updateToggle()
            end)
            
            -- Return toggle object for future modification
            local toggleObj = {
                Instance = toggleFrame,
                Options = options,
                SetValue = function(self, value)
                    toggled = value
                    updateToggle()
                end,
                GetValue = function(self)
                    return toggled
                end
            }
            
            table.insert(tabObject.Elements, toggleObj)
            return toggleObj
        end
        
        -- Slider element
        function elementsAPI:AddSlider(options)
            options = Kwargify({
                Name = "Slider",
                Min = 0,
                Max = 100,
                Default = 50,
                Increment = 1,
                Callback = function() end
            }, options or {})
            
            -- Create slider
            local sliderFrame = Instance.new("Frame")
            sliderFrame.Name = options.Name .. "Slider"
            sliderFrame.Size = UDim2.new(0.95, 0, 0, 60)
            sliderFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 35)
            sliderFrame.BorderSizePixel = 0
            sliderFrame.Parent = tabContent
            
            local sliderCorner = Instance.new("UICorner")
            sliderCorner.CornerRadius = UDim.new(0, 8)
            sliderCorner.Parent = sliderFrame
            
            local sliderStroke = Instance.new("UIStroke")
            sliderStroke.Color = Color3.fromRGB(60, 60, 70)
            sliderStroke.Thickness = 1
            sliderStroke.Parent = sliderFrame
            
            -- Add shadow
            local sliderShadow = Instance.new("ImageLabel")
            sliderShadow.Name = "Shadow"
            sliderShadow.AnchorPoint = Vector2.new(0.5, 0.5)
            sliderShadow.BackgroundTransparency = 1
            sliderShadow.Position = UDim2.new(0.5, 0, 0.5, 0)
            sliderShadow.Size = UDim2.new(1, 25, 1, 25)
            sliderShadow.ZIndex = -1
            sliderShadow.Image = "rbxassetid://6014054483"
            sliderShadow.ImageColor3 = Color3.fromRGB(0, 0, 0)
            sliderShadow.ImageTransparency = 0.7
            sliderShadow.ScaleType = Enum.ScaleType.Slice
            sliderShadow.SliceCenter = Rect.new(128, 128, 128, 128)
            sliderShadow.Parent = sliderFrame
            
            local sliderLabel = Instance.new("TextLabel")
            sliderLabel.Name = "Label"
            sliderLabel.Size = UDim2.new(1, -20, 0, 20)
            sliderLabel.Position = UDim2.new(0, 10, 0, 5)
            sliderLabel.BackgroundTransparency = 1
            sliderLabel.Text = options.Name
            sliderLabel.TextColor3 = Color3.fromRGB(240, 240, 240)
            sliderLabel.TextSize = 14
            sliderLabel.Font = Enum.Font.GothamSemibold
            sliderLabel.TextXAlignment = Enum.TextXAlignment.Left
            sliderLabel.Parent = sliderFrame
            
            -- Value display with modern look
            local valueContainer = Instance.new("Frame")
            valueContainer.Name = "ValueContainer"
            valueContainer.Size = UDim2.new(0, 60, 0, 24)
            valueContainer.Position = UDim2.new(1, -70, 0, 5)
            valueContainer.BackgroundColor3 = Color3.fromRGB(40, 40, 45)
            valueContainer.BorderSizePixel = 0
            valueContainer.Parent = sliderFrame
            
            local valueCorner = Instance.new("UICorner")
            valueCorner.CornerRadius = UDim.new(0, 6)
            valueCorner.Parent = valueContainer
            
            local valueLabel = Instance.new("TextLabel")
            valueLabel.Name = "Value"
            valueLabel.Size = UDim2.new(1, 0, 1, 0)
            valueLabel.BackgroundTransparency = 1
            valueLabel.Text = tostring(options.Default)
            valueLabel.TextColor3 = Color3.fromRGB(240, 240, 240)
            valueLabel.TextSize = 14
            valueLabel.Font = Enum.Font.GothamBold
            valueLabel.Parent = valueContainer
            
            -- Get theme colors
            local theme = PresetThemes[options.Theme] or PresetThemes["Fluent"]
            
            -- Slider track with modern design
            local sliderTrack = Instance.new("Frame")
            sliderTrack.Name = "Track"
            sliderTrack.Size = UDim2.new(1, -20, 0, 6)
            sliderTrack.Position = UDim2.new(0, 10, 0, 35)
            sliderTrack.BackgroundColor3 = Color3.fromRGB(40, 40, 45)
            sliderTrack.BorderSizePixel = 0
            sliderTrack.Parent = sliderFrame
            
            local trackCorner = Instance.new("UICorner")
            trackCorner.CornerRadius = UDim.new(1, 0)
            trackCorner.Parent = sliderTrack
            
            -- Slider fill with gradient
            local sliderFill = Instance.new("Frame")
            sliderFill.Name = "Fill"
            sliderFill.Size = UDim2.new(0, 0, 1, 0)
            sliderFill.BackgroundColor3 = theme[1]
            sliderFill.BorderSizePixel = 0
            sliderFill.Parent = sliderTrack
            
            -- Add gradient to fill
            local fillGradient = Instance.new("UIGradient")
            fillGradient.Color = ColorSequence.new({
                ColorSequenceKeypoint.new(0, theme[1]),
                ColorSequenceKeypoint.new(1, theme[2])
            })
            fillGradient.Parent = sliderFill
            
            local fillCorner = Instance.new("UICorner")
            fillCorner.CornerRadius = UDim.new(1, 0)
            fillCorner.Parent = sliderFill
            
            -- Slider thumb with glow
            local sliderThumb = Instance.new("Frame")
            sliderThumb.Name = "Thumb"
            sliderThumb.Size = UDim2.new(0, 16, 0, 16)
            sliderThumb.Position = UDim2.new(1, 0, 0.5, 0)
            sliderThumb.AnchorPoint = Vector2.new(0.5, 0.5)
            sliderThumb.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            sliderThumb.BorderSizePixel = 0
            sliderThumb.Parent = sliderFill
            
            -- Add glow to thumb
            local thumbGlow = Instance.new("ImageLabel")
            thumbGlow.Name = "Glow"
            thumbGlow.Size = UDim2.new(1.5, 0, 1.5, 0)
            thumbGlow.Position = UDim2.new(0.5, 0, 0.5, 0)
            thumbGlow.AnchorPoint = Vector2.new(0.5, 0.5)
            thumbGlow.BackgroundTransparency = 1
            thumbGlow.Image = "rbxassetid://4996891970" -- Radial gradient
            thumbGlow.ImageColor3 = theme[1]
            thumbGlow.ImageTransparency = 0.7
            thumbGlow.ZIndex = 0
            thumbGlow.Parent = sliderThumb
            
            local thumbCorner = Instance.new("UICorner")
            thumbCorner.CornerRadius = UDim.new(1, 0)
            thumbCorner.Parent = sliderThumb
            
            -- Add slider interaction
            local sliderInteraction = Instance.new("TextButton")
            sliderInteraction.Name = "SliderInteraction"
            sliderInteraction.Size = UDim2.new(1, 0, 1, 0)
            sliderInteraction.Position = UDim2.new(0, 0, 0, 0)
            sliderInteraction.BackgroundTransparency = 1
            sliderInteraction.Text = ""
            sliderInteraction.Parent = sliderTrack
            
            -- Slider values and functions
            local min, max = options.Min, options.Max
            local value = options.Default
            local increment = options.Increment
            
            local function updateSlider(newValue)
                -- Clamp and round value to increment
                value = math.clamp(newValue, min, max)
                if increment then
                    value = math.floor(value / increment + 0.5) * increment
                    value = math.clamp(value, min, max)
                end
                
                -- Format displayed value
                local displayValue = tostring(value)
                if value == math.floor(value) then
                    displayValue = tostring(math.floor(value))
                end
                
                -- Update visual elements
                local percent = (value - min) / (max - min)
                sliderFill.Size = UDim2.new(percent, 0, 1, 0)
                valueLabel.Text = displayValue
                
                -- Call callback
                options.Callback(value)
            end
            
            -- Set initial value
            updateSlider(options.Default)
            
            -- Handle slider interaction with animation effects
            local isDragging = false
            
            sliderInteraction.MouseButton1Down:Connect(function()
                isDragging = true
                
                -- Scale up thumb when dragging
                tween(sliderThumb, {Size = UDim2.new(0, 20, 0, 20)}, nil, fastTween)
                tween(thumbGlow, {ImageTransparency = 0.5}, nil, fastTween)
                
                -- Update based on mouse position
                local function update()
                    if not isDragging then return end
                    
                    local mouse = game:GetService("Players").LocalPlayer:GetMouse()
                    local relX = math.clamp(mouse.X - sliderTrack.AbsolutePosition.X, 0, sliderTrack.AbsoluteSize.X)
                    local percent = relX / sliderTrack.AbsoluteSize.X
                    
                    local newValue = min + (max - min) * percent
                    updateSlider(newValue)
                end
                
                -- Connect mousemove
                local moveConnection
                moveConnection = game:GetService("RunService").RenderStepped:Connect(update)
                
                -- Cleanup on mouseup
                local releaseConnection
                releaseConnection = UserInputService.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        isDragging = false
                        
                        -- Scale down thumb when released
                        tween(sliderThumb, {Size = UDim2.new(0, 16, 0, 16)}, nil, fastTween)
                        tween(thumbGlow, {ImageTransparency = 0.7}, nil, fastTween)
                        
                        moveConnection:Disconnect()
                        releaseConnection:Disconnect()
                    end
                end)
                
                -- Initial update
                update()
            end)
            
            -- Hover effects
            sliderInteraction.MouseEnter:Connect(function()
                tween(sliderFrame, {BackgroundColor3 = Color3.fromRGB(40, 40, 45)}, nil, fastTween)
                tween(sliderShadow, {ImageTransparency = 0.5}, nil, fastTween)
                tween(thumbGlow, {ImageTransparency = 0.6}, nil, fastTween)
            end)
            
            sliderInteraction.MouseLeave:Connect(function()
                if not isDragging then
                    tween(sliderFrame, {BackgroundColor3 = Color3.fromRGB(30, 30, 35)}, nil, fastTween)
                    tween(sliderShadow, {ImageTransparency = 0.7}, nil, fastTween)
                    tween(thumbGlow, {ImageTransparency = 0.7}, nil, fastTween)
                end
            end)
            
            -- Return slider object for future modification
            local sliderObj = {
                Instance = sliderFrame,
                Options = options,
                SetValue = function(self, newValue)
                    updateSlider(newValue)
                end,
                GetValue = function(self)
                    return value
                end
            }
            
            table.insert(tabObject.Elements, sliderObj)
            return sliderObj
        end
        
        -- Dropdown element
        function elementsAPI:AddDropdown(options)
            options = Kwargify({
                Name = "Dropdown",
                Options = {},
                Default = nil,
                Callback = function() end
            }, options or {})
            
            -- Create dropdown
            local dropdownFrame = Instance.new("Frame")
            dropdownFrame.Name = options.Name .. "Dropdown"
            dropdownFrame.Size = UDim2.new(0.95, 0, 0, 40)
            dropdownFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 35)
            dropdownFrame.BorderSizePixel = 0
            dropdownFrame.ClipsDescendants = true
            dropdownFrame.Parent = tabContent
            
            local dropdownCorner = Instance.new("UICorner")
            dropdownCorner.CornerRadius = UDim.new(0, 6)
            dropdownCorner.Parent = dropdownFrame
            
            local dropdownStroke = Instance.new("UIStroke")
            dropdownStroke.Color = Color3.fromRGB(60, 60, 70)
            dropdownStroke.Thickness = 1
            dropdownStroke.Parent = dropdownFrame
            
            local dropdownLabel = Instance.new("TextLabel")
            dropdownLabel.Name = "Label"
            dropdownLabel.Size = UDim2.new(1, -80, 1, 0)
            dropdownLabel.Position = UDim2.new(0, 10, 0, 0)
            dropdownLabel.BackgroundTransparency = 1
            dropdownLabel.Text = options.Name
            dropdownLabel.TextColor3 = Color3.fromRGB(240, 240, 240)
            dropdownLabel.TextSize = 14
            dropdownLabel.Font = Enum.Font.Gotham
            dropdownLabel.TextXAlignment = Enum.TextXAlignment.Left
            dropdownLabel.Parent = dropdownFrame
            
            local selectedLabel = Instance.new("TextLabel")
            selectedLabel.Name = "Selected"
            selectedLabel.Size = UDim2.new(0, 120, 0, 20)
            selectedLabel.Position = UDim2.new(1, -140, 0.5, 0)
            selectedLabel.AnchorPoint = Vector2.new(0, 0.5)
            selectedLabel.BackgroundTransparency = 1
            selectedLabel.Text = options.Default or "Select..."
            selectedLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
            selectedLabel.TextSize = 14
            selectedLabel.Font = Enum.Font.Gotham
            selectedLabel.TextXAlignment = Enum.TextXAlignment.Right
            selectedLabel.TextTruncate = Enum.TextTruncate.AtEnd
            selectedLabel.Parent = dropdownFrame
            
            local dropdownArrow = Instance.new("ImageLabel")
            dropdownArrow.Name = "Arrow"
            dropdownArrow.Size = UDim2.new(0, 16, 0, 16)
            dropdownArrow.Position = UDim2.new(1, -15, 0.5, 0)
            dropdownArrow.AnchorPoint = Vector2.new(0.5, 0.5)
            dropdownArrow.BackgroundTransparency = 1
            dropdownArrow.Image = "rbxassetid://6031091004" -- arrow_drop_down
            dropdownArrow.ImageColor3 = Color3.fromRGB(200, 200, 200)
            dropdownArrow.Parent = dropdownFrame
            
            -- Options container
            local optionsFrame = Instance.new("Frame")
            optionsFrame.Name = "Options"
            optionsFrame.Size = UDim2.new(1, -20, 0, 0)
            optionsFrame.Position = UDim2.new(0, 10, 0, 40)
            optionsFrame.BackgroundTransparency = 1
            optionsFrame.BorderSizePixel = 0
            optionsFrame.ClipsDescendants = true
            optionsFrame.Visible = false
            optionsFrame.Parent = dropdownFrame
            
            local optionsList = Instance.new("ScrollingFrame")
            optionsList.Name = "OptionsList"
            optionsList.Size = UDim2.new(1, 0, 1, 0)
            optionsList.BackgroundTransparency = 1
            optionsList.BorderSizePixel = 0
            optionsList.ScrollBarThickness = 4
            optionsList.ScrollingDirection = Enum.ScrollingDirection.Y
            optionsList.CanvasSize = UDim2.new(0, 0, 0, 0)
            optionsList.Parent = optionsFrame
            
            local optionsLayout = Instance.new("UIListLayout")
            optionsLayout.Padding = UDim.new(0, 5)
            optionsLayout.SortOrder = Enum.SortOrder.LayoutOrder
            optionsLayout.Parent = optionsList
            
            -- Dropdown interaction
            local dropdownClick = Instance.new("TextButton")
            dropdownClick.Name = "DropdownInteraction"
            dropdownClick.Size = UDim2.new(1, 0, 1, 0)
            dropdownClick.BackgroundTransparency = 1
            dropdownClick.Text = ""
            dropdownClick.Parent = dropdownFrame
            
            -- Dropdown state and functions
            local isOpen = false
            local selected = options.Default
            
            local function updateDropdown()
                -- Update selected text
                selectedLabel.Text = selected or "Select..."
                
                -- Call callback if a value is selected
                if selected then
                    options.Callback(selected)
                end
            end
            
            local function createOption(option)
                local optionButton = Instance.new("Frame")
                optionButton.Name = option
                optionButton.Size = UDim2.new(1, 0, 0, 30)
                optionButton.BackgroundColor3 = Color3.fromRGB(40, 40, 45)
                optionButton.BackgroundTransparency = 0.5
                optionButton.BorderSizePixel = 0
                optionButton.Parent = optionsList
                
                local optionCorner = Instance.new("UICorner")
                optionCorner.CornerRadius = UDim.new(0, 4)
                optionCorner.Parent = optionButton
                
                local optionLabel = Instance.new("TextLabel")
                optionLabel.Name = "Label"
                optionLabel.Size = UDim2.new(1, -10, 1, 0)
                optionLabel.Position = UDim2.new(0, 5, 0, 0)
                optionLabel.BackgroundTransparency = 1
                optionLabel.Text = option
                optionLabel.TextColor3 = Color3.fromRGB(220, 220, 220)
                optionLabel.TextSize = 14
                optionLabel.Font = Enum.Font.Gotham
                optionLabel.TextXAlignment = Enum.TextXAlignment.Left
                optionLabel.Parent = optionButton
                
                local optionClick = Instance.new("TextButton")
                optionClick.Name = "OptionInteraction"
                optionClick.Size = UDim2.new(1, 0, 1, 0)
                optionClick.BackgroundTransparency = 1
                optionClick.Text = ""
                optionClick.Parent = optionButton
                
                -- Option interaction
                optionClick.MouseEnter:Connect(function()
                    tween(optionButton, {BackgroundTransparency = 0.2})
                end)
                
                optionClick.MouseLeave:Connect(function()
                    tween(optionButton, {BackgroundTransparency = 0.5})
                end)
                
                optionClick.MouseButton1Click:Connect(function()
                    selected = option
                    updateDropdown()
                    toggleDropdown(false)
                end)
                
                return optionButton
            end
            
            local function populateOptions()
                -- Clear existing options
                for _, child in pairs(optionsList:GetChildren()) do
                    if child:IsA("Frame") then
                        child:Destroy()
                    end
                end
                
                -- Create options
                for i, option in pairs(options.Options) do
                    createOption(option)
                end
                
                -- Update canvas size
                optionsList.CanvasSize = UDim2.new(0, 0, 0, optionsLayout.AbsoluteContentSize.Y + 5)
            end
            
            local function toggleDropdown(state)
                isOpen = state
                
                -- Animate dropdown
                if isOpen then
                    local listHeight = math.min(optionsLayout.AbsoluteContentSize.Y + 10, 150)
                    optionsFrame.Visible = true
                    tween(dropdownFrame, {Size = UDim2.new(0.95, 0, 0, 40 + listHeight + 10)})
                    tween(optionsFrame, {Size = UDim2.new(1, -20, 0, listHeight)})
                    tween(dropdownArrow, {Rotation = 180})
                else
                    tween(dropdownFrame, {Size = UDim2.new(0.95, 0, 0, 40)}, function()
                        optionsFrame.Visible = false
                    end)
                    tween(optionsFrame, {Size = UDim2.new(1, -20, 0, 0)})
                    tween(dropdownArrow, {Rotation = 0})
                end
            end
            
            -- Set initial value
            updateDropdown()
            populateOptions()
            
            -- Dropdown hover and click effects
            dropdownClick.MouseEnter:Connect(function()
                tween(dropdownFrame, {BackgroundColor3 = Color3.fromRGB(40, 40, 45)})
            end)
            
            dropdownClick.MouseLeave:Connect(function()
                tween(dropdownFrame, {BackgroundColor3 = Color3.fromRGB(30, 30, 35)})
            end)
            
            dropdownClick.MouseButton1Click:Connect(function()
                toggleDropdown(not isOpen)
            end)
            
            -- Return dropdown object for future modification
            local dropdownObj = {
                Instance = dropdownFrame,
                Options = options,
                SetValue = function(self, value)
                    selected = value
                    updateDropdown()
                end,
                GetValue = function(self)
                    return selected
                end,
                Refresh = function(self, newOptions)
                    options.Options = newOptions or options.Options
                    populateOptions()
                end
            }
            
            table.insert(tabObject.Elements, dropdownObj)
            return dropdownObj
        end
        
        -- Textbox element
        function elementsAPI:AddTextbox(options)
            options = Kwargify({
                Name = "Textbox",
                Default = "",
                PlaceholderText = "Enter text...",
                ClearOnFocus = false,
                Callback = function() end
            }, options or {})
            
            -- Create textbox
            local textboxFrame = Instance.new("Frame")
            textboxFrame.Name = options.Name .. "Textbox"
            textboxFrame.Size = UDim2.new(0.95, 0, 0, 40)
            textboxFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 35)
            textboxFrame.BorderSizePixel = 0
            textboxFrame.Parent = tabContent
            
            local textboxCorner = Instance.new("UICorner")
            textboxCorner.CornerRadius = UDim.new(0, 6)
            textboxCorner.Parent = textboxFrame
            
            local textboxStroke = Instance.new("UIStroke")
            textboxStroke.Color = Color3.fromRGB(60, 60, 70)
            textboxStroke.Thickness = 1
            textboxStroke.Parent = textboxFrame
            
            local textboxLabel = Instance.new("TextLabel")
            textboxLabel.Name = "Label"
            textboxLabel.Size = UDim2.new(0, 120, 1, 0)
            textboxLabel.Position = UDim2.new(0, 10, 0, 0)
            textboxLabel.BackgroundTransparency = 1
            textboxLabel.Text = options.Name
            textboxLabel.TextColor3 = Color3.fromRGB(240, 240, 240)
            textboxLabel.TextSize = 14
            textboxLabel.Font = Enum.Font.Gotham
            textboxLabel.TextXAlignment = Enum.TextXAlignment.Left
            textboxLabel.Parent = textboxFrame
            
            local inputBox = Instance.new("Frame")
            inputBox.Name = "InputBox"
            inputBox.Size = UDim2.new(0, 180, 0, 26)
            inputBox.Position = UDim2.new(1, -190, 0.5, 0)
            inputBox.AnchorPoint = Vector2.new(0, 0.5)
            inputBox.BackgroundColor3 = Color3.fromRGB(40, 40, 45)
            inputBox.BorderSizePixel = 0
            inputBox.Parent = textboxFrame
            
            local inputCorner = Instance.new("UICorner")
            inputCorner.CornerRadius = UDim.new(0, 4)
            inputCorner.Parent = inputBox
            
            local inputStroke = Instance.new("UIStroke")
            inputStroke.Color = Color3.fromRGB(70, 70, 80)
            inputStroke.Thickness = 1
            inputStroke.Parent = inputBox
            
            local textbox = Instance.new("TextBox")
            textbox.Name = "TextBox"
            textbox.Size = UDim2.new(1, -10, 1, 0)
            textbox.Position = UDim2.new(0, 5, 0, 0)
            textbox.BackgroundTransparency = 1
            textbox.Text = options.Default
            textbox.PlaceholderText = options.PlaceholderText
            textbox.TextColor3 = Color3.fromRGB(240, 240, 240)
            textbox.PlaceholderColor3 = Color3.fromRGB(120, 120, 130)
            textbox.TextSize = 14
            textbox.Font = Enum.Font.Gotham
            textbox.TextXAlignment = Enum.TextXAlignment.Left
            textbox.TextTruncate = Enum.TextTruncate.AtEnd
            textbox.ClearTextOnFocus = options.ClearOnFocus
            textbox.Parent = inputBox
            
            -- Textbox interaction
            textbox.Focused:Connect(function()
                tween(inputStroke, {Color = Color3.fromRGB(117, 76, 236)})
            end)
            
            textbox.FocusLost:Connect(function(enterPressed)
                tween(inputStroke, {Color = Color3.fromRGB(70, 70, 80)})
                options.Callback(textbox.Text)
            end)
            
            -- Return textbox object for future modification
            local textboxObj = {
                Instance = textboxFrame,
                Options = options,
                SetValue = function(self, value)
                    textbox.Text = value
                    options.Callback(value)
                end,
                GetValue = function(self)
                    return textbox.Text
                end
            }
            
            table.insert(tabObject.Elements, textboxObj)
            return textboxObj
        end
        
        -- Label element
        function elementsAPI:AddLabel(options)
            options = Kwargify({
                Text = "Label",
                Center = false
            }, options or {})
            
            -- Create label
            local labelFrame = Instance.new("Frame")
            labelFrame.Name = "Label"
            labelFrame.Size = UDim2.new(0.95, 0, 0, 30)
            labelFrame.BackgroundTransparency = 1
            labelFrame.Parent = tabContent
            
            local labelText = Instance.new("TextLabel")
            labelText.Name = "Text"
            labelText.Size = UDim2.new(1, 0, 1, 0)
            labelText.BackgroundTransparency = 1
            labelText.Text = options.Text
            labelText.TextColor3 = Color3.fromRGB(240, 240, 240)
            labelText.TextSize = 14
            labelText.Font = Enum.Font.GothamBold
            labelText.TextXAlignment = options.Center and Enum.TextXAlignment.Center or Enum.TextXAlignment.Left
            labelText.Parent = labelFrame
            
            -- Return label object for future modification
            local labelObj = {
                Instance = labelFrame,
                Options = options,
                SetText = function(self, text)
                    labelText.Text = text
                end
            }
            
            table.insert(tabObject.Elements, labelObj)
            return labelObj
        end
        
        -- Section divider element
        function elementsAPI:AddDivider(options)
            options = Kwargify({
                Text = nil
            }, options or {})
            
            -- Create divider
            local dividerFrame = Instance.new("Frame")
            dividerFrame.Name = "Divider"
            dividerFrame.Size = UDim2.new(0.95, 0, 0, 15)
            dividerFrame.BackgroundTransparency = 1
            dividerFrame.Parent = tabContent
            
            local dividerLine = Instance.new("Frame")
            dividerLine.Name = "Line"
            dividerLine.Size = UDim2.new(1, 0, 0, 1)
            dividerLine.Position = UDim2.new(0, 0, 0.5, 0)
            dividerLine.BackgroundColor3 = Color3.fromRGB(60, 60, 70)
            dividerLine.BorderSizePixel = 0
            dividerLine.Parent = dividerFrame
            
            -- Add optional text
            if options.Text then
                local dividerText = Instance.new("TextLabel")
                dividerText.Name = "Text"
                dividerText.Size = UDim2.new(0, 0, 0, 15)
                dividerText.Position = UDim2.new(0.5, 0, 0, 0)
                dividerText.AnchorPoint = Vector2.new(0.5, 0)
                dividerText.AutomaticSize = Enum.AutomaticSize.X
                dividerText.BackgroundColor3 = Color3.fromRGB(25, 25, 30)
                dividerText.BorderSizePixel = 0
                dividerText.Text = " " .. options.Text .. " "
                dividerText.TextColor3 = Color3.fromRGB(180, 180, 180)
                dividerText.TextSize = 12
                dividerText.Font = Enum.Font.Gotham
                dividerText.Parent = dividerFrame
                
                -- Adjust divider line
                dividerLine.Size = UDim2.new(1, -20, 0, 1)
                dividerLine.Position = UDim2.new(0, 10, 0.5, 0)
            end
            
            -- Return divider object
            local dividerObj = {
                Instance = dividerFrame,
                Options = options
            }
            
            table.insert(tabObject.Elements, dividerObj)
            return dividerObj
        end
        
        return elementsAPI
    end
    
    -- Trigger loading screen if enabled
    if options.LoadingEnabled then
        -- Create loading screen here
    end
    
    -- Animated entrance
    mainFrame.Size = UDim2.new(0, 0, 0, 0)
    mainFrame.Position = UDim2.new(0.5, 0, 0.5, 0)
    tween(mainFrame, {Size = MainSize}, nil, TweenInfo.new(0.6, Enum.EasingStyle.Back, Enum.EasingDirection.Out))
    
    return windowAPI
end

return VexHub

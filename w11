
-- Apple UI Library for Roblox
-- Feature-rich UI with shadows, animations, and modern design elements

local AppleLib = {}
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local TextService = game:GetService("TextService")
local CoreGui = game:GetService("CoreGui")
local Player = Players.LocalPlayer
local Mouse = Player:GetMouse()

-- Configuration
AppleLib.Settings = {
    Theme = {
        Primary = Color3.fromRGB(0, 122, 255),
        Secondary = Color3.fromRGB(30, 30, 30),
        Background = Color3.fromRGB(25, 25, 25),
        Text = Color3.fromRGB(255, 255, 255),
        SubText = Color3.fromRGB(180, 180, 180),
        Success = Color3.fromRGB(50, 205, 50),
        Warning = Color3.fromRGB(255, 165, 0),
        Error = Color3.fromRGB(255, 0, 0)
    },
    Font = Enum.Font.GothamSemibold,
    FontSize = Enum.FontSize.Size14,
    Sounds = {
        Click = {ID = "rbxassetid://6895079853", Volume = 0.5},
        Hover = {ID = "rbxassetid://6895079733", Volume = 0.25},
        Success = {ID = "rbxassetid://6895079727", Volume = 0.5},
        Error = {ID = "rbxassetid://6895079966", Volume = 0.5}
    },
    Animation = {
        TweenTime = 0.25,
        EasingStyle = Enum.EasingStyle.Quart,
        EasingDirection = Enum.EasingDirection.Out
    }
}

-- Utility functions
local Utility = {}

function Utility:Create(instanceType, properties, children)
    local instance = Instance.new(instanceType)
    
    for property, value in pairs(properties or {}) do
        instance[property] = value
    end
    
    for _, child in pairs(children or {}) do
        child.Parent = instance
    end
    
    return instance
end

function Utility:Tween(instance, properties, duration, easingStyle, easingDirection)
    local tween = TweenService:Create(
        instance,
        TweenInfo.new(
            duration or AppleLib.Settings.Animation.TweenTime,
            easingStyle or AppleLib.Settings.Animation.EasingStyle,
            easingDirection or AppleLib.Settings.Animation.EasingDirection
        ),
        properties
    )
    tween:Play()
    return tween
end

function Utility:Ripple(instance, oldColor, newColor)
    local ripple = self:Create("Frame", {
        Name = "Ripple",
        Size = UDim2.new(0, 0, 0, 0),
        Position = UDim2.new(0.5, 0, 0.5, 0),
        BorderSizePixel = 0,
        BackgroundColor3 = newColor or Color3.fromRGB(255, 255, 255),
        BackgroundTransparency = 0.7,
        AnchorPoint = Vector2.new(0.5, 0.5),
        Parent = instance,
        ZIndex = instance.ZIndex + 1
    })
    
    local corner = self:Create("UICorner", {
        CornerRadius = UDim.new(1, 0),
        Parent = ripple
    })
    
    local maxSize = math.max(instance.AbsoluteSize.X, instance.AbsoluteSize.Y) * 1.5
    
    Utility:Tween(ripple, {Size = UDim2.new(0, maxSize, 0, maxSize)}, 0.5)
    Utility:Tween(ripple, {BackgroundTransparency = 1}, 0.5)
    
    task.delay(0.5, function()
        ripple:Destroy()
    end)
    
    return ripple
end

function Utility:PlaySound(soundType)
    local sound = Instance.new("Sound")
    sound.SoundId = AppleLib.Settings.Sounds[soundType].ID
    sound.Volume = AppleLib.Settings.Sounds[soundType].Volume
    sound.Parent = CoreGui
    sound:Play()
    
    sound.Ended:Connect(function()
        sound:Destroy()
    end)
end

function Utility:CreateShadow(instance, elevation)
    elevation = elevation or 1
    local shadow = self:Create("ImageLabel", {
        Name = "Shadow",
        Size = UDim2.new(1, 18, 1, 18),
        Position = UDim2.new(0.5, 0, 0.5, 0),
        AnchorPoint = Vector2.new(0.5, 0.5),
        BackgroundTransparency = 1,
        Image = "rbxassetid://5554236805",
        ImageColor3 = Color3.fromRGB(0, 0, 0),
        ImageTransparency = 0.8 - (0.1 * elevation),
        ScaleType = Enum.ScaleType.Slice,
        SliceCenter = Rect.new(23, 23, 277, 277),
        SliceScale = 1,
        ZIndex = instance.ZIndex - 1,
        Parent = instance
    })
    return shadow
end

function Utility:Drag(instance, dragElement)
    local dragging = false
    local dragInput
    local dragStart
    local startPos
    
    local function update(input)
        local delta = input.Position - dragStart
        instance.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
    
    dragElement.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = instance.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    
    dragElement.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            update(input)
        end
    end)
end

-- Create Main GUI elements
function AppleLib:CreateWindow(title, theme)
    -- Apply custom theme if provided
    if theme then
        for key, value in pairs(theme) do
            self.Settings.Theme[key] = value
        end
    end
    
    -- Create main GUI container
    local AppleGui = Utility:Create("ScreenGui", {
        Name = "AppleGui",
        IgnoreGuiInset = true,
        ResetOnSpawn = false,
        ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    })
    
    -- Handle protection for exploit environments
    if syn and syn.protect_gui then
        syn.protect_gui(AppleGui)
        AppleGui.Parent = CoreGui
    elseif gethui then
        AppleGui.Parent = gethui()
    else
        AppleGui.Parent = CoreGui
    end
    
    -- Create main window frame
    local Window = Utility:Create("Frame", {
        Name = "Window",
        Size = UDim2.new(0, 600, 0, 400),
        Position = UDim2.new(0.5, 0, 0.5, 0),
        AnchorPoint = Vector2.new(0.5, 0.5),
        BackgroundColor3 = self.Settings.Theme.Background,
        BorderSizePixel = 0,
        Parent = AppleGui
    })
    
    -- Create window elements
    local windowCorner = Utility:Create("UICorner", {
        CornerRadius = UDim.new(0, 8),
        Parent = Window
    })
    
    local topBar = Utility:Create("Frame", {
        Name = "TopBar",
        Size = UDim2.new(1, 0, 0, 40),
        Position = UDim2.new(0, 0, 0, 0),
        BackgroundColor3 = self.Settings.Theme.Secondary,
        BorderSizePixel = 0,
        ZIndex = 2,
        Parent = Window
    })
    
    local topBarCorner = Utility:Create("UICorner", {
        CornerRadius = UDim.new(0, 8),
        Parent = topBar
    })
    
    local topBarFix = Utility:Create("Frame", {
        Name = "TopBarFix",
        Size = UDim2.new(1, 0, 0, 10),
        Position = UDim2.new(0, 0, 1, -10),
        BackgroundColor3 = self.Settings.Theme.Secondary,
        BorderSizePixel = 0,
        ZIndex = 2,
        Parent = topBar
    })
    
    local titleLabel = Utility:Create("TextLabel", {
        Name = "Title",
        Size = UDim2.new(1, -40, 1, 0),
        Position = UDim2.new(0, 20, 0, 0),
        BackgroundTransparency = 1,
        Text = title or "Apple UI Library",
        Font = self.Settings.Font,
        TextSize = 18,
        TextColor3 = self.Settings.Theme.Text,
        TextXAlignment = Enum.TextXAlignment.Left,
        TextYAlignment = Enum.TextYAlignment.Center,
        ZIndex = 2,
        Parent = topBar
    })
    
    -- Create close button
    local closeButton = Utility:Create("TextButton", {
        Name = "CloseButton",
        Size = UDim2.new(0, 28, 0, 28),
        Position = UDim2.new(1, -35, 0, 6),
        BackgroundColor3 = Color3.fromRGB(255, 70, 70),
        Text = "",
        AutoButtonColor = false,
        ZIndex = 2,
        Parent = topBar
    })
    
    local closeButtonCorner = Utility:Create("UICorner", {
        CornerRadius = UDim.new(1, 0),
        Parent = closeButton
    })
    
    -- Shadow effect for the main window
    Utility:CreateShadow(Window, 3)
    
    -- Create content container
    local contentContainer = Utility:Create("Frame", {
        Name = "ContentContainer",
        Size = UDim2.new(1, 0, 1, -50),
        Position = UDim2.new(0, 0, 0, 45),
        BackgroundTransparency = 1,
        BackgroundColor3 = self.Settings.Theme.Background,
        BorderSizePixel = 0,
        ClipsDescendants = true,
        Parent = Window
    })
    
    -- Create sidebar
    local sidebar = Utility:Create("Frame", {
        Name = "Sidebar",
        Size = UDim2.new(0, 150, 1, 0),
        Position = UDim2.new(0, 0, 0, 0),
        BackgroundColor3 = self.Settings.Theme.Secondary,
        BorderSizePixel = 0,
        ZIndex = 2,
        Parent = contentContainer
    })
    
    local sidebarCorner = Utility:Create("UICorner", {
        CornerRadius = UDim.new(0, 8),
        Parent = sidebar
    })
    
    local sidebarFix = Utility:Create("Frame", {
        Name = "SidebarFix",
        Size = UDim2.new(0, 10, 1, 0),
        Position = UDim2.new(1, -10, 0, 0),
        BackgroundColor3 = self.Settings.Theme.Secondary,
        BorderSizePixel = 0,
        ZIndex = 2,
        Parent = sidebar
    })
    
    local tabsContainer = Utility:Create("ScrollingFrame", {
        Name = "TabsContainer",
        Size = UDim2.new(1, 0, 1, 0),
        Position = UDim2.new(0, 0, 0, 0),
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        ScrollBarThickness = 0,
        ZIndex = 2,
        CanvasSize = UDim2.new(0, 0, 0, 0),
        ScrollingDirection = Enum.ScrollingDirection.Y,
        AutomaticCanvasSize = Enum.AutomaticSize.Y,
        Parent = sidebar
    })
    
    local tabsListLayout = Utility:Create("UIListLayout", {
        Padding = UDim.new(0, 5),
        FillDirection = Enum.FillDirection.Vertical,
        HorizontalAlignment = Enum.HorizontalAlignment.Center,
        SortOrder = Enum.SortOrder.LayoutOrder,
        Parent = tabsContainer
    })
    
    local tabsPadding = Utility:Create("UIPadding", {
        PaddingTop = UDim.new(0, 10),
        PaddingBottom = UDim.new(0, 10),
        Parent = tabsContainer
    })
    
    -- Create tab content container
    local tabContentContainer = Utility:Create("Frame", {
        Name = "TabContentContainer",
        Size = UDim2.new(1, -160, 1, -10),
        Position = UDim2.new(0, 155, 0, 5),
        BackgroundTransparency = 1,
        ClipsDescendants = true,
        Parent = contentContainer
    })

    -- Enable dragging on the top bar
    Utility:Drag(Window, topBar)
    
    -- Handle close button functionality
    closeButton.MouseEnter:Connect(function()
        Utility:Tween(closeButton, {BackgroundColor3 = Color3.fromRGB(255, 100, 100)}, 0.2)
    end)
    
    closeButton.MouseLeave:Connect(function()
        Utility:Tween(closeButton, {BackgroundColor3 = Color3.fromRGB(255, 70, 70)}, 0.2)
    end)
    
    closeButton.MouseButton1Click:Connect(function()
        Utility:PlaySound("Click")
        Utility:Tween(AppleGui, {Transparency = 1}, 0.5)
        task.wait(0.5)
        AppleGui:Destroy()
    end)

    -- Window object and methods
    local WindowObj = {}
    WindowObj.Gui = AppleGui
    WindowObj.Container = Window
    WindowObj.Tabs = {}
    WindowObj.ActiveTab = nil

    -- Create new tab
    function WindowObj:CreateTab(name, icon)
        local tabId = name:gsub(" ", "")
        
        -- Create tab button
        local tabButton = Utility:Create("TextButton", {
            Name = tabId .. "Button",
            Size = UDim2.new(0.9, 0, 0, 34),
            BackgroundColor3 = self.ActiveTab == tabId and self.Settings.Theme.Primary or self.Settings.Theme.Secondary,
            BorderSizePixel = 0,
            AutoButtonColor = false,
            Text = "",
            ZIndex = 2,
            Parent = tabsContainer
        })
        
        local tabButtonCorner = Utility:Create("UICorner", {
            CornerRadius = UDim.new(0, 6),
            Parent = tabButton
        })
        
        local tabIcon
        if icon then
            tabIcon = Utility:Create("ImageLabel", {
                Name = "Icon",
                Size = UDim2.new(0, 20, 0, 20),
                Position = UDim2.new(0, 10, 0.5, 0),
                AnchorPoint = Vector2.new(0, 0.5),
                BackgroundTransparency = 1,
                Image = icon,
                ImageColor3 = self.ActiveTab == tabId and AppleLib.Settings.Theme.Text or AppleLib.Settings.Theme.SubText,
                ZIndex = 2,
                Parent = tabButton
            })
        end
        
        local namePositionX = icon and 40 or 15
        local tabName = Utility:Create("TextLabel", {
            Name = "Title",
            Size = UDim2.new(1, -(namePositionX + 10), 1, 0),
            Position = UDim2.new(0, namePositionX, 0, 0),
            BackgroundTransparency = 1,
            Text = name,
            Font = AppleLib.Settings.Font,
            TextSize = 14,
            TextColor3 = self.ActiveTab == tabId and AppleLib.Settings.Theme.Text or AppleLib.Settings.Theme.SubText,
            TextXAlignment = Enum.TextXAlignment.Left,
            ZIndex = 2,
            Parent = tabButton
        })
        
        -- Create content frame for the tab
        local tabContent = Utility:Create("ScrollingFrame", {
            Name = tabId .. "Content",
            Size = UDim2.new(1, 0, 1, 0),
            BackgroundTransparency = 1,
            BorderSizePixel = 0,
            ScrollBarThickness = 4,
            ScrollBarImageColor3 = AppleLib.Settings.Theme.Primary,
            CanvasSize = UDim2.new(0, 0, 0, 0),
            AutomaticCanvasSize = Enum.AutomaticSize.Y,
            Visible = self.ActiveTab == tabId,
            Parent = tabContentContainer
        })
        
        local contentListLayout = Utility:Create("UIListLayout", {
            Padding = UDim.new(0, 10),
            FillDirection = Enum.FillDirection.Vertical,
            HorizontalAlignment = Enum.HorizontalAlignment.Center,
            SortOrder = Enum.SortOrder.LayoutOrder,
            Parent = tabContent
        })
        
        local contentPadding = Utility:Create("UIPadding", {
            PaddingTop = UDim.new(0, 10),
            PaddingBottom = UDim.new(0, 10),
            PaddingLeft = UDim.new(0, 10),
            PaddingRight = UDim.new(0, 10),
            Parent = tabContent
        })
        
        -- Tab button hover effect
        tabButton.MouseEnter:Connect(function()
            if self.ActiveTab ~= tabId then
                Utility:Tween(tabButton, {BackgroundColor3 = AppleLib.Settings.Theme.Secondary:Lerp(AppleLib.Settings.Theme.Primary, 0.3)}, 0.2)
                Utility:PlaySound("Hover")
            end
        end)
        
        tabButton.MouseLeave:Connect(function()
            if self.ActiveTab ~= tabId then
                Utility:Tween(tabButton, {BackgroundColor3 = AppleLib.Settings.Theme.Secondary}, 0.2)
            end
        end)
        
        -- Tab button click handler
        tabButton.MouseButton1Click:Connect(function()
            Utility:PlaySound("Click")
            self:SelectTab(tabId)
        end)
        
        -- Tab object
        local TabObj = {}
        TabObj.Name = name
        TabObj.Button = tabButton
        TabObj.Content = tabContent
        
        -- If no active tab yet, set this as active
        if not self.ActiveTab then
            self.ActiveTab = tabId
            tabContent.Visible = true
        else
            tabContent.Visible = false
        end
        
        -- Store tab data
        self.Tabs[tabId] = TabObj
        
        -- Tab element creation functions
        function TabObj:CreateSection(title)
            local sectionFrame = Utility:Create("Frame", {
                Name = title:gsub(" ", "") .. "Section",
                Size = UDim2.new(1, 0, 0, 36),
                BackgroundTransparency = 1,
                Parent = tabContent,
                LayoutOrder = #tabContent:GetChildren()
            })
            
            local sectionTitle = Utility:Create("TextLabel", {
                Name = "Title",
                Size = UDim2.new(1, 0, 0, 26),
                BackgroundTransparency = 1,
                Text = title,
                Font = Enum.Font.GothamBold,
                TextSize = 14,
                TextColor3 = AppleLib.Settings.Theme.Primary,
                TextXAlignment = Enum.TextXAlignment.Left,
                Parent = sectionFrame
            })
            
            local sectionDivider = Utility:Create("Frame", {
                Name = "Divider",
                Size = UDim2.new(1, 0, 0, 1),
                Position = UDim2.new(0, 0, 0, 30),
                BackgroundColor3 = AppleLib.Settings.Theme.Primary,
                BorderSizePixel = 0,
                Transparency = 0.7,
                Parent = sectionFrame
            })
            
            -- Auto-adjust section size
            sectionFrame:GetPropertyChangedSignal("AbsoluteSize"):Connect(function()
                sectionFrame.Size = UDim2.new(1, 0, 0, sectionFrame.AbsoluteSize.Y)
            end)
            
            return sectionTitle
        end
        
        function TabObj:CreateButton(text, callback)
            callback = callback or function() end
            
            local buttonFrame = Utility:Create("Frame", {
                Name = text:gsub(" ", "") .. "ButtonFrame",
                Size = UDim2.new(1, 0, 0, 38),
                BackgroundTransparency = 1,
                Parent = tabContent,
                LayoutOrder = #tabContent:GetChildren()
            })
            
            local button = Utility:Create("TextButton", {
                Name = "Button",
                Size = UDim2.new(1, 0, 1, 0),
                BackgroundColor3 = AppleLib.Settings.Theme.Secondary,
                BorderSizePixel = 0,
                Text = "",
                AutoButtonColor = false,
                ClipsDescendants = true,
                Parent = buttonFrame
            })
            
            local buttonCorner = Utility:Create("UICorner", {
                CornerRadius = UDim.new(0, 6),
                Parent = button
            })
            
            local buttonLabel = Utility:Create("TextLabel", {
                Name = "Label",
                Size = UDim2.new(1, -20, 1, 0),
                Position = UDim2.new(0, 10, 0, 0),
                BackgroundTransparency = 1,
                Text = text,
                Font = AppleLib.Settings.Font,
                TextSize = 14,
                TextColor3 = AppleLib.Settings.Theme.Text,
                TextXAlignment = Enum.TextXAlignment.Left,
                Parent = button
            })
            
            -- Shadow effect
            Utility:CreateShadow(button, 1)
            
            -- Button hover and click effects
            button.MouseEnter:Connect(function()
                Utility:Tween(button, {BackgroundColor3 = AppleLib.Settings.Theme.Secondary:Lerp(AppleLib.Settings.Theme.Primary, 0.3)}, 0.2)
                Utility:PlaySound("Hover")
            end)
            
            button.MouseLeave:Connect(function()
                Utility:Tween(button, {BackgroundColor3 = AppleLib.Settings.Theme.Secondary}, 0.2)
            end)
            
            button.MouseButton1Click:Connect(function()
                Utility:PlaySound("Click")
                Utility:Ripple(button, AppleLib.Settings.Theme.Secondary, AppleLib.Settings.Theme.Primary)
                callback()
            end)
            
            -- Button object
            local ButtonObj = {}
            ButtonObj.Instance = button
            ButtonObj.Text = text
            
            function ButtonObj:SetText(newText)
                buttonLabel.Text = newText
                self.Text = newText
            end
            
            function ButtonObj:Destroy()
                buttonFrame:Destroy()
            end
            
            return ButtonObj
        end
        
        function TabObj:CreateToggle(text, default, callback)
            default = default or false
            callback = callback or function() end
            
            local toggleFrame = Utility:Create("Frame", {
                Name = text:gsub(" ", "") .. "ToggleFrame",
                Size = UDim2.new(1, 0, 0, 38),
                BackgroundTransparency = 1,
                Parent = tabContent,
                LayoutOrder = #tabContent:GetChildren()
            })
            
            local toggleButton = Utility:Create("TextButton", {
                Name = "ToggleButton",
                Size = UDim2.new(1, 0, 1, 0),
                BackgroundColor3 = AppleLib.Settings.Theme.Secondary,
                BorderSizePixel = 0,
                Text = "",
                AutoButtonColor = false,
                ClipsDescendants = true,
                Parent = toggleFrame
            })
            
            local toggleCorner = Utility:Create("UICorner", {
                CornerRadius = UDim.new(0, 6),
                Parent = toggleButton
            })
            
            local toggleLabel = Utility:Create("TextLabel", {
                Name = "Label",
                Size = UDim2.new(1, -60, 1, 0),
                Position = UDim2.new(0, 10, 0, 0),
                BackgroundTransparency = 1,
                Text = text,
                Font = AppleLib.Settings.Font,
                TextSize = 14,
                TextColor3 = AppleLib.Settings.Theme.Text,
                TextXAlignment = Enum.TextXAlignment.Left,
                Parent = toggleButton
            })
            
            local toggleSwitch = Utility:Create("Frame", {
                Name = "Switch",
                Size = UDim2.new(0, 40, 0, 22),
                Position = UDim2.new(1, -50, 0.5, 0),
                AnchorPoint = Vector2.new(0, 0.5),
                BackgroundColor3 = default and AppleLib.Settings.Theme.Primary or Color3.fromRGB(100, 100, 100),
                BorderSizePixel = 0,
                Parent = toggleButton
            })
            
            local switchCorner = Utility:Create("UICorner", {
                CornerRadius = UDim.new(1, 0),
                Parent = toggleSwitch
            })
            
            local toggleCircle = Utility:Create("Frame", {
                Name = "Circle",
                Size = UDim2.new(0, 16, 0, 16),
                Position = UDim2.new(default and 1 or 0, default and -19 or 3, 0.5, 0),
                AnchorPoint = Vector2.new(0, 0.5),
                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                BorderSizePixel = 0,
                Parent = toggleSwitch
            })
            
            local circleCorner = Utility:Create("UICorner", {
                CornerRadius = UDim.new(1, 0),
                Parent = toggleCircle
            })
            
            -- Shadow effect
            Utility:CreateShadow(toggleButton, 1)
            
            -- Toggle state and functions
            local ToggleObj = {
                Value = default
            }
            
            function ToggleObj:Set(value)
                self.Value = value
                
                Utility:Tween(toggleSwitch, {BackgroundColor3 = value and AppleLib.Settings.Theme.Primary or Color3.fromRGB(100, 100, 100)}, 0.2)
                Utility:Tween(toggleCircle, {Position = UDim2.new(value and 1 or 0, value and -19 or 3, 0.5, 0)}, 0.2)
                
                callback(value)
            end
            
            function ToggleObj:Toggle()
                self:Set(not self.Value)
            end
            
            function ToggleObj:GetValue()
                return self.Value
            end
            
            function ToggleObj:Destroy()
                toggleFrame:Destroy()
            end
            
            -- Toggle button hover and click effects
            toggleButton.MouseEnter:Connect(function()
                Utility:Tween(toggleButton, {BackgroundColor3 = AppleLib.Settings.Theme.Secondary:Lerp(AppleLib.Settings.Theme.Primary, 0.3)}, 0.2)
                Utility:PlaySound("Hover")
            end)
            
            toggleButton.MouseLeave:Connect(function()
                Utility:Tween(toggleButton, {BackgroundColor3 = AppleLib.Settings.Theme.Secondary}, 0.2)
            end)
            
            toggleButton.MouseButton1Click:Connect(function()
                Utility:PlaySound("Click")
                Utility:Ripple(toggleButton, AppleLib.Settings.Theme.Secondary, AppleLib.Settings.Theme.Primary)
                ToggleObj:Toggle()
            end)
            
            -- Set initial state
            ToggleObj:Set(default)
            
            return ToggleObj
        end
        
        function TabObj:CreateSlider(text, min, max, default, precision, callback)
            min = min or 0
            max = max or 100
            default = default or min
            precision = precision or 0
            callback = callback or function() end
            
            -- Ensure default is within range
            default = math.clamp(default, min, max)
            
            local sliderFrame = Utility:Create("Frame", {
                Name = text:gsub(" ", "") .. "SliderFrame",
                Size = UDim2.new(1, 0, 0, 54),
                BackgroundTransparency = 1,
                Parent = tabContent,
                LayoutOrder = #tabContent:GetChildren()
            })
            
            local sliderContainer = Utility:Create("Frame", {
                Name = "SliderContainer",
                Size = UDim2.new(1, 0, 1, 0),
                BackgroundColor3 = AppleLib.Settings.Theme.Secondary,
                BorderSizePixel = 0,
                Parent = sliderFrame
            })
            
            local sliderCorner = Utility:Create("UICorner", {
                CornerRadius = UDim.new(0, 6),
                Parent = sliderContainer
            })
            
            local sliderLabel = Utility:Create("TextLabel", {
                Name = "Label",
                Size = UDim2.new(1, 0, 0, 30),
                Position = UDim2.new(0, 10, 0, 0),
                BackgroundTransparency = 1,
                Text = text,
                Font = AppleLib.Settings.Font,
                TextSize = 14,
                TextColor3 = AppleLib.Settings.Theme.Text,
                TextXAlignment = Enum.TextXAlignment.Left,
                Parent = sliderContainer
            })
            
            local valueLabel = Utility:Create("TextLabel", {
                Name = "Value",
                Size = UDim2.new(0, 50, 0, 30),
                Position = UDim2.new(1, -60, 0, 0),
                BackgroundTransparency = 1,
                Text = tostring(default),
                Font = AppleLib.Settings.Font,
                TextSize = 14,
                TextColor3 = AppleLib.Settings.Theme.SubText,
                TextXAlignment = Enum.TextXAlignment.Right,
                Parent = sliderContainer
            })
            
            local sliderBackground = Utility:Create("Frame", {
                Name = "Background",
                Size = UDim2.new(1, -20, 0, 6),
                Position = UDim2.new(0, 10, 0, 38),
                BackgroundColor3 = Color3.fromRGB(60, 60, 60),
                BorderSizePixel = 0,
                Parent = sliderContainer
            })
            
            local sliderBackCorner = Utility:Create("UICorner", {
                CornerRadius = UDim.new(1, 0),
                Parent = sliderBackground
            })
            
            local sliderFill = Utility:Create("Frame", {
                Name = "Fill",
                Size = UDim2.new((default - min) / (max - min), 0, 1, 0),
                BackgroundColor3 = AppleLib.Settings.Theme.Primary,
                BorderSizePixel = 0,
                Parent = sliderBackground
            })
            
            local sliderFillCorner = Utility:Create("UICorner", {
                CornerRadius = UDim.new(1, 0),
                Parent = sliderFill
            })
            
            local sliderThumb = Utility:Create("Frame", {
                Name = "Thumb",
                Size = UDim2.new(0, 16, 0, 16),
                Position = UDim2.new((default - min) / (max - min), 0, 0.5, 0),
                AnchorPoint = Vector2.new(0.5, 0.5),
                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                BorderSizePixel = 0,
                Parent = sliderBackground
            })
            
            local sliderThumbCorner = Utility:Create("UICorner", {
                CornerRadius = UDim.new(1, 0),
                Parent = sliderThumb
            })
            
            -- Shadow effect
            Utility:CreateShadow(sliderContainer, 1)
            
            -- Slider functionality
            local dragging = false
            
            local function updateSlider(input)
                local sizeX = math.clamp((input.Position.X - sliderBackground.AbsolutePosition.X) / sliderBackground.AbsoluteSize.X, 0, 1)
                local value = min + ((max - min) * sizeX)
                
                -- Apply precision (rounding)
                if precision == 0 then
                    value = math.floor(value)
                else
                    value = math.floor(value * (10 ^ precision)) / (10 ^ precision)
                end
                
                -- Set slider properties
                Utility:Tween(sliderFill, {Size = UDim2.new(sizeX, 0, 1, 0)}, 0.1)
                Utility:Tween(sliderThumb, {Position = UDim2.new(sizeX, 0, 0.5, 0)}, 0.1)
                
                -- Update value label
                valueLabel.Text = tostring(value)
                
                return value
            end
            
            sliderBackground.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                    dragging = true
                    local value = updateSlider(input)
                    callback(value)
                    Utility:PlaySound("Click")
                end
            end)
            
            sliderBackground.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                    dragging = false
                end
            end)
            
            UserInputService.InputChanged:Connect(function(input)
                if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
                    local value = updateSlider(input)
                    callback(value)
                end
            end)
            
            -- Slider object
            local SliderObj = {}
            SliderObj.Value = default
            
            function SliderObj:Set(value)
                value = math.clamp(value, min, max)
                self.Value = value
                
                local sizeX = (value - min) / (max - min)
                Utility:Tween(sliderFill, {Size = UDim2.new(sizeX, 0, 1, 0)}, 0.1)
                Utility:Tween(sliderThumb, {Position = UDim2.new(sizeX, 0, 0.5, 0)}, 0.1)
                
                valueLabel.Text = tostring(value)
                callback(value)
            end
            
            function SliderObj:GetValue()
                return self.Value
            end
            
            function SliderObj:Destroy()
                sliderFrame:Destroy()
            end
            
            -- Set initial value
            SliderObj:Set(default)
            
            return SliderObj
        end
        
        function TabObj:CreateDropdown(text, options, default, callback)
            options = options or {}
            default = default or options[1] or ""
            callback = callback or function() end
            
            local dropdownFrame = Utility:Create("Frame", {
                Name = text:gsub(" ", "") .. "DropdownFrame",
                Size = UDim2.new(1, 0, 0, 38),
                BackgroundTransparency = 1,
                Parent = tabContent,
                LayoutOrder = #tabContent:GetChildren()
            })
            
            local dropdownButton = Utility:Create("TextButton", {
                Name = "DropdownButton",
                Size = UDim2.new(1, 0, 1, 0),
                BackgroundColor3 = AppleLib.Settings.Theme.Secondary,
                BorderSizePixel = 0,
                Text = "",
                AutoButtonColor = false,
                ClipsDescendants = true,
                Parent = dropdownFrame
            })
            
            local dropdownCorner = Utility:Create("UICorner", {
                CornerRadius = UDim.new(0, 6),
                Parent = dropdownButton
            })
            
            local dropdownLabel = Utility:Create("TextLabel", {
                Name = "Label",
                Size = UDim2.new(1, -50, 0.5, 0),
                Position = UDim2.new(0, 10, 0, 0),
                BackgroundTransparency = 1,
                Text = text,
                Font = AppleLib.Settings.Font,
                TextSize = 14,
                TextColor3 = AppleLib.Settings.Theme.Text,
                TextXAlignment = Enum.TextXAlignment.Left,
                Parent = dropdownButton
            })
            
            local selectedLabel = Utility:Create("TextLabel", {
                Name = "Selected",
                Size = UDim2.new(1, -20, 0.5, 0),
                Position = UDim2.new(0, 10, 0.5, 0),
                BackgroundTransparency = 1,
                Text = default,
                Font = AppleLib.Settings.Font,
                TextSize = 14,
                TextColor3 = AppleLib.Settings.Theme.SubText,
                TextXAlignment = Enum.TextXAlignment.Left,
                Parent = dropdownButton
            })
            
            local dropdownIcon = Utility:Create("ImageLabel", {
                Name = "Icon",
                Size = UDim2.new(0, 20, 0, 20),
                Position = UDim2.new(1, -30, 0.5, 0),
                AnchorPoint = Vector2.new(0, 0.5),
                BackgroundTransparency = 1,
                Image = "rbxassetid://6031094670",
                ImageColor3 = AppleLib.Settings.Theme.Text,
                Rotation = 0,
                ZIndex = 2,
                Parent = dropdownButton
            })
            
            -- Shadow effect
            Utility:CreateShadow(dropdownButton, 1)
            
            -- Create dropdown container
            local dropdownContainer = Utility:Create("Frame", {
                Name = "DropdownContainer",
                Size = UDim2.new(1, 0, 0, 0),
                Position = UDim2.new(0, 0, 1, 5),
                BackgroundColor3 = AppleLib.Settings.Theme.Secondary,
                BorderSizePixel = 0,
                ClipsDescendants = true,
                Visible = false,
                ZIndex = 5,
                Parent = dropdownFrame
            })
            
            local containerCorner = Utility:Create("UICorner", {
                CornerRadius = UDim.new(0, 6),
                Parent = dropdownContainer
            })
            
            local optionsContainer = Utility:Create("ScrollingFrame", {
                Name = "OptionsContainer",
                Size = UDim2.new(1, 0, 1, 0),
                BackgroundTransparency = 1,
                BorderSizePixel = 0,
                ScrollBarThickness = 3,
                ScrollBarImageColor3 = AppleLib.Settings.Theme.Primary,
                CanvasSize = UDim2.new(0, 0, 0, 0),
                AutomaticCanvasSize = Enum.AutomaticSize.Y,
                ZIndex = 5,
                Parent = dropdownContainer
            })
            
            local optionsListLayout = Utility:Create("UIListLayout", {
                Padding = UDim.new(0, 2),
                FillDirection = Enum.FillDirection.Vertical,
                HorizontalAlignment = Enum.HorizontalAlignment.Center,
                SortOrder = Enum.SortOrder.LayoutOrder,
                Parent = optionsContainer
            })
            
            local optionsPadding = Utility:Create("UIPadding", {
                PaddingTop = UDim.new(0, 5),
                PaddingBottom = UDim.new(0, 5),
                PaddingLeft = UDim.new(0, 5),
                PaddingRight = UDim.new(0, 5),
                Parent = optionsContainer
            })
            
            -- Shadow effect for container
            Utility:CreateShadow(dropdownContainer, 2)
            
            -- Dropdown state
            local isOpen = false
            local selectedOption = default
            
            -- Populate options
            local function createOptions()
                -- Clear previous options
                for _, child in pairs(optionsContainer:GetChildren()) do
                    if child:IsA("TextButton") then
                        child:Destroy()
                    end
                end
                
                -- Add options
                for i, option in pairs(options) do
                    local optionButton = Utility:Create("TextButton", {
                        Name = "Option_" .. i,
                        Size = UDim2.new(1, 0, 0, 30),
                        BackgroundColor3 = option == selectedOption 
                            and AppleLib.Settings.Theme.Primary
                            or AppleLib.Settings.Theme.Secondary,
                        BorderSizePixel = 0,
                        Text = "",
                        AutoButtonColor = false,
                        ZIndex = 6,
                        Parent = optionsContainer
                    })
                    
                    local optionCorner = Utility:Create("UICorner", {
                        CornerRadius = UDim.new(0, 4),
                        Parent = optionButton
                    })
                    
                    local optionLabel = Utility:Create("TextLabel", {
                        Name = "Label",
                        Size = UDim2.new(1, -10, 1, 0),
                        Position = UDim2.new(0, 10, 0, 0),
                        BackgroundTransparency = 1,
                        Text = option,
                        Font = AppleLib.Settings.Font,
                        TextSize = 14,
                        TextColor3 = option == selectedOption 
                            and AppleLib.Settings.Theme.Text
                            or AppleLib.Settings.Theme.SubText,
                        TextXAlignment = Enum.TextXAlignment.Left,
                        ZIndex = 6,
                        Parent = optionButton
                    })
                    
                    -- Option hover and click effects
                    optionButton.MouseEnter:Connect(function()
                        if option ~= selectedOption then
                            Utility:Tween(optionButton, {BackgroundColor3 = AppleLib.Settings.Theme.Secondary:Lerp(AppleLib.Settings.Theme.Primary, 0.3)}, 0.2)
                            Utility:PlaySound("Hover")
                        end
                    end)
                    
                    optionButton.MouseLeave:Connect(function()
                        if option ~= selectedOption then
                            Utility:Tween(optionButton, {BackgroundColor3 = AppleLib.Settings.Theme.Secondary}, 0.2)
                        end
                    end)
                    
                    optionButton.MouseButton1Click:Connect(function()
                        Utility:PlaySound("Click")
                        Utility:Ripple(optionButton)
                        selectedOption = option
                        selectedLabel.Text = option
                        
                        -- Close dropdown
                        isOpen = false
                        Utility:Tween(dropdownIcon, {Rotation = 0}, 0.2)
                        Utility:Tween(dropdownContainer, {Size = UDim2.new(1, 0, 0, 0)}, 0.2)
                        task.delay(0.2, function()
                            dropdownContainer.Visible = false
                        end)
                        
                        -- Recreate options to update selected
                        createOptions()
                        
                        -- Call callback with selected option
                        callback(option)
                    end)
                end
            end
            
            -- Initial creation of options
            createOptions()
            
            -- Calculate dropdown height based on options
            local function calculateDropdownHeight()
                local optionCount = math.min(#options, 5) -- Show max 5 options at once
                local maxHeight = optionCount * 32 + 10 -- Option height + padding
                return maxHeight
            end
            
            -- Button hover and click effects
            dropdownButton.MouseEnter:Connect(function()
                Utility:Tween(dropdownButton, {BackgroundColor3 = AppleLib.Settings.Theme.Secondary:Lerp(AppleLib.Settings.Theme.Primary, 0.3)}, 0.2)
                Utility:PlaySound("Hover")
            end)
            
            dropdownButton.MouseLeave:Connect(function()
                Utility:Tween(dropdownButton, {BackgroundColor3 = AppleLib.Settings.Theme.Secondary}, 0.2)
            end)
            
            dropdownButton.MouseButton1Click:Connect(function()
                Utility:PlaySound("Click")
                Utility:Ripple(dropdownButton)
                
                -- Toggle dropdown
                isOpen = not isOpen
                
                if isOpen then
                    dropdownContainer.Visible = true
                    Utility:Tween(dropdownIcon, {Rotation = 180}, 0.2)
                    Utility:Tween(dropdownContainer, {Size = UDim2.new(1, 0, 0, calculateDropdownHeight())}, 0.2)
                else
                    Utility:Tween(dropdownIcon, {Rotation = 0}, 0.2)
                    Utility:Tween(dropdownContainer, {Size = UDim2.new(1, 0, 0, 0)}, 0.2)
                    task.delay(0.2, function()
                        dropdownContainer.Visible = false
                    end)
                end
            end)
            
            -- Close dropdown when clicking outside
            UserInputService.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                    local mousePosition = UserInputService:GetMouseLocation()
                    if isOpen and not dropdownButton.AbsolutePosition.X < mousePosition.X and mousePosition.X < dropdownButton.AbsolutePosition.X + dropdownButton.AbsoluteSize.X and dropdownButton.AbsolutePosition.Y < mousePosition.Y and mousePosition.Y < dropdownButton.AbsolutePosition.Y + dropdownButton.AbsoluteSize.Y then
                        isOpen = false
                        Utility:Tween(dropdownIcon, {Rotation = 0}, 0.2)
                        Utility:Tween(dropdownContainer, {Size = UDim2.new(1, 0, 0, 0)}, 0.2)
                        task.delay(0.2, function()
                            dropdownContainer.Visible = false
                        end)
                    end
                end
            end)
            
            -- Dropdown object
            local DropdownObj = {}
            DropdownObj.Value = selectedOption
            DropdownObj.Options = options
            
            function DropdownObj:SetValue(value)
                if table.find(self.Options, value) then
                    selectedOption = value
                    selectedLabel.Text = value
                    self.Value = value
                    
                    -- Update option buttons
                    createOptions()
                    
                    -- Call callback
                    callback(value)
                end
            end
            
            function DropdownObj:GetValue()
                return self.Value
            end
            
            function DropdownObj:SetOptions(newOptions, keepSelected)
                self.Options = newOptions
                
                if not keepSelected or not table.find(newOptions, selectedOption) then
                    selectedOption = newOptions[1] or ""
                    selectedLabel.Text = selectedOption
                    self.Value = selectedOption
                end
                
                -- Recreate options
                createOptions()
            end
            
            function DropdownObj:Destroy()
                dropdownFrame:Destroy()
            end
            
            return DropdownObj
        end
        
        function TabObj:CreateTextbox(text, placeholderText, defaultText, clearOnFocus, callback)
            placeholderText = placeholderText or "Enter text..."
            defaultText = defaultText or ""
            clearOnFocus = clearOnFocus or false
            callback = callback or function() end
            
            local textboxFrame = Utility:Create("Frame", {
                Name = text:gsub(" ", "") .. "TextboxFrame",
                Size = UDim2.new(1, 0, 0, 70),
                BackgroundTransparency = 1,
                Parent = tabContent,
                LayoutOrder = #tabContent:GetChildren()
            })
            
            local textboxContainer = Utility:Create("Frame", {
                Name = "TextboxContainer",
                Size = UDim2.new(1, 0, 1, 0),
                BackgroundColor3 = AppleLib.Settings.Theme.Secondary,
                BorderSizePixel = 0,
                Parent = textboxFrame
            })
            
            local textboxCorner = Utility:Create("UICorner", {
                CornerRadius = UDim.new(0, 6),
                Parent = textboxContainer
            })
            
            local textboxLabel = Utility:Create("TextLabel", {
                Name = "Label",
                Size = UDim2.new(1, -20, 0, 30),
                Position = UDim2.new(0, 10, 0, 0),
                BackgroundTransparency = 1,
                Text = text,
                Font = AppleLib.Settings.Font,
                TextSize = 14,
                TextColor3 = AppleLib.Settings.Theme.Text,
                TextXAlignment = Enum.TextXAlignment.Left,
                Parent = textboxContainer
            })
            
            local textbox = Utility:Create("TextBox", {
                Name = "Textbox",
                Size = UDim2.new(1, -20, 0, 30),
                Position = UDim2.new(0, 10, 0, 35),
                BackgroundColor3 = AppleLib.Settings.Theme.Background,
                BorderSizePixel = 0,
                Text = defaultText,
                PlaceholderText = placeholderText,
                ClearTextOnFocus = clearOnFocus,
                Font = AppleLib.Settings.Font,
                TextSize = 14,
                TextColor3 = AppleLib.Settings.Theme.Text,
                PlaceholderColor3 = AppleLib.Settings.Theme.SubText,
                TextXAlignment = Enum.TextXAlignment.Left,
                Parent = textboxContainer
            })
            
            local textboxInputCorner = Utility:Create("UICorner", {
                CornerRadius = UDim.new(0, 4),
                Parent = textbox
            })
            
            -- Shadow effect
            Utility:CreateShadow(textboxContainer, 1)
            
            -- Add padding to textbox
            local textboxPadding = Utility:Create("UIPadding", {
                PaddingTop = UDim.new(0, 5),
                PaddingBottom = UDim.new(0, 5),
                PaddingLeft = UDim.new(0, 5),
                PaddingRight = UDim.new(0, 5),
                Parent = textbox
            })
            
            -- Handling focus
            textbox.Focused:Connect(function()
                Utility:Tween(textbox, {BackgroundColor3 = AppleLib.Settings.Theme.Background:Lerp(AppleLib.Settings.Theme.Primary, 0.1)}, 0.2)
                Utility:PlaySound("Click")
            end)
            
            textbox.FocusLost:Connect(function(enterPressed)
                Utility:Tween(textbox, {BackgroundColor3 = AppleLib.Settings.Theme.Background}, 0.2)
                callback(textbox.Text, enterPressed)
            end)
            
            -- Textbox object
            local TextboxObj = {}
            TextboxObj.Value = defaultText
            
            function TextboxObj:GetText()
                return textbox.Text
            end
            
            function TextboxObj:SetText(newText)
                textbox.Text = newText
                self.Value = newText
            end
            
            function TextboxObj:Destroy()
                textboxFrame:Destroy()
            end
            
            return TextboxObj
        end
        
        function TabObj:CreateColorPicker(text, defaultColor, callback)
            defaultColor = defaultColor or Color3.fromRGB(255, 255, 255)
            callback = callback or function() end
            
            local colorPickerFrame = Utility:Create("Frame", {
                Name = text:gsub(" ", "") .. "ColorPickerFrame",
                Size = UDim2.new(1, 0, 0, 38),
                BackgroundTransparency = 1,
                Parent = tabContent,
                LayoutOrder = #tabContent:GetChildren()
            })
            
            local colorPickerButton = Utility:Create("TextButton", {
                Name = "ColorPickerButton",
                Size = UDim2.new(1, 0, 1, 0),
                BackgroundColor3 = AppleLib.Settings.Theme.Secondary,
                BorderSizePixel = 0,
                Text = "",
                AutoButtonColor = false,
                ClipsDescendants = true,
                Parent = colorPickerFrame
            })
            
            local colorPickerCorner = Utility:Create("UICorner", {
                CornerRadius = UDim.new(0, 6),
                Parent = colorPickerButton
            })
            
            local colorPickerLabel = Utility:Create("TextLabel", {
                Name = "Label",
                Size = UDim2.new(1, -60, 1, 0),
                Position = UDim2.new(0, 10, 0, 0),
                BackgroundTransparency = 1,
                Text = text,
                Font = AppleLib.Settings.Font,
                TextSize = 14,
                TextColor3 = AppleLib.Settings.Theme.Text,
                TextXAlignment = Enum.TextXAlignment.Left,
                Parent = colorPickerButton
            })
            
            local colorDisplay = Utility:Create("Frame", {
                Name = "ColorDisplay",
                Size = UDim2.new(0, 30, 0, 20),
                Position = UDim2.new(1, -45, 0.5, 0),
                AnchorPoint = Vector2.new(0, 0.5),
                BackgroundColor3 = defaultColor,
                BorderSizePixel = 0,
                Parent = colorPickerButton
            })
            
            local colorDisplayCorner = Utility:Create("UICorner", {
                CornerRadius = UDim.new(0, 4),
                Parent = colorDisplay
            })
            
            -- Shadow effect
            Utility:CreateShadow(colorPickerButton, 1)
            
            -- Color picker panel
            local colorPickerPanel = Utility:Create("Frame", {
                Name = "ColorPickerPanel",
                Size = UDim2.new(0, 230, 0, 260),
                Position = UDim2.new(1, -240, 1, 10),
                BackgroundColor3 = AppleLib.Settings.Theme.Secondary,
                BorderSizePixel = 0,
                Visible = false,
                ZIndex = 10,
                Parent = colorPickerFrame
            })
            
            local colorPickerPanelCorner = Utility:Create("UICorner", {
                CornerRadius = UDim.new(0, 6),
                Parent = colorPickerPanel
            })
            
            local panelTitle = Utility:Create("TextLabel", {
                Name = "Title",
                Size = UDim2.new(1, 0, 0, 30),
                Position = UDim2.new(0, 0, 0, 0),
                BackgroundTransparency = 1,
                Text = "Color Picker",
                Font = AppleLib.Settings.Font,
                TextSize = 16,
                TextColor3 = AppleLib.Settings.Theme.Text,
                ZIndex = 10,
                Parent = colorPickerPanel
            })
            
            -- Create color saturation picker
            local saturationPicker = Utility:Create("ImageButton", {
                Name = "SaturationPicker",
                Size = UDim2.new(1, -20, 0, 150),
                Position = UDim2.new(0, 10, 0, 40),
                BackgroundColor3 = Color3.fromRGB(255, 0, 0),
                BorderSizePixel = 0,
                Image = "rbxassetid://3641079629",
                ZIndex = 10,
                Parent = colorPickerPanel
            })
            
            local saturationPickerCorner = Utility:Create("UICorner", {
                CornerRadius = UDim.new(0, 4),
                Parent = saturationPicker
            })
            
            local saturationCursor = Utility:Create("Frame", {
                Name = "Cursor",
                Size = UDim2.new(0, 10, 0, 10),
                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                BorderSizePixel = 0,
                AnchorPoint = Vector2.new(0.5, 0.5),
                ZIndex = 11,
                Parent = saturationPicker
            })
            
            local saturationCursorCorner = Utility:Create("UICorner", {
                CornerRadius = UDim.new(1, 0),
                Parent = saturationCursor
            })
            
            -- Create hue slider
            local hueSlider = Utility:Create("ImageButton", {
                Name = "HueSlider",
                Size = UDim2.new(1, -20, 0, 20),
                Position = UDim2.new(0, 10, 0, 200),
                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                BorderSizePixel = 0,
                Image = "rbxassetid://3641079629",
                ScaleType = Enum.ScaleType.Crop,
                ZIndex = 10,
                Parent = colorPickerPanel
            })
            
            local hueSliderCorner = Utility:Create("UICorner", {
                CornerRadius = UDim.new(0, 4),
                Parent = hueSlider
            })
            
            local hueSliderGradient = Utility:Create("UIGradient", {
                Color = ColorSequence.new({
                    ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 0, 0)),
                    ColorSequenceKeypoint.new(0.167, Color3.fromRGB(255, 255, 0)),
                    ColorSequenceKeypoint.new(0.333, Color3.fromRGB(0, 255, 0)),
                    ColorSequenceKeypoint.new(0.5, Color3.fromRGB(0, 255, 255)),
                    ColorSequenceKeypoint.new(0.667, Color3.fromRGB(0, 0, 255)),
                    ColorSequenceKeypoint.new(0.833, Color3.fromRGB(255, 0, 255)),
                    ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 0, 0))
                }),
                Parent = hueSlider
            })
            
            local hueCursor = Utility:Create("Frame", {
                Name = "Cursor",
                Size = UDim2.new(0, 5, 1, 0),
                BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                BorderSizePixel = 0,
                ZIndex = 11,
                Parent = hueSlider
            })
            
            -- Create RGB input
            local rgbInputFrame = Utility:Create("Frame", {
                Name = "RGBInput",
                Size = UDim2.new(1, -20, 0, 25),
                Position = UDim2.new(0, 10, 0, 230),
                BackgroundTransparency = 1,
                ZIndex = 10,
                Parent = colorPickerPanel
            })
            
            -- Shadow for panel
            Utility:CreateShadow(colorPickerPanel, 2)
            
            -- Color picker state
            local isOpen = false
            local currentColor = defaultColor
            local hue, saturation, value = 0, 0, 1
            
            -- Convert RGB to HSV
            local function rgbToHsv(r, g, b)
                r, g, b = r / 255, g / 255, b / 255
                local max, min = math.max(r, g, b), math.min(r, g, b)
                local h, s, v
                v = max
                
                local d = max - min
                if max == 0 then
                    s = 0
                else
                    s = d / max
                end
                
                if max == min then
                    h = 0
                else
                    if max == r then
                        h = (g - b) / d
                        if g < b then
                            h = h + 6
                        end
                    elseif max == g then
                        h = (b - r) / d + 2
                    elseif max == b then
                        h = (r - g) / d + 4
                    end
                    h = h / 6
                end
                
                return h, s, v
            end
            
            -- Convert HSV to RGB
            local function hsvToRgb(h, s, v)
                local r, g, b
                
                local i = math.floor(h * 6)
                local f = h * 6 - i
                local p = v * (1 - s)
                local q = v * (1 - f * s)
                local t = v * (1 - (1 - f) * s)
                
                i = i % 6
                
                if i == 0 then
                    r, g, b = v, t, p
                elseif i == 1 then
                    r, g, b = q, v, p
                elseif i == 2 then
                    r, g, b = p, v, t
                elseif i == 3 then
                    r, g, b = p, q, v
                elseif i == 4 then
                    r, g, b = t, p, v
                elseif i == 5 then
                    r, g, b = v, p, q
                end
                
                return Color3.fromRGB(r * 255, g * 255, b * 255)
            end
            
            -- Update saturation picker background based on hue
            local function updateSaturationBackground()
                saturationPicker.BackgroundColor3 = hsvToRgb(hue, 1, 1)
            end
            
            -- Update cursors and display based on HSV
            local function updateDisplay()
                -- Update color display
                colorDisplay.BackgroundColor3 = currentColor
                
                -- Update saturation cursor position
                saturationCursor.Position = UDim2.new(saturation, 0, 1 - value, 0)
                
                -- Update hue cursor position
                hueCursor.Position = UDim2.new(hue, 0, 0, 0)
                
                -- Update saturation picker background
                updateSaturationBackground()
            end
            
            -- Initialize color picker from default color
            local function initializeColorPicker()
                local r, g, b = defaultColor.R, defaultColor.G, defaultColor.B
                hue, saturation, value = rgbToHsv(r * 255, g * 255, b * 255)
                updateDisplay()
            end
            
            -- Handle saturation picker input
            saturationPicker.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                    local absolutePosition = saturationPicker.AbsolutePosition
                    local absoluteSize = saturationPicker.AbsoluteSize
                    
                    local function updateSaturation(inputPosition)
                        local relativeX = math.clamp((inputPosition.X - absolutePosition.X) / absoluteSize.X, 0, 1)
                        local relativeY = math.clamp((inputPosition.Y - absolutePosition.Y) / absoluteSize.Y, 0, 1)
                        
                        saturation = relativeX
                        value = 1 - relativeY
                        
                        currentColor = hsvToRgb(hue, saturation, value)
                        updateDisplay()
                        callback(currentColor)
                    end
                    
                    updateSaturation(input.Position)
                    
                    local connection
                    connection = RunService.RenderStepped:Connect(function()
                        if UserInputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton1) then
                            updateSaturation(UserInputService:GetMouseLocation())
                        else
                            connection:Disconnect()
                        end
                    end)
                end
            end)
            
            -- Handle hue slider input
            hueSlider.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                    local absolutePosition = hueSlider.AbsolutePosition
                    local absoluteSize = hueSlider.AbsoluteSize
                    
                    local function updateHue(inputPosition)
                        local relativeX = math.clamp((inputPosition.X - absolutePosition.X) / absoluteSize.X, 0, 1)
                        
                        hue = relativeX
                        
                        currentColor = hsvToRgb(hue, saturation, value)
                        updateDisplay()
                        callback(currentColor)
                    end
                    
                    updateHue(input.Position)
                    
                    local connection
                    connection = RunService.RenderStepped:Connect(function()
                        if UserInputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton1) then
                            updateHue(UserInputService:GetMouseLocation())
                        else
                            connection:Disconnect()
                        end
                    end)
                end
            end)
            
            -- Button hover and click effects
            colorPickerButton.MouseEnter:Connect(function()
                Utility:Tween(colorPickerButton, {BackgroundColor3 = AppleLib.Settings.Theme.Secondary:Lerp(AppleLib.Settings.Theme.Primary, 0.3)}, 0.2)
                Utility:PlaySound("Hover")
            end)
            
            colorPickerButton.MouseLeave:Connect(function()
                Utility:Tween(colorPickerButton, {BackgroundColor3 = AppleLib.Settings.Theme.Secondary}, 0.2)
            end)
            
            colorPickerButton.MouseButton1Click:Connect(function()
                Utility:PlaySound("Click")
                Utility:Ripple(colorPickerButton)
                
                -- Toggle color picker panel
                isOpen = not isOpen
                colorPickerPanel.Visible = isOpen
            end)
            
            -- Close panel when clicking outside
            UserInputService.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                    if isOpen and not colorPickerPanel.AbsolutePosition.X < input.Position.X and input.Position.X < colorPickerPanel.AbsolutePosition.X + colorPickerPanel.AbsoluteSize.X and colorPickerPanel.AbsolutePosition.Y < input.Position.Y and input.Position.Y < colorPickerPanel.AbsolutePosition.Y + colorPickerPanel.AbsoluteSize.Y then
                        isOpen = false
                        colorPickerPanel.Visible = false
                    end
                end
            end)
            
            -- Initialize
            initializeColorPicker()
            
            -- Color picker object
            local ColorPickerObj = {}
            ColorPickerObj.Color = currentColor
            
            function ColorPickerObj:SetColor(color)
                currentColor = color
                local r, g, b = color.R, color.G, color.B
                hue, saturation, value = rgbToHsv(r * 255, g * 255, b * 255)
                updateDisplay()
                self.Color = color
                
                callback(color)
            end
            
            function ColorPickerObj:GetColor()
                return self.Color
            end
            
            function ColorPickerObj:Destroy()
                colorPickerFrame:Destroy()
            end
            
            return ColorPickerObj
        end
        
        return TabObj
    end

    -- Tab selection method for window
    function WindowObj:SelectTab(tabId)
        if self.Tabs[tabId] and self.ActiveTab ~= tabId then
            local lastActiveTab = self.ActiveTab
            self.ActiveTab = tabId
            
            -- Update tab button appearance
            if lastActiveTab and self.Tabs[lastActiveTab] then
                Utility:Tween(self.Tabs[lastActiveTab].Button, {BackgroundColor3 = AppleLib.Settings.Theme.Secondary}, 0.2)
                
                -- Update text color
                for _, child in pairs(self.Tabs[lastActiveTab].Button:GetChildren()) do
                    if child:IsA("TextLabel") then
                        Utility:Tween(child, {TextColor3 = AppleLib.Settings.Theme.SubText}, 0.2)
                    elseif child:IsA("ImageLabel") then
                        Utility:Tween(child, {ImageColor3 = AppleLib.Settings.Theme.SubText}, 0.2)
                    end
                end
                
                -- Hide tab content
                Utility:Tween(self.Tabs[lastActiveTab].Content, {Position = UDim2.new(0.05, 0, 0, 0), BackgroundTransparency = 1}, 0.2)
                task.delay(0.2, function()
                    self.Tabs[lastActiveTab].Content.Visible = false
                end)
            end
            
            -- Update new active tab
            Utility:Tween(self.Tabs[tabId].Button, {BackgroundColor3 = AppleLib.Settings.Theme.Primary}, 0.2)
            
            -- Update text color
            for _, child in pairs(self.Tabs[tabId].Button:GetChildren()) do
                if child:IsA("TextLabel") then
                    Utility:Tween(child, {TextColor3 = AppleLib.Settings.Theme.Text}, 0.2)
                elseif child:IsA("ImageLabel") then
                    Utility:Tween(child, {ImageColor3 = AppleLib.Settings.Theme.Text}, 0.2)
                end
            end
            
            -- Show and animate tab content
            self.Tabs[tabId].Content.Position = UDim2.new(0.05, 0, 0, 0)
            self.Tabs[tabId].Content.BackgroundTransparency = 1
            self.Tabs[tabId].Content.Visible = true
            Utility:Tween(self.Tabs[tabId].Content, {Position = UDim2.new(0, 0, 0, 0), BackgroundTransparency = 0}, 0.2)
        end
    end
    
    function WindowObj:SetTheme(theme)
        for key, value in pairs(theme) do
            AppleLib.Settings.Theme[key] = value
        end
    end
    
    return WindowObj
end

-- Return the main library
return AppleLib

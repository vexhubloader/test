--[[
    VexHub UI Library
    A modern, sleek UI Library for Roblox exploits
    Inspired by Luna UI Library
    
    Version: 1.0.2
]]

local VexHub = {
    Name = "VexHub",
    Version = "1.0.2",
    Windows = {},
    ActiveWindow = nil,
    ThemeGradient = ColorSequence.new({
        ColorSequenceKeypoint.new(0, Color3.fromRGB(117, 164, 206)),
        ColorSequenceKeypoint.new(0.5, Color3.fromRGB(123, 201, 201)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(224, 138, 175))
    }),
    Theme = {
        Primary = Color3.fromRGB(25, 25, 30),
        Secondary = Color3.fromRGB(30, 30, 40),
        Tertiary = Color3.fromRGB(35, 35, 45),
        Text = Color3.fromRGB(240, 240, 240),
        TextDark = Color3.fromRGB(175, 175, 175),
        Accent = Color3.fromRGB(117, 164, 206),
        DarkAccent = Color3.fromRGB(90, 140, 180),
        Success = Color3.fromRGB(80, 200, 140),
        Warning = Color3.fromRGB(240, 175, 70),
        Error = Color3.fromRGB(240, 80, 100),
        Transparency = 0.3, -- More transparent for Luna-like glass effect
        Blur = true,
        RoundRadius = UDim.new(0, 8),
        Font = Enum.Font.Gotham,
        FontBold = Enum.Font.GothamBold,
        FontLight = Enum.Font.GothamMedium,
        SmallTextSize = 12,
        NormalTextSize = 14,
        HeaderTextSize = 18,
        TitleTextSize = 20,
        IconSize = 20,
        Padding = 10,
        ElementHeight = 36,
        Margin = 8,
        Easing = Enum.EasingStyle.Quint,
        Duration = 0.3
    },
    Folder = "VexHub",
    Icons = {},
    DefaultIcons = {
        Home = "rbxassetid://6026568195",
        Settings = "rbxassetid://6031280882",
        Info = "rbxassetid://6026568227",
        Warning = "rbxassetid://6022668885",
        Error = "rbxassetid://6031071050",
        Success = "rbxassetid://6023426926",
        Close = "rbxassetid://6031094678",
        Minimize = "rbxassetid://6026568240",
        Maximize = "rbxassetid://6026568267",
        ArrowDown = "rbxassetid://6031091004",
        ArrowUp = "rbxassetid://6031090990",
        Search = "rbxassetid://6031154871",
        Folder = "rbxassetid://6031302932",
        Script = "rbxassetid://6031302995",
        Image = "rbxassetid://6034407078",
        Color = "rbxassetid://6031625148",
        Toggle = "rbxassetid://6031068430",
        ToggleOff = "rbxassetid://6031068429"
    }
}

-- Services
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local HttpService = game:GetService("HttpService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local CoreGui = game:GetService("CoreGui")
local TextService = game:GetService("TextService")

-- Local variableslocal Utility = {}local Tweens = {}local Player = Players.LocalPlayerlocal Mouse = Player and Player:GetMouse() or {X = 0, Y = 0}local Camera = workspace.CurrentCameralocal ScreenGui-- Error handling for key operationslocal function safeDestroy(instance)    if instance and typeof(instance) == "Instance" then        pcall(function()            instance:Destroy()        end)    endendlocal function safeSetParent(instance, parent)    if instance and typeof(instance) == "Instance" then        pcall(function()            instance.Parent = parent        end)    endend-- Function to check if an instance still existslocal function instanceExists(instance)    if instance and typeof(instance) == "Instance" then        return pcall(function() return instance.Parent end)    end    return falseend-- Safe disconnect function for event connectionslocal function safeDisconnect(connection)    if connection and typeof(connection) == "RBXScriptConnection" then        pcall(function()            if connection.Connected then                connection:Disconnect()            end        end)    endend

-- Create the main GUI with secure loadup
local function createMainGui()
    local gui = Instance.new("ScreenGui")
    gui.Name = HttpService:GenerateGUID(false)
    gui.ResetOnSpawn = false
    gui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    gui.DisplayOrder = 100
    
    -- Different methods of protecting GUIs across exploits
    if syn and syn.protect_gui then
        syn.protect_gui(gui)
        gui.Parent = CoreGui
    elseif gethui then
        gui.Parent = gethui()
    elseif KRNL_LOADED then
        gui.Parent = CoreGui
    elseif FLUXUS_LOADED then
        gui.Parent = game:GetService("CoreGui")
    elseif OXYGEN_LOADED then
        gui.Parent = game:GetService("CoreGui")
    elseif ELECTRON_LOADED then
        gui.Parent = game:GetService("CoreGui")
    elseif SENTINEL_LOADED then
        gui.Parent = game:GetService("CoreGui")
    elseif (secure_load or securereq) then
        local secureload = secure_load or securereq
        secureload(gui)
    else
        -- Fallback for when no known exploit is detected
        gui.Parent = CoreGui
    end
    
    return gui
end

-- Initialize the main GUI
ScreenGui = createMainGui()

-- Create notification container
local NotificationHolder = Instance.new("Frame")
NotificationHolder.Name = "NotificationHolder"
NotificationHolder.AnchorPoint = Vector2.new(1, 1)
NotificationHolder.BackgroundTransparency = 1
NotificationHolder.Position = UDim2.new(1, -20, 1, -20)
NotificationHolder.Size = UDim2.new(0, 300, 1, -40)
NotificationHolder.Parent = ScreenGui

local NotificationLayout = Instance.new("UIListLayout")
NotificationLayout.Padding = UDim.new(0, 10)
NotificationLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
NotificationLayout.VerticalAlignment = Enum.VerticalAlignment.Bottom
NotificationLayout.SortOrder = Enum.SortOrder.LayoutOrder
NotificationLayout.Parent = NotificationHolder

function VexHub:IsMobile()
    return UserInputService.TouchEnabled and not UserInputService.KeyboardEnabled and not UserInputService.MouseEnabled
end

function VexHub:IsDesktop()
    return UserInputService.KeyboardEnabled and UserInputService.MouseEnabled
end

function VexHub:SaveConfig(name, data)
    if not isfolder(self.Folder) then
        makefolder(self.Folder)
    end
    
    writefile(self.Folder.."/"..name..".json", HttpService:JSONEncode(data))
end

function VexHub:LoadConfig(name)
    if isfile(self.Folder.."/"..name..".json") then
        return HttpService:JSONDecode(readfile(self.Folder.."/"..name..".json"))
    end
    return nil
end

function Utility:Lerp(a, b, t)
    -- Add nil checking to prevent "attempt to index nil with 'lerp'" errors
    if a == nil or b == nil or t == nil then
        warn("VexHub: Lerp received nil argument(s)")
        return a or b or 0
    end
    
    return a + (b - a) * t
end

function Utility:Round(number, decimalPlaces)
    local multiplier = 10 ^ (decimalPlaces or 0)
    return math.floor(number * multiplier + 0.5) / multiplier
end

function Utility:CreateTween(instance, properties, duration, easingStyle, easingDirection, repeatCount, reverses, delayTime)
    -- Error checking - make sure instance exists and is valid
    if not instance or typeof(instance) ~= "Instance" then
        warn("VexHub: CreateTween failed - Invalid instance")
        return {
            Play = function() end,
            Cancel = function() end,
            Pause = function() end,
            Completed = {
                Wait = function() end,
                Connect = function() return {Disconnect = function() end} end
            }
        }
    end
    
    -- Handle properties
    if type(properties) ~= "table" then
        warn("VexHub: CreateTween failed - Invalid properties")
        properties = {}
    end
    
    -- Create the tween info
    local info = TweenInfo.new(
        duration or VexHub.Theme.Duration,
        easingStyle or VexHub.Theme.Easing,
        easingDirection or Enum.EasingDirection.Out,
        repeatCount or 0,
        reverses or false,
        delayTime or 0
    )
    
    -- Create and store the tween safely
    local tween
    local success, err = pcall(function()
        tween = TweenService:Create(instance, info, properties)
    end)
    
    if not success then
        warn("VexHub: CreateTween error - " .. tostring(err))
        return {
            Play = function() end,
            Cancel = function() end,
            Pause = function() end,
            Completed = {
                Wait = function() end,
                Connect = function() return {Disconnect = function() end} end
            }
        }
    end
    
    -- Clean up old tweens to avoid memory leaks
    for i, oldTween in pairs(Tweens) do
        if oldTween.Instance == instance then
            -- Try to stop and remove old tweens for this instance
            pcall(function() 
                if oldTween.PlaybackState == Enum.PlaybackState.Playing then
                    oldTween:Cancel()
                end
            end)
            table.remove(Tweens, i)
        end
    end
    
    -- Store the new tween
    table.insert(Tweens, tween)
    
    -- Create a safer tween wrapper
    local safeTween = {
        _tween = tween,
        Instance = instance,
        Properties = properties,
        
        Play = function(self)
            if instanceExists(instance) then
                pcall(function() tween:Play() end)
            end
            return self
        end,
        
        Cancel = function(self)
            pcall(function() tween:Cancel() end)
            return self
        end,
        
        Pause = function(self)
            pcall(function() tween:Pause() end)
            return self
        end,
        
        Completed = {
            Wait = function()
                pcall(function() tween.Completed:Wait() end)
            end,
            
            Connect = function(_, callback)
                local connection
                pcall(function()
                    connection = tween.Completed:Connect(function()
                        if callback then callback() end
                    end)
                end)
                
                return {
                    Disconnect = function()
                        if connection then
                            pcall(function() connection:Disconnect() end)
                        end
                    end
                }
            end
        }
    }
    
    return safeTween
end

function Utility:GetTextSize(text, size, font)
    return TextService:GetTextSize(text, size, font, Vector2.new(math.huge, math.huge))
end

function Utility:GetTextBounds(text, size, font, frameSize)
    return TextService:GetTextSize(text, size, font, Vector2.new(frameSize.X, math.huge))
end

function Utility:CreateClickEffect(button, color)
    local effect = Instance.new("Frame")
    effect.BackgroundColor3 = color or VexHub.Theme.Accent
    effect.BackgroundTransparency = 0.8
    effect.BorderSizePixel = 0
    effect.Size = UDim2.new(0, 0, 0, 0)
    effect.AnchorPoint = Vector2.new(0.5, 0.5)
    effect.ZIndex = button.ZIndex + 1
    effect.Parent = button
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(1, 0)
    corner.Parent = effect
    
    local inputPosition = UserInputService:GetMouseLocation() - Vector2.new(button.AbsolutePosition.X, button.AbsolutePosition.Y)
    effect.Position = UDim2.new(0, inputPosition.X, 0, inputPosition.Y)
    
    local maxSize = math.max(button.AbsoluteSize.X, button.AbsoluteSize.Y) * 2
    
    local tween = Utility:CreateTween(effect, {
        Size = UDim2.new(0, maxSize, 0, maxSize),
        BackgroundTransparency = 1
    }, 0.5, Enum.EasingStyle.Quad)
    
    tween:Play()
    
    tween.Completed:Connect(function()
        effect:Destroy()
    end)
end

-- Modern blur effect module for glass-like UI elements
-- Enhanced Luna-style Glass Blur Effectfunction Utility:ApplyBlur(instance, blurSize, transparency)    if not instance then return end        -- Remove existing blur if any    for _, child in ipairs(instance:GetChildren()) do        if (child:IsA("Frame") and child.Name == "BlurFrame") or            (child:IsA("ImageLabel") and child.Name == "LunaGlassBlur") then            child:Destroy()        end    end        blurSize = blurSize or 10    transparency = transparency or 0.85        -- Create Luna-style glass blur    local glassBlur = Instance.new("ImageLabel")    glassBlur.Name = "LunaGlassBlur"    glassBlur.BackgroundTransparency = 1    glassBlur.BorderSizePixel = 0    glassBlur.Size = UDim2.new(1, 0, 1, 0)    glassBlur.ZIndex = instance.ZIndex - 1    glassBlur.Image = "rbxassetid://10929566376" -- Modern blur asset    glassBlur.ImageColor3 = VexHub.Theme.Primary    glassBlur.ImageTransparency = 1 - transparency    glassBlur.ScaleType = Enum.ScaleType.Slice    glassBlur.SliceCenter = Rect.new(10, 10, 118, 118)        -- Add corner if parent has corner    local parentCorner = instance:FindFirstChildOfClass("UICorner")    if parentCorner then        local corner = parentCorner:Clone()        corner.Parent = glassBlur    end        -- Add Luna-style glass gradient with subtle animation    local glassGradient = Instance.new("UIGradient")    glassGradient.Color = ColorSequence.new({        ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)),        ColorSequenceKeypoint.new(1, Color3.fromRGB(200, 200, 255))    })    glassGradient.Transparency = NumberSequence.new({        NumberSequenceKeypoint.new(0, 0.9),        NumberSequenceKeypoint.new(1, 0.8)    })    glassGradient.Rotation = 45    glassGradient.Parent = glassBlur        glassBlur.Parent = instance        -- Animate the glass gradient    task.spawn(function()        local t = 0        local connection = RunService.RenderStepped:Connect(function(dt)            if not glassGradient or not glassGradient.Parent then                connection:Disconnect()                return            end                        t = t + dt * 0.05            glassGradient.Offset = Vector2.new(math.sin(t) * 0.05, math.cos(t) * 0.05)        end)                if instance then            instance.Destroying:Connect(function()                connection:Disconnect()            end)        end    end)        -- Create Luna-style reveal animation    local fadeIn = TweenService:Create(        glassBlur,        TweenInfo.new(0.3, Enum.EasingStyle.Quint, Enum.EasingDirection.Out),        {ImageTransparency = 1 - transparency}    )        glassBlur.ImageTransparency = 1    fadeIn:Play()        return glassBlur
end

function Utility:CreateAnimatedGradient(instance, color1, color2, speed, rotation)
    if not instance then return end
    
    -- Remove existing gradient if any
    for _, child in ipairs(instance:GetChildren()) do
        if child:IsA("UIGradient") and child.Name == "AnimatedGradient" then
            child:Destroy()
        end
    end
    
    color1 = color1 or VexHub.Theme.Accent
    color2 = color2 or VexHub.Theme.DarkAccent
    speed = speed or 1
    rotation = rotation or 0
    
    local gradient = Instance.new("UIGradient")
    gradient.Name = "AnimatedGradient"
    gradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, color1),
        ColorSequenceKeypoint.new(1, color2)
    })
    gradient.Rotation = rotation
    gradient.Parent = instance
    
    -- Animate gradient
    task.spawn(function()
        local t = 0
        local connection = RunService.RenderStepped:Connect(function(dt)
            if not gradient or not gradient.Parent then
                connection:Disconnect()
                return
            end
            
            t = t + dt * speed
            gradient.Offset = Vector2.new(t % 1, 0)
        end)
        
        instance.Destroying:Connect(function()
            connection:Disconnect()
        end)
    end)
    
    return gradient
end

function Utility:ApplyRippleEffect(button, color)
    button.ClipsDescendants = true
    
    button.MouseButton1Down:Connect(function(x, y)
        local ripple = Instance.new("Frame")
        ripple.Name = "RippleEffect"
        ripple.AnchorPoint = Vector2.new(0.5, 0.5)
        ripple.BackgroundColor3 = color or VexHub.Theme.Accent
        ripple.BackgroundTransparency = 0.7
        ripple.BorderSizePixel = 0
        ripple.Position = UDim2.new(0, x - button.AbsolutePosition.X, 0, y - button.AbsolutePosition.Y)
        ripple.Size = UDim2.new(0, 0, 0, 0)
        
        local corner = Instance.new("UICorner")
        corner.CornerRadius = UDim.new(1, 0)
        corner.Parent = ripple
        
        ripple.Parent = button
        
        local maxSize = math.max(button.AbsoluteSize.X, button.AbsoluteSize.Y) * 1.5
        
        local rippleTween = TweenService:Create(
            ripple,
            TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
            {
                Size = UDim2.new(0, maxSize, 0, maxSize),
                BackgroundTransparency = 1
            }
        )
        
        rippleTween.Completed:Connect(function()
            ripple:Destroy()
        end)
        
        rippleTween:Play()
    end)
end

function Utility:ApplyGlowEffect(instance, color, size, transparency)
    if not instance then return end
    
    -- Remove existing glow if any
    for _, child in ipairs(instance:GetChildren()) do
        if child:IsA("ImageLabel") and child.Name == "GlowEffect" then
            child:Destroy()
        end
    end
    
    color = color or VexHub.Theme.Accent
    size = size or 2
    transparency = transparency or 0.9
    
    local glow = Instance.new("ImageLabel")
    glow.Name = "GlowEffect"
    glow.AnchorPoint = Vector2.new(0.5, 0.5)
    glow.BackgroundTransparency = 1
    glow.Position = UDim2.new(0.5, 0, 0.5, 0)
    glow.Size = UDim2.new(size, 0, size, 0)
    glow.ZIndex = instance.ZIndex - 1
    glow.Image = "rbxassetid://6014261993"  -- Radial gradient
    glow.ImageColor3 = color
    glow.ImageTransparency = transparency
    glow.Parent = instance
    
    -- Create pulsing animation
    task.spawn(function()
        while glow and glow.Parent do
            local pulseIn = TweenService:Create(
                glow,
                TweenInfo.new(1.5, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut),
                {
                    Size = UDim2.new(size + 0.15, 0, size + 0.15, 0),
                    ImageTransparency = transparency + 0.05
                }
            )
            
            local pulseOut = TweenService:Create(
                glow,
                TweenInfo.new(1.5, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut),
                {
                    Size = UDim2.new(size, 0, size, 0),
                    ImageTransparency = transparency
                }
            )
            
            pulseIn:Play()
            pulseIn.Completed:Wait()
            
            if not glow or not glow.Parent then break end
            
            pulseOut:Play()
            pulseOut.Completed:Wait()
            
            if not glow or not glow.Parent then break end
        end
    end)
    
    return glow
end

function VexHub:Notification(options)    task.spawn(function()        -- Validate and set defaults for options        options = options or {}        local title = options.Title or "Notification"        local text = options.Text or "This is a notification"        local duration = tonumber(options.Duration) or 5        local type = options.Type or "Info" -- Info, Success, Warning, Error        local variant = options.Variant or "Slide" -- Slide, Fade, Pop, Bounce        local callback = (type(options.Callback) == "function") and options.Callback or function() end        local sound = options.Sound ~= false -- Default true        local position = options.Position or "BottomRight" -- TopRight, TopLeft, BottomRight, BottomLeft, Center        local useBlur = options.Blur ~= false -- Use Luna-style glass blur                -- Make sure type is valid        if not (type == "Info" or type == "Success" or type == "Warning" or type == "Error") then            type = "Info"        end                -- Make sure variant is valid        if not (variant == "Slide" or variant == "Fade" or variant == "Pop" or variant == "Bounce") then            variant = "Slide"        end                local colors = {            Info = self.Theme.Accent,            Success = self.Theme.Success,            Warning = self.Theme.Warning,            Error = self.Theme.Error        }                local icons = {            Info = self.DefaultIcons.Info,            Success = self.DefaultIcons.Success,            Warning = self.DefaultIcons.Warning,            Error = self.DefaultIcons.Error        }                -- Play notification sound        if sound then            pcall(function()                local soundIds = {                    Info = "rbxassetid://6026984224",                    Success = "rbxassetid://6026984224",                    Warning = "rbxassetid://6026984224",                    Error = "rbxassetid://6026984224"                }                                local notifSound = Instance.new("Sound")                notifSound.SoundId = soundIds[type]                notifSound.Volume = 0.5                notifSound.Parent = ScreenGui                notifSound:Play()                                game:GetService("Debris"):AddItem(notifSound, 2)            end)        end
        
        -- Create notification
        local Notification = Instance.new("Frame")
        Notification.Name = "Notification_" .. title
        Notification.BackgroundColor3 = self.Theme.Secondary
        Notification.BorderSizePixel = 0
        Notification.Size = UDim2.new(1, 0, 0, 0)
        Notification.ClipsDescendants = true
        Notification.LayoutOrder = tick()
        
        -- Set position based on option
        if position == "TopRight" then
            NotificationHolder.AnchorPoint = Vector2.new(1, 0)
            NotificationHolder.Position = UDim2.new(1, -20, 0, 20)
            NotificationLayout.VerticalAlignment = Enum.VerticalAlignment.Top
        elseif position == "TopLeft" then
            NotificationHolder.AnchorPoint = Vector2.new(0, 0)
            NotificationHolder.Position = UDim2.new(0, 20, 0, 20)
            NotificationLayout.VerticalAlignment = Enum.VerticalAlignment.Top
        elseif position == "BottomLeft" then
            NotificationHolder.AnchorPoint = Vector2.new(0, 1)
            NotificationHolder.Position = UDim2.new(0, 20, 1, -20)
            NotificationLayout.VerticalAlignment = Enum.VerticalAlignment.Bottom
        elseif position == "Center" then
            NotificationHolder.AnchorPoint = Vector2.new(0.5, 0.5)
            NotificationHolder.Position = UDim2.new(0.5, 0, 0.5, 0)
            NotificationLayout.VerticalAlignment = Enum.VerticalAlignment.Center
        else -- Default BottomRight
            NotificationHolder.AnchorPoint = Vector2.new(1, 1)
            NotificationHolder.Position = UDim2.new(1, -20, 1, -20)
            NotificationLayout.VerticalAlignment = Enum.VerticalAlignment.Bottom
        end
        
        local Corner = Instance.new("UICorner")
        Corner.CornerRadius = self.Theme.RoundRadius
        Corner.Parent = Notification
        
                -- Apply enhanced Luna-style glass blur effect        if useBlur then            -- Add glass-like blur effect for Luna style            local BlurEffect = Instance.new("ImageLabel")            BlurEffect.Name = "BlurEffect"            BlurEffect.BackgroundTransparency = 1            BlurEffect.BorderSizePixel = 0            BlurEffect.Size = UDim2.new(1, 0, 1, 0)            BlurEffect.ZIndex = Notification.ZIndex - 1            BlurEffect.Image = "rbxassetid://10929566376" -- Modern blur asset            BlurEffect.ImageColor3 = Color3.fromRGB(20, 20, 25)            BlurEffect.ImageTransparency = 0.2            BlurEffect.ScaleType = Enum.ScaleType.Slice            BlurEffect.SliceCenter = Rect.new(10, 10, 118, 118)            BlurEffect.Parent = Notification                        -- Add corner to blur            local BlurCorner = Instance.new("UICorner")            BlurCorner.CornerRadius = self.Theme.RoundRadius            BlurCorner.Parent = BlurEffect                        -- Add subtle animated gradient for glass effect            local BlurGradient = Instance.new("UIGradient")            BlurGradient.Color = ColorSequence.new({                ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)),                ColorSequenceKeypoint.new(1, Color3.fromRGB(200, 200, 255))            })            BlurGradient.Transparency = NumberSequence.new({                NumberSequenceKeypoint.new(0, 0.95),                NumberSequenceKeypoint.new(1, 0.85)            })            BlurGradient.Rotation = 45            BlurGradient.Parent = BlurEffect                        -- Animate the blur gradient            task.spawn(function()                local t = 0                local connection = RunService.RenderStepped:Connect(function(dt)                    if not BlurGradient or not BlurGradient.Parent then                        connection:Disconnect()                        return                    end                                        t = t + dt * 0.1                    BlurGradient.Offset = Vector2.new(math.sin(t) * 0.1, math.cos(t) * 0.1)                end)                                task.delay(duration + 2, function()                    connection:Disconnect()                end)            end)        end
        
        -- Create accent line
        local Accent = Instance.new("Frame")
        Accent.Name = "Accent"
        Accent.BackgroundColor3 = colors[type]
        Accent.BorderSizePixel = 0
        Accent.Size = UDim2.new(0, 4, 1, 0)
        Accent.Parent = Notification
        
        -- Apply gradient to accent
        local AccentGradient = Instance.new("UIGradient")
        AccentGradient.Color = ColorSequence.new({
            ColorSequenceKeypoint.new(0, colors[type]),
            ColorSequenceKeypoint.new(1, Color3.fromRGB(
                math.clamp(colors[type].R * 1.4 * 255, 0, 255),
                math.clamp(colors[type].G * 1.4 * 255, 0, 255),
                math.clamp(colors[type].B * 1.4 * 255, 0, 255)
            ))
        })
        AccentGradient.Rotation = 90
        AccentGradient.Parent = Accent
        
        local Icon = Instance.new("ImageLabel")
        Icon.Name = "Icon"
        Icon.BackgroundTransparency = 1
        Icon.Position = UDim2.new(0, 16, 0, 12)
        Icon.Size = UDim2.new(0, 24, 0, 24)
        Icon.Image = icons[type]
        Icon.ImageColor3 = colors[type]
        Icon.Parent = Notification
        
        -- Add icon glow
        local IconGlow = Instance.new("ImageLabel")
        IconGlow.Name = "Glow"
        IconGlow.BackgroundTransparency = 1
        IconGlow.Position = UDim2.new(0.5, 0, 0.5, 0)
        IconGlow.Size = UDim2.new(1.8, 0, 1.8, 0)
        IconGlow.AnchorPoint = Vector2.new(0.5, 0.5)
        IconGlow.ZIndex = Icon.ZIndex - 1
        IconGlow.Image = "rbxassetid://6014261993"
        IconGlow.ImageColor3 = colors[type]
        IconGlow.ImageTransparency = 0.9
        IconGlow.Parent = Icon
        
        -- Create pulsing animation for glow
        local glowTween = Utility:CreateTween(IconGlow, {
            Size = UDim2.new(2.2, 0, 2.2, 0),
            ImageTransparency = 0.94
        }, 1.5, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut, -1, true)
        glowTween:Play()
        
        local TitleLabel = Instance.new("TextLabel")
        TitleLabel.Name = "Title"
        TitleLabel.BackgroundTransparency = 1
        TitleLabel.Position = UDim2.new(0, 50, 0, 8)
        TitleLabel.Size = UDim2.new(1, -65, 0, 20)
        TitleLabel.Font = self.Theme.FontBold
        TitleLabel.Text = title
        TitleLabel.TextColor3 = self.Theme.Text
        TitleLabel.TextSize = self.Theme.NormalTextSize
        TitleLabel.TextXAlignment = Enum.TextXAlignment.Left
        TitleLabel.Parent = Notification
        
        local TextLabel = Instance.new("TextLabel")
        TextLabel.Name = "Text"
        TextLabel.BackgroundTransparency = 1
        TextLabel.Position = UDim2.new(0, 50, 0, 30)
        TextLabel.Size = UDim2.new(1, -65, 0, 20)
        TextLabel.Font = self.Theme.Font
        TextLabel.Text = text
        TextLabel.TextColor3 = self.Theme.TextDark
        TextLabel.TextSize = self.Theme.SmallTextSize
        TextLabel.TextXAlignment = Enum.TextXAlignment.Left
        TextLabel.TextYAlignment = Enum.TextYAlignment.Top
        TextLabel.TextWrapped = true
        TextLabel.Parent = Notification
        
        local CloseButton = Instance.new("ImageButton")
        CloseButton.Name = "CloseButton"
        CloseButton.BackgroundTransparency = 1
        CloseButton.Position = UDim2.new(1, -25, 0, 10)
        CloseButton.Size = UDim2.new(0, 16, 0, 16)
        CloseButton.Image = self.DefaultIcons.Close
        CloseButton.ImageColor3 = self.Theme.TextDark
        CloseButton.Parent = Notification
        
        local Progress = Instance.new("Frame")
        Progress.Name = "Progress"
        Progress.BackgroundColor3 = colors[type]
        Progress.BorderSizePixel = 0
        Progress.AnchorPoint = Vector2.new(0, 1)
        Progress.Position = UDim2.new(0, 0, 1, 0)
        Progress.Size = UDim2.new(1, 0, 0, 2)
        Progress.Parent = Notification
        
        -- Add progress gradient
        local ProgressGradient = Instance.new("UIGradient")
        ProgressGradient.Color = ColorSequence.new({
            ColorSequenceKeypoint.new(0, colors[type]),
            ColorSequenceKeypoint.new(1, Color3.fromRGB(
                math.clamp(colors[type].R * 1.4 * 255, 0, 255),
                math.clamp(colors[type].G * 1.4 * 255, 0, 255),
                math.clamp(colors[type].B * 1.4 * 255, 0, 255)
            ))
        })
        ProgressGradient.Parent = Progress
        
        Notification.Parent = NotificationHolder
        
        -- Calculate text size for notification height
        local textSize = Utility:GetTextBounds(text, self.Theme.SmallTextSize, self.Theme.Font, Vector2.new(Notification.AbsoluteSize.X - 65, 1000))
        local totalHeight = math.max(30 + textSize.Y + 20, 60) -- Minimum 60px height
        
        -- Adjust text label size based on content
        TextLabel.Size = UDim2.new(1, -65, 0, textSize.Y)
        
        -- Set initial state based on animation variant
        Notification.BackgroundTransparency = 1
        TitleLabel.TextTransparency = 1
        TextLabel.TextTransparency = 1
        Icon.ImageTransparency = 1
        CloseButton.ImageTransparency = 1
        Progress.BackgroundTransparency = 1
        Accent.BackgroundTransparency = 1
        
        -- Different enter animations based on variant
        if variant == "Slide" then
            Notification.Position = UDim2.new(1, 300, 0, 0)
            Notification.Size = UDim2.new(1, 0, 0, totalHeight)
            
            Utility:CreateTween(Notification, {Position = UDim2.new(0, 0, 0, 0), BackgroundTransparency = 0.1}, 0.5, Enum.EasingStyle.Back, Enum.EasingDirection.Out):Play()
        elseif variant == "Fade" then
            Notification.Position = UDim2.new(0, 0, 0, 0)
            Notification.Size = UDim2.new(1, 0, 0, totalHeight)
            
            Utility:CreateTween(Notification, {BackgroundTransparency = 0.1}, 0.4, Enum.EasingStyle.Quad):Play()
        elseif variant == "Pop" then
            Notification.Position = UDim2.new(0.5, 0, 0, 0)
            Notification.AnchorPoint = Vector2.new(0.5, 0)
            Notification.Size = UDim2.new(0, 0, 0, totalHeight)
            
            Utility:CreateTween(Notification, {Size = UDim2.new(1, 0, 0, totalHeight), BackgroundTransparency = 0.1}, 0.4, Enum.EasingStyle.Back, Enum.EasingDirection.Out):Play()
            Utility:CreateTween(Notification, {AnchorPoint = Vector2.new(0, 0), Position = UDim2.new(0, 0, 0, 0)}, 0.4, Enum.EasingStyle.Quad):Play()
        elseif variant == "Bounce" then
            Notification.Position = UDim2.new(0, 0, -1, 0)
            Notification.Size = UDim2.new(1, 0, 0, totalHeight)
            
            Utility:CreateTween(Notification, {Position = UDim2.new(0, 0, 0, 0), BackgroundTransparency = 0.1}, 0.5, Enum.EasingStyle.Bounce, Enum.EasingDirection.Out):Play()
        end
        
        -- Fade in elements
        task.wait(0.1)
        Utility:CreateTween(TitleLabel, {TextTransparency = 0}, 0.3, Enum.EasingStyle.Quad):Play()
        
        task.wait(0.05)
        Utility:CreateTween(Icon, {ImageTransparency = 0}, 0.3, Enum.EasingStyle.Quad):Play()
        Utility:CreateTween(Accent, {BackgroundTransparency = 0}, 0.3, Enum.EasingStyle.Quad):Play()
        
        task.wait(0.05)
        Utility:CreateTween(TextLabel, {TextTransparency = 0.2}, 0.3, Enum.EasingStyle.Quad):Play()
        Utility:CreateTween(CloseButton, {ImageTransparency = 0.4}, 0.3, Enum.EasingStyle.Quad):Play()
        Utility:CreateTween(Progress, {BackgroundTransparency = 0}, 0.3, Enum.EasingStyle.Quad):Play()
        
        -- Animate progress bar
        Utility:CreateTween(Progress, {Size = UDim2.new(0, 0, 0, 2)}, duration, Enum.EasingStyle.Linear):Play()
        
        -- Add gradient animation to progress
        task.spawn(function()
            local t = 0
            local connection = RunService.RenderStepped:Connect(function(dt)
                t = t + dt
                ProgressGradient.Offset = Vector2.new(t * 0.5 % 1, 0)
                AccentGradient.Offset = Vector2.new(0, t * 0.2 % 1)
            end)
            
            task.delay(duration + 1, function()
                connection:Disconnect()
            end)
        end)
        
        CloseButton.MouseEnter:Connect(function()
            Utility:CreateTween(CloseButton, {ImageColor3 = self.Theme.Text, ImageTransparency = 0}):Play()
        end)
        
        CloseButton.MouseLeave:Connect(function()
            Utility:CreateTween(CloseButton, {ImageColor3 = self.Theme.TextDark, ImageTransparency = 0.4}):Play()
        end)
        
        local closeFn
        closeFn = function()
            if not Notification or not Notification.Parent then return end
            
            -- Different exit animations based on variant
            if variant == "Slide" then
                local exitTween = Utility:CreateTween(Notification, {Position = UDim2.new(1, 300, 0, 0), BackgroundTransparency = 1}, 0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.In)
                exitTween:Play()
                
                exitTween.Completed:Connect(function()
                    Notification:Destroy()
                    if callback then callback() end
                end)
            elseif variant == "Fade" then
                local fadeTween = Utility:CreateTween(Notification, {BackgroundTransparency = 1}, 0.4, Enum.EasingStyle.Quad)
                local shrinkTween = Utility:CreateTween(Notification, {Size = UDim2.new(1, 0, 0, 0)}, 0.4, Enum.EasingStyle.Quad, Enum.EasingDirection.In, 0, false, 0.3)
                
                fadeTween:Play()
                shrinkTween:Play()
                
                shrinkTween.Completed:Connect(function()
                    Notification:Destroy()
                    if callback then callback() end
                end)
            elseif variant == "Pop" then
                local shrinkTween = Utility:CreateTween(Notification, {Size = UDim2.new(0, 0, 0, totalHeight), AnchorPoint = Vector2.new(0.5, 0), Position = UDim2.new(0.5, 0, 0, 0), BackgroundTransparency = 1}, 0.4, Enum.EasingStyle.Quad, Enum.EasingDirection.In)
                shrinkTween:Play()
                
                shrinkTween.Completed:Connect(function()
                    Notification:Destroy()
                    if callback then callback() end
                end)
            elseif variant == "Bounce" then
                local exitTween = Utility:CreateTween(Notification, {Position = UDim2.new(0, 0, -1, 0), BackgroundTransparency = 1}, 0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.In)
                exitTween:Play()
                
                exitTween.Completed:Connect(function()
                    Notification:Destroy()
                    if callback then callback() end
                end)
            end
            
            -- Fade out elements
            Utility:CreateTween(TitleLabel, {TextTransparency = 1}, 0.3, Enum.EasingStyle.Quad):Play()
            Utility:CreateTween(TextLabel, {TextTransparency = 1}, 0.3, Enum.EasingStyle.Quad):Play()
            Utility:CreateTween(Icon, {ImageTransparency = 1}, 0.3, Enum.EasingStyle.Quad):Play()
            Utility:CreateTween(CloseButton, {ImageTransparency = 1}, 0.3, Enum.EasingStyle.Quad):Play()
            Utility:CreateTween(Progress, {BackgroundTransparency = 1}, 0.3, Enum.EasingStyle.Quad):Play()
            Utility:CreateTween(Accent, {BackgroundTransparency = 1}, 0.3, Enum.EasingStyle.Quad):Play()
            
            CloseButton.MouseButton1Click:Disconnect()
        end
        
        CloseButton.MouseButton1Click:Connect(closeFn)
        task.delay(duration, closeFn)
        
        return {
            Close = closeFn,
            Progress = Progress,
            Instance = Notification,
            UpdateText = function(newText)
                TextLabel.Text = newText
                local newTextSize = Utility:GetTextBounds(newText, self.Theme.SmallTextSize, self.Theme.Font, Vector2.new(Notification.AbsoluteSize.X - 65, 1000))
                TextLabel.Size = UDim2.new(1, -65, 0, newTextSize.Y)
                
                local newHeight = math.max(30 + newTextSize.Y + 20, 60)
                Utility:CreateTween(Notification, {Size = UDim2.new(1, 0, 0, newHeight)}, 0.3, Enum.EasingStyle.Quad):Play()
            end
        }
    end)
end

function VexHub:CreateWindow(options)
    options = options or {}
    local title = options.Title or "VexHub"
    local size = options.Size or UDim2.new(0, 600, 0, 400)
    local position = options.Position
    local resize = options.Resizable == nil and true or options.Resizable
    local minSize = options.MinSize or Vector2.new(400, 300)
    local maxSize = options.MaxSize
    local tabs = options.Tabs or {}
    
    -- Create window container with Luna-like design
    local MainHolder = Instance.new("Frame")
    MainHolder.Name = "MainHolder_" .. title:gsub("[^%w%s]", "")
    MainHolder.BackgroundTransparency = 1
    MainHolder.BorderSizePixel = 0
    MainHolder.Position = position or UDim2.new(0.5, -size.X.Offset / 2, 0.5, -size.Y.Offset / 2)
    MainHolder.Size = size
    MainHolder.Parent = ScreenGui
    
    -- Create shadow (Luna-style)
    local ShadowHolder = Instance.new("Frame")
    ShadowHolder.Name = "ShadowHolder"
    ShadowHolder.BackgroundTransparency = 1
    ShadowHolder.BorderSizePixel = 0
    ShadowHolder.Size = UDim2.new(1, 0, 1, 0)
    ShadowHolder.ZIndex = 0
    ShadowHolder.Parent = MainHolder
    
    local Shadow = Instance.new("ImageLabel")
    Shadow.Name = "Shadow"
    Shadow.BackgroundTransparency = 1
    Shadow.BorderSizePixel = 0
    Shadow.Size = UDim2.new(1, 45, 1, 45)
    Shadow.Position = UDim2.new(0.5, 0, 0.5, 0)
    Shadow.AnchorPoint = Vector2.new(0.5, 0.5)
    Shadow.Image = "rbxassetid://7603818383"
    Shadow.ImageColor3 = Color3.fromRGB(0, 0, 0)
    Shadow.ImageTransparency = 0.6
    Shadow.ScaleType = Enum.ScaleType.Slice
    Shadow.SliceCenter = Rect.new(30, 30, 286, 286)
    Shadow.ZIndex = 0
    Shadow.Parent = ShadowHolder
    
        -- Create main window with enhanced Luna-like transparency    local Window = Instance.new("Frame")    Window.Name = title:gsub("[^%w%s]", "")    Window.BackgroundColor3 = self.Theme.Primary    Window.BackgroundTransparency = 0.4 -- More transparent like Luna    Window.BorderSizePixel = 0    Window.Position = UDim2.new(0, 0, 0, 0)    Window.Size = UDim2.new(1, 0, 1, 0)    Window.Parent = MainHolder    Window.ClipsDescendants = true        -- Add Luna-style gradient with enhanced effect    local UIGradient = Instance.new("UIGradient")    UIGradient.Color = self.ThemeGradient or ColorSequence.new({        ColorSequenceKeypoint.new(0, Color3.fromRGB(55, 55, 75)),        ColorSequenceKeypoint.new(0.5, Color3.fromRGB(45, 45, 65)),        ColorSequenceKeypoint.new(1, Color3.fromRGB(35, 35, 50))    })    UIGradient.Rotation = 35 -- Luna uses more diagonal gradient    UIGradient.Parent = Window        -- Add Luna-style animated gradient effect    task.spawn(function()        local t = 0        local connection = RunService.RenderStepped:Connect(function(dt)            if not UIGradient or not UIGradient.Parent then                connection:Disconnect()                return            end                        t = t + dt * 0.1 -- Slow subtle animation            UIGradient.Offset = Vector2.new(math.sin(t) * 0.05, math.cos(t) * 0.05)        end)                Window.Destroying:Connect(function()            connection:Disconnect()        end)    end)
    
    local Corner = Instance.new("UICorner")
    Corner.CornerRadius = self.Theme.RoundRadius
    Corner.Parent = Window
    
        local TopBar = Instance.new("Frame")    TopBar.Name = "TopBar"    TopBar.BackgroundColor3 = self.Theme.Secondary    TopBar.BackgroundTransparency = 0.6 -- Enhanced Luna-like transparency    TopBar.BorderSizePixel = 0    TopBar.Size = UDim2.new(1, 0, 0, 36)    TopBar.Parent = Window        -- Add subtle top bar gradient like Luna    local TopBarGradient = Instance.new("UIGradient")    TopBarGradient.Color = ColorSequence.new({        ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)),        ColorSequenceKeypoint.new(1, Color3.fromRGB(200, 200, 200))    })    TopBarGradient.Transparency = NumberSequence.new({        NumberSequenceKeypoint.new(0, 0.9),        NumberSequenceKeypoint.new(1, 0.95)    })    TopBarGradient.Rotation = 90    TopBarGradient.Parent = TopBar
    
    local TopCorner = Instance.new("UICorner")
    TopCorner.CornerRadius = UDim.new(0, 8)
    TopCorner.Parent = TopBar
    
    local CornerFix = Instance.new("Frame")
    CornerFix.Name = "CornerFix"
    CornerFix.BackgroundColor3 = self.Theme.Secondary
    CornerFix.BackgroundTransparency = 0.4 -- More transparent like Luna
    CornerFix.BorderSizePixel = 0
    CornerFix.Position = UDim2.new(0, 0, 1, -8)
    CornerFix.Size = UDim2.new(1, 0, 0, 8)
    CornerFix.Parent = TopBar
    
    local TitleLabel = Instance.new("TextLabel")
    TitleLabel.Name = "Title"
    TitleLabel.BackgroundTransparency = 1
    TitleLabel.Position = UDim2.new(0, 12, 0, 0)
    TitleLabel.Size = UDim2.new(1, -90, 1, 0)
    TitleLabel.Font = self.Theme.FontBold
    TitleLabel.Text = title
    TitleLabel.TextColor3 = self.Theme.Text
    TitleLabel.TextSize = self.Theme.HeaderTextSize
    TitleLabel.TextXAlignment = Enum.TextXAlignment.Left
    TitleLabel.Parent = TopBar
    
    local CloseButton = Instance.new("ImageButton")
    CloseButton.Name = "CloseButton"
    CloseButton.BackgroundTransparency = 1
    CloseButton.Position = UDim2.new(1, -30, 0, 8)
    CloseButton.Size = UDim2.new(0, 20, 0, 20)
    CloseButton.Image = self.DefaultIcons.Close
    CloseButton.ImageColor3 = self.Theme.TextDark
    CloseButton.Parent = TopBar
    
    local MinimizeButton = Instance.new("ImageButton")
    MinimizeButton.Name = "MinimizeButton"
    MinimizeButton.BackgroundTransparency = 1
    MinimizeButton.Position = UDim2.new(1, -60, 0, 8)
    MinimizeButton.Size = UDim2.new(0, 20, 0, 20)
    MinimizeButton.Image = self.DefaultIcons.Minimize
    MinimizeButton.ImageColor3 = self.Theme.TextDark
    MinimizeButton.Parent = TopBar
    
    local ContentFrame = Instance.new("Frame")
    ContentFrame.Name = "Content"
    ContentFrame.BackgroundColor3 = self.Theme.Primary
    ContentFrame.BackgroundTransparency = 1 -- Fully transparent
    ContentFrame.BorderSizePixel = 0
    ContentFrame.Position = UDim2.new(0, 0, 0, 36)
    ContentFrame.Size = UDim2.new(1, 0, 1, -36)
    ContentFrame.Parent = Window
    
        local TabContainer = Instance.new("Frame")    TabContainer.Name = "TabContainer"    TabContainer.BackgroundColor3 = self.Theme.Secondary    TabContainer.BackgroundTransparency = 0.7 -- Enhanced Luna-like transparency    TabContainer.BorderSizePixel = 0    TabContainer.Size = UDim2.new(0, 150, 1, 0)    TabContainer.Parent = ContentFrame        -- Apply Luna-style glass blur effect    local TabBlur = Instance.new("ImageLabel")    TabBlur.Name = "TabBlur"    TabBlur.BackgroundTransparency = 1    TabBlur.Size = UDim2.new(1, 0, 1, 0)    TabBlur.ZIndex = TabContainer.ZIndex - 1    TabBlur.Image = "rbxassetid://10929566376" -- Modern blur asset    TabBlur.ImageColor3 = self.Theme.Secondary    TabBlur.ImageTransparency = 0.4    TabBlur.ScaleType = Enum.ScaleType.Slice    TabBlur.SliceCenter = Rect.new(10, 10, 118, 118)    TabBlur.Parent = TabContainer
    
    local TabCorner = Instance.new("UICorner") 
    TabCorner.CornerRadius = UDim.new(0, 8)
    TabCorner.Parent = TabContainer
    
    local TabCornerFix = Instance.new("Frame")
    TabCornerFix.Name = "TabCornerFix"
    TabCornerFix.BackgroundColor3 = self.Theme.Secondary
    TabCornerFix.BackgroundTransparency = 0.6
    TabCornerFix.BorderSizePixel = 0
    TabCornerFix.Position = UDim2.new(1, -8, 0, 0)
    TabCornerFix.Size = UDim2.new(0, 8, 1, 0)
    TabCornerFix.Parent = TabContainer
    
    local TabList = Instance.new("ScrollingFrame")
    TabList.Name = "TabList"
    TabList.BackgroundTransparency = 1
    TabList.BorderSizePixel = 0
    TabList.Size = UDim2.new(1, 0, 1, 0)
    TabList.CanvasSize = UDim2.new(0, 0, 0, 0)
    TabList.ScrollBarThickness = 2
    TabList.ScrollBarImageColor3 = self.Theme.DarkAccent
    TabList.AutomaticCanvasSize = Enum.AutomaticSize.Y
    TabList.Parent = TabContainer
    
    local TabLayout = Instance.new("UIListLayout")
    TabLayout.Padding = UDim.new(0, 5)
    TabLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
    TabLayout.SortOrder = Enum.SortOrder.LayoutOrder
    TabLayout.Parent = TabList
    
    local TabPadding = Instance.new("UIPadding")
    TabPadding.PaddingTop = UDim.new(0, 10)
    TabPadding.PaddingBottom = UDim.new(0, 10)
    TabPadding.Parent = TabList
    
    local TabContent = Instance.new("Frame")
    TabContent.Name = "TabContent"
    TabContent.BackgroundTransparency = 1
    TabContent.BorderSizePixel = 0
    TabContent.Position = UDim2.new(0, 150, 0, 0)
    TabContent.Size = UDim2.new(1, -150, 1, 0)
    TabContent.Parent = ContentFrame
    
    local WindowObj = {
        Instance = MainHolder, -- Updated to MainHolder
        Window = Window,       -- Added Window reference
        Tabs = {},
        ActiveTab = nil,
        CurrentTab = nil,      -- Added CurrentTab for tracking
        MinimizeButton = MinimizeButton,
        CloseButton = CloseButton,
        IsDragging = false,
        IsMinimized = false,
        IsResizing = false,
        TabContainer = TabContainer,
        TabContent = TabContent,
        TabList = TabList,
        TopBar = TopBar
    }
    
    WindowObj.Minimize = function()
        if WindowObj.IsMinimized then
            WindowObj.IsMinimized = false
            local expandTween = Utility:CreateTween(ContentFrame, {Size = UDim2.new(1, 0, 1, -36)}, 0.3, Enum.EasingStyle.Quint)
            expandTween:Play()
        else
            WindowObj.IsMinimized = true
            local minimizeTween = Utility:CreateTween(ContentFrame, {Size = UDim2.new(1, 0, 0, 0)}, 0.3, Enum.EasingStyle.Quint)
            minimizeTween:Play()
        end
    end
    
    WindowObj.Close = function()
        -- First fade out all elements
        for _, tab in pairs(WindowObj.Tabs) do
            if tab.Page then
                Utility:CreateTween(tab.Page, {BackgroundTransparency = 1}, 0.2):Play()
            end
            if tab.Instance then
                Utility:CreateTween(tab.Instance, {BackgroundTransparency = 1}, 0.2):Play()
            end
        end
        
        -- Then shrink and fade the window
        local closeTween = Utility:CreateTween(MainHolder, {Size = UDim2.new(0, MainHolder.AbsoluteSize.X, 0, 0)}, 0.3, Enum.EasingStyle.Quint)
        local fadeMainTween = Utility:CreateTween(Window, {BackgroundTransparency = 1}, 0.3, Enum.EasingStyle.Quint)
        
        closeTween:Play()
        fadeMainTween:Play()
        
        fadeMainTween.Completed:Connect(function()
            MainHolder:Destroy()
        end)
    end
    
    -- Dragging functionality
    TopBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            WindowObj.IsDragging = true
            local startPos = input.Position
            local startFramePos = MainHolder.Position
            
            local connection
            connection = RunService.RenderStepped:Connect(function()
                if not UserInputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton1) then
                    WindowObj.IsDragging = false
                    connection:Disconnect()
                    return
                end
                
                local delta = UserInputService:GetMouseLocation() - startPos
                MainHolder.Position = UDim2.new(
                    startFramePos.X.Scale, 
                    startFramePos.X.Offset + delta.X,
                    startFramePos.Y.Scale,
                    startFramePos.Y.Offset + delta.Y
                )
            end)
        end
    end)
    
    -- Resizing functionality
    if resize then
        local resizeHandle = Instance.new("TextButton")
        resizeHandle.Name = "ResizeHandle"
        resizeHandle.Text = ""
        resizeHandle.BackgroundTransparency = 1
        resizeHandle.Position = UDim2.new(1, -15, 1, -15)
        resizeHandle.Size = UDim2.new(0, 15, 0, 15)
        resizeHandle.Parent = Window
        
        local resizeIcon = Instance.new("ImageLabel")
        resizeIcon.BackgroundTransparency = 1
        resizeIcon.Size = UDim2.new(1, 0, 1, 0)
        resizeIcon.Image = "rbxassetid://6022668955"
        resizeIcon.ImageColor3 = self.Theme.TextDark
        resizeIcon.Parent = resizeHandle
        
        resizeHandle.MouseEnter:Connect(function()
            Utility:CreateTween(resizeIcon, {ImageColor3 = self.Theme.Text}):Play()
        end)
        
        resizeHandle.MouseLeave:Connect(function()
            Utility:CreateTween(resizeIcon, {ImageColor3 = self.Theme.TextDark}):Play()
        end)
        
        resizeHandle.MouseButton1Down:Connect(function()
            WindowObj.IsResizing = true
            
            local startSize = MainHolder.AbsoluteSize
            local startPos = UserInputService:GetMouseLocation()
            
            local connection
            connection = RunService.RenderStepped:Connect(function()
                if not UserInputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton1) then
                    WindowObj.IsResizing = false
                    connection:Disconnect()
                    return
                end
                
                local currentPos = UserInputService:GetMouseLocation()
                local delta = currentPos - startPos
                
                local newSize = Vector2.new(
                    math.clamp(startSize.X + delta.X, minSize.X, maxSize and maxSize.X or 1000000),
                    math.clamp(startSize.Y + delta.Y, minSize.Y, maxSize and maxSize.Y or 1000000)
                )
                
                MainHolder.Size = UDim2.new(0, newSize.X, 0, newSize.Y)
                ShadowHolder.Size = UDim2.new(1, 0, 1, 0) -- Keep shadow matched to MainHolder
            end)
        end)
    end
    
    -- Button hover effects
    CloseButton.MouseEnter:Connect(function()
        Utility:CreateTween(CloseButton, {ImageColor3 = Color3.fromRGB(255, 100, 100)}):Play()
    end)
    
    CloseButton.MouseLeave:Connect(function()
        Utility:CreateTween(CloseButton, {ImageColor3 = self.Theme.TextDark}):Play()
    end)
    
    MinimizeButton.MouseEnter:Connect(function()
        Utility:CreateTween(MinimizeButton, {ImageColor3 = self.Theme.Text}):Play()
    end)
    
    MinimizeButton.MouseLeave:Connect(function()
        Utility:CreateTween(MinimizeButton, {ImageColor3 = self.Theme.TextDark}):Play()
    end)
    
    CloseButton.MouseButton1Click:Connect(WindowObj.Close)
    MinimizeButton.MouseButton1Click:Connect(WindowObj.Minimize)
    
    -- Tab creation function
    WindowObj.AddTab = function(tabOptions)
        tabOptions = tabOptions or {}
        local tabName = tabOptions.Name or "Tab"
        local tabIcon = tabOptions.Icon or self.DefaultIcons.Home
        
        local TabButton = Instance.new("TextButton")
        TabButton.Name = tabName
        TabButton.BackgroundColor3 = self.Theme.Tertiary
        TabButton.BackgroundTransparency = 1
        TabButton.BorderSizePixel = 0
        TabButton.Size = UDim2.new(0.9, 0, 0, 36)
        TabButton.Font = self.Theme.Font
        TabButton.Text = ""
        TabButton.AutoButtonColor = false
        TabButton.Parent = TabList
        
        -- Luna-style tab corner (more rounded)
        local TabCorner = Instance.new("UICorner")
        TabCorner.CornerRadius = UDim.new(0, 6)
        TabCorner.Parent = TabButton
        
        -- Luna-style tab glow
        local DropShadowHolder = Instance.new("Frame")
        DropShadowHolder.Name = "DropShadowHolder"
        DropShadowHolder.BackgroundTransparency = 1
        DropShadowHolder.Size = UDim2.new(1, 0, 1, 0)
        DropShadowHolder.ZIndex = TabButton.ZIndex - 1
        DropShadowHolder.Parent = TabButton
        
        local DropShadow = Instance.new("ImageLabel")
        DropShadow.Name = "DropShadow"
        DropShadow.BackgroundTransparency = 1
        DropShadow.Size = UDim2.new(1, 30, 1, 30)
        DropShadow.Position = UDim2.new(0.5, 0, 0.5, 0)
        DropShadow.AnchorPoint = Vector2.new(0.5, 0.5)
        DropShadow.ImageTransparency = 1 -- Initially invisible
        DropShadow.Image = "rbxassetid://6014261993"
        DropShadow.ImageColor3 = self.Theme.Accent
        DropShadow.ScaleType = Enum.ScaleType.Slice
        DropShadow.SliceCenter = Rect.new(49, 49, 450, 450)
        DropShadow.Parent = DropShadowHolder
        
        local TabIcon = Instance.new("ImageLabel")
        TabIcon.Name = "ImageLabel"
        TabIcon.BackgroundTransparency = 1
        TabIcon.Position = UDim2.new(0, 10, 0, 8)
        TabIcon.Size = UDim2.new(0, 20, 0, 20)
        TabIcon.Image = tabIcon
        TabIcon.ImageColor3 = self.Theme.TextDark
        TabIcon.Parent = TabButton
        
        local TabLabel = Instance.new("TextLabel")
        TabLabel.Name = "Label"
        TabLabel.BackgroundTransparency = 1
        TabLabel.Position = UDim2.new(0, 40, 0, 0)
        TabLabel.Size = UDim2.new(1, -50, 1, 0)
        TabLabel.Font = self.Theme.Font
        TabLabel.Text = tabName
        TabLabel.TextColor3 = self.Theme.TextDark
        TabLabel.TextSize = self.Theme.NormalTextSize
        TabLabel.TextXAlignment = Enum.TextXAlignment.Left
        TabLabel.Parent = TabButton
        
        -- Luna-like style: UIStroke for tabs
        local UIStroke = Instance.new("UIStroke")
        UIStroke.Name = "UIStroke"
        UIStroke.Color = self.Theme.Accent
        UIStroke.Transparency = 1
        UIStroke.Thickness = 1.5
        UIStroke.Parent = TabButton
        
        local TabPage = Instance.new("ScrollingFrame")
        TabPage.Name = tabName
        TabPage.BackgroundTransparency = 1
        TabPage.BorderSizePixel = 0
        TabPage.Size = UDim2.new(1, 0, 1, 0)
        TabPage.ScrollBarThickness = 2
        TabPage.ScrollBarImageColor3 = self.Theme.DarkAccent
        TabPage.CanvasSize = UDim2.new(0, 0, 0, 0)
        TabPage.AutomaticCanvasSize = Enum.AutomaticSize.Y
        TabPage.Visible = false
        TabPage.Parent = TabContent
        
        local TabContentLayout = Instance.new("UIListLayout")
        TabContentLayout.Padding = UDim.new(0, 10)
        TabContentLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
        TabContentLayout.SortOrder = Enum.SortOrder.LayoutOrder
        TabContentLayout.Parent = TabPage
        
        local TabContentPadding = Instance.new("UIPadding")
        TabContentPadding.PaddingTop = UDim.new(0, 15)
        TabContentPadding.PaddingLeft = UDim.new(0, 15)
        TabContentPadding.PaddingRight = UDim.new(0, 15)
        TabContentPadding.PaddingBottom = UDim.new(0, 15)
        TabContentPadding.Parent = TabPage
        
        local TabObj = {
            Name = tabName,
            Instance = TabButton,
            Page = TabPage,
            Icon = TabIcon,
            Label = TabLabel,
            UIStroke = UIStroke,
            DropShadow = DropShadow,
            Elements = {}
        }
        
        -- Luna-style hover animations
        TabButton.MouseEnter:Connect(function()
            if WindowObj.ActiveTab and WindowObj.ActiveTab.Name == tabName then return end
            Utility:CreateTween(TabButton, {BackgroundTransparency = 0.9}):Play()
            Utility:CreateTween(TabIcon, {ImageColor3 = self.Theme.TextDark}):Play()
            Utility:CreateTween(TabLabel, {TextColor3 = self.Theme.TextDark}):Play()
            Utility:CreateTween(DropShadow, {ImageTransparency = 0.9}):Play()
        end)
        
        TabButton.MouseLeave:Connect(function()
            if WindowObj.ActiveTab and WindowObj.ActiveTab.Name == tabName then return end
            Utility:CreateTween(TabButton, {BackgroundTransparency = 1}):Play()
            Utility:CreateTween(TabIcon, {ImageColor3 = self.Theme.TextDark}):Play()
            Utility:CreateTween(TabLabel, {TextColor3 = self.Theme.TextDark}):Play()
            Utility:CreateTween(DropShadow, {ImageTransparency = 1}):Play()
        end)
        
        -- Fixed tab click handler
        TabButton.MouseButton1Click:Connect(function()
            WindowObj:SelectTab(tabName)
        end)
        
        -- Store reference to interact
        local Interact = Instance.new("TextButton")
        Interact.Name = "Interact"
        Interact.BackgroundTransparency = 1
        Interact.Size = UDim2.new(1, 0, 1, 0)
        Interact.ZIndex = 10
        Interact.Text = ""
        Interact.Parent = TabButton
        
        Interact.MouseButton1Click:Connect(function()
            WindowObj:SelectTab(tabName)
        end)
        
        WindowObj.Tabs[tabName] = TabObj
        
        if not WindowObj.ActiveTab then
            WindowObj:SelectTab(tabName)
        end
        
        return TabObj
    end
    
        -- Improved tab selection with Luna-like animations    WindowObj.SelectTab = function(self, tabName)        if not self.Tabs[tabName] then            warn("VexHub: Tab '" .. tabName .. "' doesn't exist!")            return        end                if self.ActiveTab then            local lastTab = self.ActiveTab                        -- Luna-style deselection animations            Utility:CreateTween(lastTab.Instance, {BackgroundTransparency = 1}):Play()            Utility:CreateTween(lastTab.UIStroke, {Transparency = 1}):Play()            Utility:CreateTween(lastTab.Icon, {ImageColor3 = self.Theme.TextDark}):Play()            Utility:CreateTween(lastTab.Label, {TextColor3 = self.Theme.TextDark}):Play()            Utility:CreateTween(lastTab.DropShadow, {ImageTransparency = 1}):Play()                        -- Hide last tab content with fade            Utility:CreateTween(lastTab.Page, {ScrollBarImageTransparency = 1}, 0.3, Enum.EasingStyle.Quad):Play()            task.delay(0.1, function()                if self.ActiveTab ~= lastTab then                    lastTab.Page.Visible = false                end            end)                        -- Remove highlight if exists            if lastTab.Instance:FindFirstChild("Highlight") then                lastTab.Instance.Highlight:Destroy()            end                        -- Remove old tab glow            if lastTab.Instance:FindFirstChild("TabGlow") then                lastTab.Instance.TabGlow:Destroy()            end        end                local newTab = self.Tabs[tabName]        self.ActiveTab = newTab                -- Enhanced Luna-style selection animations        Utility:CreateTween(newTab.Instance, {BackgroundTransparency = 0.8, BackgroundColor3 = self.Theme.Accent}):Play()        Utility:CreateTween(newTab.UIStroke, {Transparency = 0.2}):Play()        Utility:CreateTween(newTab.Icon, {ImageColor3 = Color3.fromRGB(255, 255, 255)}):Play()        Utility:CreateTween(newTab.Label, {TextColor3 = Color3.fromRGB(255, 255, 255)}):Play()        Utility:CreateTween(newTab.DropShadow, {ImageTransparency = 0.7, Size = UDim2.new(1, 36, 1, 36)}):Play()                -- Add a subtle glow effect to the selected tab (Luna-style)        local glow = Instance.new("ImageLabel")        glow.Name = "TabGlow"        glow.BackgroundTransparency = 1        glow.Position = UDim2.new(0.5, 0, 0.5, 0)        glow.Size = UDim2.new(1.2, 0, 1.2, 0)        glow.SizeConstraint = Enum.SizeConstraint.RelativeYY        glow.AnchorPoint = Vector2.new(0.5, 0.5)        glow.ZIndex = newTab.Instance.ZIndex - 1        glow.Image = "rbxassetid://6014261993"        glow.ImageColor3 = self.Theme.Accent        glow.ImageTransparency = 0.8        glow.Parent = newTab.Instance                -- Create pulsing animation        task.spawn(function()            while glow and glow.Parent do                Utility:CreateTween(glow, {ImageTransparency = 0.85}, 1.2, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut):Play()                wait(1.2)                if not glow or not glow.Parent then break end                Utility:CreateTween(glow, {ImageTransparency = 0.75}, 1.2, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut):Play()                wait(1.2)            end        end)                -- Show new tab content with fade-in        newTab.Page.Visible = true        Utility:CreateTween(newTab.Page, {ScrollBarImageTransparency = 0}, 0.3, Enum.EasingStyle.Quad):Play()                -- Enhanced Luna-style highlight bar        local highlight = Instance.new("Frame")        highlight.Name = "Highlight"        highlight.BackgroundColor3 = self.Theme.Accent        highlight.BackgroundTransparency = 0.5        highlight.BorderSizePixel = 0        highlight.Size = UDim2.new(0, 3, 1, -10)        highlight.Position = UDim2.new(0, 2, 0, 5)        highlight.Parent = newTab.Instance                -- Add a corner to the highlight        local highlightCorner = Instance.new("UICorner")        highlightCorner.CornerRadius = UDim.new(0, 2)        highlightCorner.Parent = highlight                -- Add Luna-style highlight gradient        local highlightGradient = Instance.new("UIGradient")        highlightGradient.Color = ColorSequence.new({            ColorSequenceKeypoint.new(0, self.Theme.Accent),            ColorSequenceKeypoint.new(1, Color3.fromRGB(                math.clamp(self.Theme.Accent.R * 1.4 * 255, 0, 255),                math.clamp(self.Theme.Accent.G * 1.4 * 255, 0, 255),                math.clamp(self.Theme.Accent.B * 1.4 * 255, 0, 255)            ))        })        highlightGradient.Rotation = 90        highlightGradient.Parent = highlight                -- Create pulsing animation for the highlight        task.spawn(function()            local t = 0            local connection = RunService.RenderStepped:Connect(function(dt)                if not highlight or not highlight.Parent then                    connection:Disconnect()                    return                end                                t = t + dt                highlightGradient.Offset = Vector2.new(0, math.sin(t * 1.5) * 0.2)            end)                        if newTab.Instance then                newTab.Instance.Destroying:Connect(function()                    connection:Disconnect()                end)            end        end)                -- Use the new TabIndicator from our Animations module if it exists
        -- Use pcall to prevent errors if the function doesn't exist
        pcall(function()
            -- Check if we already have a tab indicator
            if not WindowObj.TabIndicator then
                -- Create a new tab indicator
                WindowObj.TabIndicator = VexHub.Animations.CreateTabIndicator(WindowObj.TabList, newTab.Instance)
            else
                -- Update existing tab indicator
                WindowObj.TabIndicator.SetActiveTab(newTab.Instance)
            end
        end)
                -- Make it trackable from anywhere
        self.CurrentTab = tabName
    end
    
    -- Initialize tabs if provided
    for _, tabInfo in ipairs(tabs) do
        WindowObj:AddTab(tabInfo)
    end
    
    table.insert(self.Windows, WindowObj)
    self.ActiveWindow = WindowObj
    
    return WindowObj
end

-- UI Elements

-- Create a section
function VexHub:CreateSection(tab, options)
    options = options or {}
    local title = options.Title or "Section"
    local paddingTop = options.PaddingTop or 5
    local paddingBottom = options.PaddingBottom or 5
    local tabObj = typeof(tab) == "table" and tab or self.ActiveWindow.Tabs[tab]
    
    if not tabObj then
        self:Notification({
            Title = "Error",
            Text = "Tab not found: " .. tostring(tab),
            Type = "Error"
        })
        return nil
    end
    
    local Section = Instance.new("Frame")
    Section.Name = "Section_" .. title
    Section.BackgroundColor3 = self.Theme.Secondary
    Section.BorderSizePixel = 0
    Section.Size = UDim2.new(1, 0, 0, 36)
    Section.AutomaticSize = Enum.AutomaticSize.Y
    Section.Parent = tabObj.Page
    
    local Corner = Instance.new("UICorner")
    Corner.CornerRadius = self.Theme.RoundRadius
    Corner.Parent = Section
    
    local Padding = Instance.new("UIPadding")
    Padding.PaddingLeft = UDim.new(0, 10)
    Padding.PaddingRight = UDim.new(0, 10)
    Padding.PaddingTop = UDim.new(0, paddingTop)
    Padding.PaddingBottom = UDim.new(0, paddingBottom)
    Padding.Parent = Section
    
    local TitleLabel = Instance.new("TextLabel")
    TitleLabel.Name = "Title"
    TitleLabel.BackgroundTransparency = 1
    TitleLabel.Position = UDim2.new(0, 0, 0, 0)
    TitleLabel.Size = UDim2.new(1, 0, 0, 28)
    TitleLabel.Font = self.Theme.FontBold
    TitleLabel.Text = title
    TitleLabel.TextColor3 = self.Theme.Text
    TitleLabel.TextSize = self.Theme.HeaderTextSize
    TitleLabel.TextXAlignment = Enum.TextXAlignment.Left
    TitleLabel.Parent = Section
    
    local ContentFrame = Instance.new("Frame")
    ContentFrame.Name = "Content"
    ContentFrame.BackgroundTransparency = 1
    ContentFrame.BorderSizePixel = 0
    ContentFrame.Position = UDim2.new(0, 0, 0, 32)
    ContentFrame.Size = UDim2.new(1, 0, 0, 0)
    ContentFrame.AutomaticSize = Enum.AutomaticSize.Y
    ContentFrame.Parent = Section
    
    local Layout = Instance.new("UIListLayout")
    Layout.Padding = UDim.new(0, 6)
    Layout.SortOrder = Enum.SortOrder.LayoutOrder
    Layout.Parent = ContentFrame
    
    local Shadow = Instance.new("ImageLabel")
    Shadow.Name = "Shadow"
    Shadow.AnchorPoint = Vector2.new(0.5, 0.5)
    Shadow.BackgroundTransparency = 1
    Shadow.Position = UDim2.new(0.5, 0, 0.5, 0)
    Shadow.Size = UDim2.new(1, 24, 1, 24)
    Shadow.ZIndex = -1
    Shadow.Image = "rbxassetid://6014261993"
    Shadow.ImageColor3 = Color3.fromRGB(0, 0, 0)
    Shadow.ImageTransparency = 0.6
    Shadow.ScaleType = Enum.ScaleType.Slice
    Shadow.SliceCenter = Rect.new(49, 49, 450, 450)
    Shadow.Parent = Section
    
    local SectionObj = {
        Instance = Section,
        Title = TitleLabel,
        Content = ContentFrame,
        Tab = tabObj,
        Elements = {}
    }
    
    tabObj.Elements[title] = SectionObj
    
    return SectionObj
end

-- Create a button
function VexHub:CreateButton(parent, options)
    options = options or {}
    local text = options.Text or "Button"
    local icon = options.Icon
    local callback = options.Callback or function() end
    local tooltip = options.Tooltip
    local rightIcon = options.RightIcon
    
    local parentObj = typeof(parent) == "table" and parent or self.ActiveWindow.Tabs[parent]
    local parentInstance = (typeof(parent) == "table" and parent.Content) or (parentObj and parentObj.Page) or parent
    
    if not parentInstance then
        self:Notification({
            Title = "Error",
            Text = "Parent not found",
            Type = "Error"
        })
        return nil
    end
    
    local Button = Instance.new("TextButton")
    Button.Name = "Button_" .. text
    Button.BackgroundColor3 = self.Theme.Tertiary
    Button.BorderSizePixel = 0
    Button.Size = UDim2.new(1, 0, 0, self.Theme.ElementHeight)
    Button.Font = self.Theme.Font
    Button.Text = ""
    Button.AutoButtonColor = false
    Button.ClipsDescendants = true
    Button.Parent = parentInstance
    
    local Corner = Instance.new("UICorner")
    Corner.CornerRadius = UDim.new(0, 6)
    Corner.Parent = Button
    
    if icon then
        local Icon = Instance.new("ImageLabel")
        Icon.Name = "Icon"
        Icon.BackgroundTransparency = 1
        Icon.Position = UDim2.new(0, 8, 0.5, -10)
        Icon.Size = UDim2.new(0, 20, 0, 20)
        Icon.Image = icon
        Icon.ImageColor3 = self.Theme.Text
        Icon.Parent = Button
        
        local TextLabel = Instance.new("TextLabel")
        TextLabel.Name = "Text"
        TextLabel.BackgroundTransparency = 1
        TextLabel.Position = UDim2.new(0, 36, 0, 0)
        TextLabel.Size = UDim2.new(1, -36, 1, 0)
        TextLabel.Font = self.Theme.Font
        TextLabel.Text = text
        TextLabel.TextColor3 = self.Theme.Text
        TextLabel.TextSize = self.Theme.NormalTextSize
        TextLabel.TextXAlignment = Enum.TextXAlignment.Left
        TextLabel.Parent = Button
    else
        local TextLabel = Instance.new("TextLabel")
        TextLabel.Name = "Text"
        TextLabel.BackgroundTransparency = 1
        TextLabel.Position = UDim2.new(0, 12, 0, 0)
        TextLabel.Size = UDim2.new(1, -24, 1, 0)
        TextLabel.Font = self.Theme.Font
        TextLabel.Text = text
        TextLabel.TextColor3 = self.Theme.Text
        TextLabel.TextSize = self.Theme.NormalTextSize
        TextLabel.TextXAlignment = Enum.TextXAlignment.Left
        TextLabel.Parent = Button
    end
    
    if rightIcon then
        local RightIcon = Instance.new("ImageLabel")
        RightIcon.Name = "RightIcon"
        RightIcon.BackgroundTransparency = 1
        RightIcon.Position = UDim2.new(1, -28, 0.5, -10)
        RightIcon.Size = UDim2.new(0, 20, 0, 20)
        RightIcon.Image = rightIcon
        RightIcon.ImageColor3 = self.Theme.TextDark
        RightIcon.Parent = Button
    end
    
    if tooltip then
        local Tooltip = Instance.new("Frame")
        Tooltip.Name = "Tooltip"
        Tooltip.BackgroundColor3 = self.Theme.Tertiary
        Tooltip.BorderSizePixel = 0
        Tooltip.Position = UDim2.new(1, 10, 0, 0)
        Tooltip.Size = UDim2.new(0, 200, 0, 30)
        Tooltip.Visible = false
        Tooltip.ZIndex = 100
        Tooltip.Parent = Button
        
        local TooltipCorner = Instance.new("UICorner")
        TooltipCorner.CornerRadius = UDim.new(0, 6)
        TooltipCorner.Parent = Tooltip
        
        local TooltipText = Instance.new("TextLabel")
        TooltipText.Name = "Text"
        TooltipText.BackgroundTransparency = 1
        TooltipText.Position = UDim2.new(0, 8, 0, 0)
        TooltipText.Size = UDim2.new(1, -16, 1, 0)
        TooltipText.Font = self.Theme.Font
        TooltipText.Text = tooltip
        TooltipText.TextColor3 = self.Theme.Text
        TooltipText.TextSize = self.Theme.SmallTextSize
        TooltipText.TextWrapped = true
        TooltipText.ZIndex = 100
        TooltipText.Parent = Tooltip
        
        local TooltipShadow = Instance.new("ImageLabel")
        TooltipShadow.Name = "Shadow"
        TooltipShadow.AnchorPoint = Vector2.new(0.5, 0.5)
        TooltipShadow.BackgroundTransparency = 1
        TooltipShadow.Position = UDim2.new(0.5, 0, 0.5, 0)
        TooltipShadow.Size = UDim2.new(1, 24, 1, 24)
        TooltipShadow.ZIndex = 99
        TooltipShadow.Image = "rbxassetid://6014261993"
        TooltipShadow.ImageColor3 = Color3.fromRGB(0, 0, 0)
        TooltipShadow.ImageTransparency = 0.6
        TooltipShadow.ScaleType = Enum.ScaleType.Slice
        TooltipShadow.SliceCenter = Rect.new(49, 49, 450, 450)
        TooltipShadow.Parent = Tooltip
        
        local textSize = Utility:GetTextBounds(tooltip, self.Theme.SmallTextSize, self.Theme.Font, Vector2.new(180, 1000))
        Tooltip.Size = UDim2.new(0, 200, 0, textSize.Y + 16)
        
        Button.MouseEnter:Connect(function()
            Tooltip.Visible = true
        end)
        
        Button.MouseLeave:Connect(function()
            Tooltip.Visible = false
        end)
    end
    
    -- Create a subtle shadow    local Shadow = Instance.new("ImageLabel")    Shadow.Name = "Shadow"    Shadow.AnchorPoint = Vector2.new(0.5, 0.5)    Shadow.BackgroundTransparency = 1    Shadow.Position = UDim2.new(0.5, 0, 0.5, 0)    Shadow.Size = UDim2.new(1, 12, 1, 12)    Shadow.ZIndex = Button.ZIndex - 1    Shadow.Image = "rbxassetid://6014261993"    Shadow.ImageColor3 = Color3.fromRGB(0, 0, 0)    Shadow.ImageTransparency = 0.6    Shadow.ScaleType = Enum.ScaleType.Slice    Shadow.SliceCenter = Rect.new(49, 49, 450, 450)    Shadow.Parent = Button        -- Add a gradient effect    local Gradient = Instance.new("UIGradient")    Gradient.Color = ColorSequence.new({        ColorSequenceKeypoint.new(0, Color3.new(1, 1, 1)),        ColorSequenceKeypoint.new(1, Color3.new(0.9, 0.9, 0.9))    })    Gradient.Rotation = 90    Gradient.Parent = Button        Button.MouseEnter:Connect(function()        -- Animate background color        Utility:CreateTween(Button, {BackgroundColor3 = self.Theme.Secondary}, 0.3, Enum.EasingStyle.Quad):Play()                -- Text color brightening        local textLabel = Button:FindFirstChild("Text")        if textLabel then            Utility:CreateTween(textLabel, {                TextColor3 = self.Theme.TextAccent or self.Theme.Accent            }, 0.3, Enum.EasingStyle.Quad):Play()        end                -- Icon brightening        local iconLabel = Button:FindFirstChild("Icon")        if iconLabel then            Utility:CreateTween(iconLabel, {                ImageColor3 = self.Theme.TextAccent or self.Theme.Accent            }, 0.3, Enum.EasingStyle.Quad):Play()        end                -- Subtle grow effect        Utility:CreateTween(Button, {            Size = UDim2.new(1, 0, 0, self.Theme.ElementHeight + 2),            Position = UDim2.new(0, 0, 0, -1)        }, 0.3, Enum.EasingStyle.Back):Play()                -- Enhance shadow        Utility:CreateTween(Shadow, {            ImageTransparency = 0.5,            Size = UDim2.new(1, 16, 1, 16)        }, 0.3, Enum.EasingStyle.Quad):Play()    end)        Button.MouseLeave:Connect(function()        -- Reset background color        Utility:CreateTween(Button, {            BackgroundColor3 = self.Theme.Tertiary,            Size = UDim2.new(1, 0, 0, self.Theme.ElementHeight),            Position = UDim2.new(0, 0, 0, 0)        }, 0.3, Enum.EasingStyle.Quad):Play()                -- Reset text color        local textLabel = Button:FindFirstChild("Text")        if textLabel then            Utility:CreateTween(textLabel, {                TextColor3 = self.Theme.Text            }, 0.3, Enum.EasingStyle.Quad):Play()        end                -- Reset icon color        local iconLabel = Button:FindFirstChild("Icon")        if iconLabel then            Utility:CreateTween(iconLabel, {                ImageColor3 = self.Theme.Text            }, 0.3, Enum.EasingStyle.Quad):Play()        end                -- Reset shadow        Utility:CreateTween(Shadow, {            ImageTransparency = 0.6,            Size = UDim2.new(1, 12, 1, 12)        }, 0.3, Enum.EasingStyle.Quad):Play()    end)        Button.MouseButton1Down:Connect(function()        -- Scale down effect        Utility:CreateTween(Button, {            Size = UDim2.new(1, 0, 0, self.Theme.ElementHeight - 2),            BackgroundColor3 = self.Theme.DarkAccent        }, 0.2, Enum.EasingStyle.Quad):Play()                -- Create modern ripple effect        local mouse = game:GetService("Players").LocalPlayer:GetMouse()        local mousePos = Vector2.new(mouse.X, mouse.Y) - Button.AbsolutePosition                local ripple = Instance.new("Frame")        ripple.Name = "RippleEffect"        ripple.Parent = Button        ripple.BackgroundColor3 = Color3.new(1, 1, 1)        ripple.BackgroundTransparency = 0.8        ripple.BorderSizePixel = 0        ripple.AnchorPoint = Vector2.new(0.5, 0.5)        ripple.Position = UDim2.new(0, mousePos.X, 0, mousePos.Y)        ripple.Size = UDim2.new(0, 0, 0, 0)        ripple.ZIndex = Button.ZIndex + 2                local rippleCorner = Instance.new("UICorner")        rippleCorner.CornerRadius = UDim.new(1, 0)        rippleCorner.Parent = ripple                local maxSize = math.max(Button.AbsoluteSize.X, Button.AbsoluteSize.Y) * 2                Utility:CreateTween(ripple, {            Size = UDim2.new(0, maxSize, 0, maxSize),            BackgroundTransparency = 1        }, 0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out):Play()                game:GetService("Debris"):AddItem(ripple, 0.5)    end)        Button.MouseButton1Up:Connect(function()        -- Reset to hover state        Utility:CreateTween(Button, {            Size = UDim2.new(1, 0, 0, self.Theme.ElementHeight),            BackgroundColor3 = self.Theme.Secondary        }, 0.2, Enum.EasingStyle.Bounce):Play()    end)
    
    Button.MouseButton1Click:Connect(function()
        pcall(callback)
    end)
    
    local ButtonObj = {
        Instance = Button,
        Text = Button.Text,
        SetText = function(self, newText)
            Button.Text.Text = newText
        end,
        SetCallback = function(self, newCallback)
            callback = newCallback
        end,
        SetIcon = function(self, newIcon)
            if icon then
                Button.Icon.Image = newIcon
            end
        end
    }
    
    if typeof(parent) == "table" and parent.Elements then
        parent.Elements[text] = ButtonObj
    end
    
    return ButtonObj
end

-- Create a toggle
function VexHub:CreateToggle(parent, options)
    options = options or {}
    local text = options.Text or "Toggle"
    local default = options.Default or false
    local callback = options.Callback or function() end
    local tooltip = options.Tooltip
    
    local parentObj = typeof(parent) == "table" and parent or self.ActiveWindow.Tabs[parent]
    local parentInstance = (typeof(parent) == "table" and parent.Content) or (parentObj and parentObj.Page) or parent
    
    if not parentInstance then
        self:Notification({
            Title = "Error",
            Text = "Parent not found",
            Type = "Error"
        })
        return nil
    end
    
            local Toggle = Instance.new("Frame")    Toggle.Name = "Toggle_" .. text    Toggle.BackgroundColor3 = self.Theme.Tertiary    Toggle.BorderSizePixel = 0    Toggle.Size = UDim2.new(1, 0, 0, self.Theme.ElementHeight)    Toggle.ClipsDescendants = true    Toggle.Parent = parentInstance        local Corner = Instance.new("UICorner")    Corner.CornerRadius = UDim.new(0, 6)    Corner.Parent = Toggle        -- Add subtle shadow    local Shadow = Instance.new("ImageLabel")    Shadow.Name = "Shadow"    Shadow.AnchorPoint = Vector2.new(0.5, 0.5)    Shadow.BackgroundTransparency = 1    Shadow.Position = UDim2.new(0.5, 0, 0.5, 0)    Shadow.Size = UDim2.new(1, 10, 1, 10)    Shadow.ZIndex = Toggle.ZIndex - 1    Shadow.Image = "rbxassetid://6014261993"    Shadow.ImageColor3 = Color3.fromRGB(0, 0, 0)    Shadow.ImageTransparency = 0.6    Shadow.ScaleType = Enum.ScaleType.Slice    Shadow.SliceCenter = Rect.new(49, 49, 450, 450)    Shadow.Parent = Toggle
    
    local TextLabel = Instance.new("TextLabel")
    TextLabel.Name = "Text"
    TextLabel.BackgroundTransparency = 1
    TextLabel.Position = UDim2.new(0, 12, 0, 0)
    TextLabel.Size = UDim2.new(1, -60, 1, 0)
    TextLabel.Font = self.Theme.Font
    TextLabel.Text = text
    TextLabel.TextColor3 = self.Theme.Text
    TextLabel.TextSize = self.Theme.NormalTextSize
    TextLabel.TextXAlignment = Enum.TextXAlignment.Left
    TextLabel.Parent = Toggle
    
    local ToggleButton = Instance.new("TextButton")
    ToggleButton.Name = "ToggleButton"
    ToggleButton.BackgroundColor3 = self.Theme.Secondary
    ToggleButton.BorderSizePixel = 0
    ToggleButton.Position = UDim2.new(1, -48, 0.5, -10)
    ToggleButton.Size = UDim2.new(0, 36, 0, 20)
    ToggleButton.Text = ""
    ToggleButton.AutoButtonColor = false
    ToggleButton.Parent = Toggle
    
    local ToggleCorner = Instance.new("UICorner")
    ToggleCorner.CornerRadius = UDim.new(1, 0)
    ToggleCorner.Parent = ToggleButton
    
    local Indicator = Instance.new("Frame")
    Indicator.Name = "Indicator"
    Indicator.BackgroundColor3 = self.Theme.Text
    Indicator.BorderSizePixel = 0
    Indicator.Position = UDim2.new(0, 2, 0.5, -8)
    Indicator.Size = UDim2.new(0, 16, 0, 16)
    Indicator.Parent = ToggleButton
    
    local IndicatorCorner = Instance.new("UICorner")
    IndicatorCorner.CornerRadius = UDim.new(1, 0)
    IndicatorCorner.Parent = Indicator
    
    if tooltip then
        local Tooltip = Instance.new("Frame")
        Tooltip.Name = "Tooltip"
        Tooltip.BackgroundColor3 = self.Theme.Tertiary
        Tooltip.BorderSizePixel = 0
        Tooltip.Position = UDim2.new(1, 10, 0, 0)
        Tooltip.Size = UDim2.new(0, 200, 0, 30)
        Tooltip.Visible = false
        Tooltip.ZIndex = 100
        Tooltip.Parent = Toggle
        
        local TooltipCorner = Instance.new("UICorner")
        TooltipCorner.CornerRadius = UDim.new(0, 6)
        TooltipCorner.Parent = Tooltip
        
        local TooltipText = Instance.new("TextLabel")
        TooltipText.Name = "Text"
        TooltipText.BackgroundTransparency = 1
        TooltipText.Position = UDim2.new(0, 8, 0, 0)
        TooltipText.Size = UDim2.new(1, -16, 1, 0)
        TooltipText.Font = self.Theme.Font
        TooltipText.Text = tooltip
        TooltipText.TextColor3 = self.Theme.Text
        TooltipText.TextSize = self.Theme.SmallTextSize
        TooltipText.TextWrapped = true
        TooltipText.ZIndex = 100
        TooltipText.Parent = Tooltip
        
        local TooltipShadow = Instance.new("ImageLabel")
        TooltipShadow.Name = "Shadow"
        TooltipShadow.AnchorPoint = Vector2.new(0.5, 0.5)
        TooltipShadow.BackgroundTransparency = 1
        TooltipShadow.Position = UDim2.new(0.5, 0, 0.5, 0)
        TooltipShadow.Size = UDim2.new(1, 24, 1, 24)
        TooltipShadow.ZIndex = 99
        TooltipShadow.Image = "rbxassetid://6014261993"
        TooltipShadow.ImageColor3 = Color3.fromRGB(0, 0, 0)
        TooltipShadow.ImageTransparency = 0.6
        TooltipShadow.ScaleType = Enum.ScaleType.Slice
        TooltipShadow.SliceCenter = Rect.new(49, 49, 450, 450)
        TooltipShadow.Parent = Tooltip
        
        local textSize = Utility:GetTextBounds(tooltip, self.Theme.SmallTextSize, self.Theme.Font, Vector2.new(180, 1000))
        Tooltip.Size = UDim2.new(0, 200, 0, textSize.Y + 16)
        
        Toggle.MouseEnter:Connect(function()
            Tooltip.Visible = true
        end)
        
        Toggle.MouseLeave:Connect(function()
            Tooltip.Visible = false
        end)
    end
    
    local toggled = default
    
    local function updateToggle()
        if toggled then
            Utility:CreateTween(ToggleButton, {BackgroundColor3 = self.Theme.Accent}):Play()
            Utility:CreateTween(Indicator, {Position = UDim2.new(1, -18, 0.5, -8)}):Play()
        else
            Utility:CreateTween(ToggleButton, {BackgroundColor3 = self.Theme.Secondary}):Play()
            Utility:CreateTween(Indicator, {Position = UDim2.new(0, 2, 0.5, -8)}):Play()
        end
    end
    
    updateToggle()
    
    Toggle.MouseEnter:Connect(function()
        Utility:CreateTween(Toggle, {BackgroundColor3 = self.Theme.Secondary}):Play()
    end)
    
    Toggle.MouseLeave:Connect(function()
        Utility:CreateTween(Toggle, {BackgroundColor3 = self.Theme.Tertiary}):Play()
    end)
    
    ToggleButton.MouseButton1Click:Connect(function()
        toggled = not toggled
        updateToggle()
        pcall(callback, toggled)
    end)
    
    Toggle.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            toggled = not toggled
            updateToggle()
            pcall(callback, toggled)
        end
    end)
    
    local ToggleObj = {
        Instance = Toggle,
        Text = TextLabel,
        Button = ToggleButton,
        Toggled = toggled,
        SetValue = function(self, value)
            toggled = value
            updateToggle()
            pcall(callback, toggled)
        end,
        GetValue = function(self)
            return toggled
        end,
        Toggle = function(self)
            toggled = not toggled
            updateToggle()
            pcall(callback, toggled)
            return toggled
        end,
        SetText = function(self, newText)
            TextLabel.Text = newText
        end
    }
    
    if typeof(parent) == "table" and parent.Elements then
        parent.Elements[text] = ToggleObj
    end
    
    return ToggleObj
end

-- Create a label
function VexHub:CreateLabel(parent, options)
    options = options or {}
    local text = options.Text or "Label"
    local centered = options.Centered or false
    local textColor = options.TextColor or self.Theme.Text
    local textSize = options.TextSize or self.Theme.NormalTextSize
    
    local parentObj = typeof(parent) == "table" and parent or self.ActiveWindow.Tabs[parent]
    local parentInstance = (typeof(parent) == "table" and parent.Content) or (parentObj and parentObj.Page) or parent
    
    if not parentInstance then
        self:Notification({
            Title = "Error",
            Text = "Parent not found",
            Type = "Error"
        })
        return nil
    end
    
    local Label = Instance.new("Frame")
    Label.Name = "Label_" .. text:sub(1, math.min(20, #text))
    Label.BackgroundTransparency = 1
    Label.BorderSizePixel = 0
    Label.Size = UDim2.new(1, 0, 0, 30)
    Label.Parent = parentInstance
    
    local TextLabel = Instance.new("TextLabel")
    TextLabel.Name = "Text"
    TextLabel.BackgroundTransparency = 1
    TextLabel.Position = UDim2.new(0, 10, 0, 0)
    TextLabel.Size = UDim2.new(1, -20, 1, 0)
    TextLabel.Font = self.Theme.Font
    TextLabel.Text = text
    TextLabel.TextColor3 = textColor
    TextLabel.TextSize = textSize
    TextLabel.TextWrapped = true
    TextLabel.TextXAlignment = centered and Enum.TextXAlignment.Center or Enum.TextXAlignment.Left
    TextLabel.Parent = Label
    
    -- Adjust frame height based on text size
    local textSize = Utility:GetTextBounds(text, textSize, self.Theme.Font, Vector2.new(Label.AbsoluteSize.X - 20, 1000))
    Label.Size = UDim2.new(1, 0, 0, textSize.Y + 10)
    
    local LabelObj = {
        Instance = Label,
        Text = TextLabel,
        SetText = function(self, newText)
            TextLabel.Text = newText
            local textSize = Utility:GetTextBounds(newText, TextLabel.TextSize, self.Theme.Font, Vector2.new(Label.AbsoluteSize.X - 20, 1000))
            Label.Size = UDim2.new(1, 0, 0, textSize.Y + 10)
        end,
        SetTextColor = function(self, color)
            TextLabel.TextColor3 = color
        end
    }
    
    if typeof(parent) == "table" and parent.Elements then
        parent.Elements[text] = LabelObj
    end
    
    return LabelObj
end

-- Create a slider
function VexHub:CreateSlider(parent, options)
    options = options or {}
    local text = options.Text or "Slider"
    local min = options.Min or 0
    local max = options.Max or 100
    local default = math.clamp(options.Default or min, min, max)
    local increment = options.Increment or 1
    local suffix = options.Suffix or ""
    local callback = options.Callback or function() end
    local tooltip = options.Tooltip
    
    local parentObj = typeof(parent) == "table" and parent or self.ActiveWindow.Tabs[parent]
    local parentInstance = (typeof(parent) == "table" and parent.Content) or (parentObj and parentObj.Page) or parent
    
    if not parentInstance then
        self:Notification({
            Title = "Error",
            Text = "Parent not found",
            Type = "Error"
        })
        return nil
    end
    
    local Slider = Instance.new("Frame")
    Slider.Name = "Slider_" .. text
    Slider.BackgroundColor3 = self.Theme.Tertiary
    Slider.BorderSizePixel = 0
    Slider.Size = UDim2.new(1, 0, 0, 50)
    Slider.Parent = parentInstance
    
    local Corner = Instance.new("UICorner")
    Corner.CornerRadius = UDim.new(0, 6)
    Corner.Parent = Slider
    
    local TextLabel = Instance.new("TextLabel")
    TextLabel.Name = "Text"
    TextLabel.BackgroundTransparency = 1
    TextLabel.Position = UDim2.new(0, 12, 0, 2)
    TextLabel.Size = UDim2.new(1, -24, 0, 24)
    TextLabel.Font = self.Theme.Font
    TextLabel.Text = text
    TextLabel.TextColor3 = self.Theme.Text
    TextLabel.TextSize = self.Theme.NormalTextSize
    TextLabel.TextXAlignment = Enum.TextXAlignment.Left
    TextLabel.Parent = Slider
    
    local ValueLabel = Instance.new("TextLabel")
    ValueLabel.Name = "Value"
    ValueLabel.BackgroundTransparency = 1
    ValueLabel.Position = UDim2.new(1, -70, 0, 2)
    ValueLabel.Size = UDim2.new(0, 60, 0, 24)
    ValueLabel.Font = self.Theme.Font
    ValueLabel.Text = tostring(default) .. suffix
    ValueLabel.TextColor3 = self.Theme.TextDark
    ValueLabel.TextSize = self.Theme.NormalTextSize
    ValueLabel.TextXAlignment = Enum.TextXAlignment.Right
    ValueLabel.Parent = Slider
    
    local SliderBG = Instance.new("Frame")
    SliderBG.Name = "SliderBG"
    SliderBG.BackgroundColor3 = self.Theme.Secondary
    SliderBG.BorderSizePixel = 0
    SliderBG.Position = UDim2.new(0, 12, 0, 32)
    SliderBG.Size = UDim2.new(1, -24, 0, 8)
    SliderBG.Parent = Slider
    
    local SliderFill = Instance.new("Frame")
    SliderFill.Name = "SliderFill"
    SliderFill.BackgroundColor3 = self.Theme.Accent
    SliderFill.BorderSizePixel = 0
    SliderFill.Size = UDim2.new((default - min) / (max - min), 0, 1, 0)
    SliderFill.Parent = SliderBG
    
    local BGCorner = Instance.new("UICorner")
    BGCorner.CornerRadius = UDim.new(1, 0)
    BGCorner.Parent = SliderBG
    
    local FillCorner = Instance.new("UICorner")
    FillCorner.CornerRadius = UDim.new(1, 0)
    FillCorner.Parent = SliderFill
    
    local Handle = Instance.new("Frame")
    Handle.Name = "Handle"
    Handle.AnchorPoint = Vector2.new(0.5, 0.5)
    Handle.BackgroundColor3 = self.Theme.Text
    Handle.BorderSizePixel = 0
    Handle.Position = UDim2.new((default - min) / (max - min), 0, 0.5, 0)
    Handle.Size = UDim2.new(0, 12, 0, 12)
    Handle.ZIndex = 2
    Handle.Parent = SliderBG
    
    local HandleCorner = Instance.new("UICorner")
    HandleCorner.CornerRadius = UDim.new(1, 0)
    HandleCorner.Parent = Handle
    
    if tooltip then
        local Tooltip = Instance.new("Frame")
        Tooltip.Name = "Tooltip"
        Tooltip.BackgroundColor3 = self.Theme.Tertiary
        Tooltip.BorderSizePixel = 0
        Tooltip.Position = UDim2.new(1, 10, 0, 0)
        Tooltip.Size = UDim2.new(0, 200, 0, 30)
        Tooltip.Visible = false
        Tooltip.ZIndex = 100
        Tooltip.Parent = Slider
        
        local TooltipCorner = Instance.new("UICorner")
        TooltipCorner.CornerRadius = UDim.new(0, 6)
        TooltipCorner.Parent = Tooltip
        
        local TooltipText = Instance.new("TextLabel")
        TooltipText.Name = "Text"
        TooltipText.BackgroundTransparency = 1
        TooltipText.Position = UDim2.new(0, 8, 0, 0)
        TooltipText.Size = UDim2.new(1, -16, 1, 0)
        TooltipText.Font = self.Theme.Font
        TooltipText.Text = tooltip
        TooltipText.TextColor3 = self.Theme.Text
        TooltipText.TextSize = self.Theme.SmallTextSize
        TooltipText.TextWrapped = true
        TooltipText.ZIndex = 100
        TooltipText.Parent = Tooltip
        
        local TooltipShadow = Instance.new("ImageLabel")
        TooltipShadow.Name = "Shadow"
        TooltipShadow.AnchorPoint = Vector2.new(0.5, 0.5)
        TooltipShadow.BackgroundTransparency = 1
        TooltipShadow.Position = UDim2.new(0.5, 0, 0.5, 0)
        TooltipShadow.Size = UDim2.new(1, 24, 1, 24)
        TooltipShadow.ZIndex = 99
        TooltipShadow.Image = "rbxassetid://6014261993"
        TooltipShadow.ImageColor3 = Color3.fromRGB(0, 0, 0)
        TooltipShadow.ImageTransparency = 0.6
        TooltipShadow.ScaleType = Enum.ScaleType.Slice
        TooltipShadow.SliceCenter = Rect.new(49, 49, 450, 450)
        TooltipShadow.Parent = Tooltip
        
        local textSize = Utility:GetTextBounds(tooltip, self.Theme.SmallTextSize, self.Theme.Font, Vector2.new(180, 1000))
        Tooltip.Size = UDim2.new(0, 200, 0, textSize.Y + 16)
        
        Slider.MouseEnter:Connect(function()
            Tooltip.Visible = true
        end)
        
        Slider.MouseLeave:Connect(function()
            Tooltip.Visible = false
        end)
    end
    
    local value = default
    
    local function set(newValue, fromSlider)
        value = math.clamp(newValue, min, max)
        
        -- Apply increment if needed
        if increment > 0 then
            value = math.floor((value - min) / increment + 0.5) * increment + min
            value = Utility:Round(value, 2) -- Fix floating point issues
        end
        
        -- Update UI
        ValueLabel.Text = tostring(value) .. suffix
        local percent = (value - min) / (max - min)
        
        if fromSlider then
            Utility:CreateTween(SliderFill, {Size = UDim2.new(percent, 0, 1, 0)}):Play()
            Utility:CreateTween(Handle, {Position = UDim2.new(percent, 0, 0.5, 0)}):Play()
        else
            SliderFill.Size = UDim2.new(percent, 0, 1, 0)
            Handle.Position = UDim2.new(percent, 0, 0.5, 0)
        end
        
        pcall(callback, value)
        return value
    end
    
    set(default)
    
    Slider.MouseEnter:Connect(function()
        Utility:CreateTween(Slider, {BackgroundColor3 = self.Theme.Secondary}):Play()
    end)
    
    Slider.MouseLeave:Connect(function()
        Utility:CreateTween(Slider, {BackgroundColor3 = self.Theme.Tertiary}):Play()
    end)
    
    -- Slider functionality
    local isDragging = false
    
    SliderBG.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            isDragging = true
            
            local function update()
                local mouseX = UserInputService:GetMouseLocation().X
                local sliderPos = SliderBG.AbsolutePosition.X
                local sliderWidth = SliderBG.AbsoluteSize.X
                local percent = math.clamp((mouseX - sliderPos) / sliderWidth, 0, 1)
                local newValue = min + (max - min) * percent
                set(newValue, true)
            end
            
            update()
            
            local connection
            connection = RunService.RenderStepped:Connect(function()
                if isDragging then
                    update()
                else
                    connection:Disconnect()
                end
            end)
        end
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            isDragging = false
        end
    end)
    
    local SliderObj = {
        Instance = Slider,
        Text = TextLabel,
        Value = ValueLabel,
        Handle = Handle,
        Fill = SliderFill,
        SetValue = function(self, newValue)
            return set(newValue, true)
        end,
        GetValue = function(self)
            return value
        end,
        SetText = function(self, newText)
            TextLabel.Text = newText
        end
    }
    
    if typeof(parent) == "table" and parent.Elements then
        parent.Elements[text] = SliderObj
    end
    
    return SliderObj
end

-- Create a dropdown
function VexHub:CreateDropdown(parent, options)
    options = options or {}
    local text = options.Text or "Dropdown"
    local items = options.Items or {}
    local default = options.Default or (items[1] or "")
    local multiSelect = options.MultiSelect or false
    local callback = options.Callback or function() end
    local tooltip = options.Tooltip
    
    local parentObj = typeof(parent) == "table" and parent or self.ActiveWindow.Tabs[parent]
    local parentInstance = (typeof(parent) == "table" and parent.Content) or (parentObj and parentObj.Page) or parent
    
    if not parentInstance then
        self:Notification({
            Title = "Error",
            Text = "Parent not found",
            Type = "Error"
        })
        return nil
    end
    
    local Dropdown = Instance.new("Frame")
    Dropdown.Name = "Dropdown_" .. text
    Dropdown.BackgroundColor3 = self.Theme.Tertiary
    Dropdown.BorderSizePixel = 0
    Dropdown.ClipsDescendants = true
    Dropdown.Size = UDim2.new(1, 0, 0, self.Theme.ElementHeight)
    Dropdown.Parent = parentInstance
    
    local Corner = Instance.new("UICorner")
    Corner.CornerRadius = UDim.new(0, 6)
    Corner.Parent = Dropdown
    
    local TextLabel = Instance.new("TextLabel")
    TextLabel.Name = "Text"
    TextLabel.BackgroundTransparency = 1
    TextLabel.Position = UDim2.new(0, 12, 0, 0)
    TextLabel.Size = UDim2.new(1, -40, 0, self.Theme.ElementHeight)
    TextLabel.Font = self.Theme.Font
    TextLabel.Text = text
    TextLabel.TextColor3 = self.Theme.Text
    TextLabel.TextSize = self.Theme.NormalTextSize
    TextLabel.TextXAlignment = Enum.TextXAlignment.Left
    TextLabel.Parent = Dropdown
    
    local Selected = Instance.new("TextLabel")
    Selected.Name = "Selected"
    Selected.BackgroundTransparency = 1
    Selected.Position = UDim2.new(0, 12, 0, self.Theme.ElementHeight)
    Selected.Size = UDim2.new(1, -40, 0, self.Theme.ElementHeight)
    Selected.Font = self.Theme.Font
    Selected.TextColor3 = self.Theme.TextDark
    Selected.TextSize = self.Theme.NormalTextSize
    Selected.TextXAlignment = Enum.TextXAlignment.Left
    Selected.Parent = Dropdown
    
    local Icon = Instance.new("ImageLabel")
    Icon.Name = "Icon"
    Icon.BackgroundTransparency = 1
    Icon.Position = UDim2.new(1, -30, 0, 8)
    Icon.Size = UDim2.new(0, 20, 0, 20)
    Icon.Image = self.DefaultIcons.ArrowDown
    Icon.ImageColor3 = self.Theme.TextDark
    Icon.Parent = Dropdown
    
    local DropFrame = Instance.new("Frame")
    DropFrame.Name = "DropFrame"
    DropFrame.BackgroundColor3 = self.Theme.Secondary
    DropFrame.BorderSizePixel = 0
    DropFrame.Position = UDim2.new(0, 0, 0, self.Theme.ElementHeight)
    DropFrame.Size = UDim2.new(1, 0, 0, 0) -- Will be expanded when opened
    DropFrame.Parent = Dropdown
    
    local DropFrameCorner = Instance.new("UICorner")
    DropFrameCorner.CornerRadius = UDim.new(0, 6)
    DropFrameCorner.Parent = DropFrame
    
    local ItemList = Instance.new("ScrollingFrame")
    ItemList.Name = "ItemList"
    ItemList.BackgroundTransparency = 1
    ItemList.BorderSizePixel = 0
    ItemList.Selectable = false
    ItemList.Size = UDim2.new(1, 0, 1, 0)
    ItemList.CanvasSize = UDim2.new(0, 0, 0, 0)
    ItemList.AutomaticCanvasSize = Enum.AutomaticSize.Y
    ItemList.ScrollBarThickness = 2
    ItemList.ScrollBarImageColor3 = self.Theme.DarkAccent
    ItemList.Parent = DropFrame
    
    local ListLayout = Instance.new("UIListLayout")
    ListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    ListLayout.Parent = ItemList
    
    if tooltip then
        local Tooltip = Instance.new("Frame")
        Tooltip.Name = "Tooltip"
        Tooltip.BackgroundColor3 = self.Theme.Tertiary
        Tooltip.BorderSizePixel = 0
        Tooltip.Position = UDim2.new(1, 10, 0, 0)
        Tooltip.Size = UDim2.new(0, 200, 0, 30)
        Tooltip.Visible = false
        Tooltip.ZIndex = 100
        Tooltip.Parent = Dropdown
        
        local TooltipCorner = Instance.new("UICorner")
        TooltipCorner.CornerRadius = UDim.new(0, 6)
        TooltipCorner.Parent = Tooltip
        
        local TooltipText = Instance.new("TextLabel")
        TooltipText.Name = "Text"
        TooltipText.BackgroundTransparency = 1
        TooltipText.Position = UDim2.new(0, 8, 0, 0)
        TooltipText.Size = UDim2.new(1, -16, 1, 0)
        TooltipText.Font = self.Theme.Font
        TooltipText.Text = tooltip
        TooltipText.TextColor3 = self.Theme.Text
        TooltipText.TextSize = self.Theme.SmallTextSize
        TooltipText.TextWrapped = true
        TooltipText.ZIndex = 100
        TooltipText.Parent = Tooltip
        
        local TooltipShadow = Instance.new("ImageLabel")
        TooltipShadow.Name = "Shadow"
        TooltipShadow.AnchorPoint = Vector2.new(0.5, 0.5)
        TooltipShadow.BackgroundTransparency = 1
        TooltipShadow.Position = UDim2.new(0.5, 0, 0.5, 0)
        TooltipShadow.Size = UDim2.new(1, 24, 1, 24)
        TooltipShadow.ZIndex = 99
        TooltipShadow.Image = "rbxassetid://6014261993"
        TooltipShadow.ImageColor3 = Color3.fromRGB(0, 0, 0)
        TooltipShadow.ImageTransparency = 0.6
        TooltipShadow.ScaleType = Enum.ScaleType.Slice
        TooltipShadow.SliceCenter = Rect.new(49, 49, 450, 450)
        TooltipShadow.Parent = Tooltip
        
        local textSize = Utility:GetTextBounds(tooltip, self.Theme.SmallTextSize, self.Theme.Font, Vector2.new(180, 1000))
        Tooltip.Size = UDim2.new(0, 200, 0, textSize.Y + 16)
        
        Dropdown.MouseEnter:Connect(function()
            Tooltip.Visible = true
        end)
        
        Dropdown.MouseLeave:Connect(function()
            Tooltip.Visible = false
        end)
    end
    
    local isOpen = false
    local selectedItems = {}
    
    if multiSelect then
        if typeof(default) == "table" then
            for _, item in ipairs(default) do
                if table.find(items, item) then
                    selectedItems[item] = true
                end
            end
        elseif table.find(items, default) then
            selectedItems[default] = true
        end
    else
        if table.find(items, default) then
            selectedItems[default] = true
        elseif #items > 0 then
            selectedItems[items[1]] = true
        end
    end
    
    local function updateSelectedText()
        if multiSelect then
            local selected = {}
            for item, _ in pairs(selectedItems) do
                table.insert(selected, item)
            end
            
            if #selected == 0 then
                Selected.Text = "None"
            elseif #selected <= 2 then
                Selected.Text = table.concat(selected, ", ")
            else
                Selected.Text = selected[1] .. ", " .. selected[2] .. " (+" .. (#selected - 2) .. ")"
            end
        else
            for item, _ in pairs(selectedItems) do
                Selected.Text = item
                return
            end
            Selected.Text = "None"
        end
    end
    
    local function clearItems()
        for _, child in ipairs(ItemList:GetChildren()) do
            if child:IsA("TextButton") then
                child:Destroy()
            end
        end
    end
    
    local function createItems()
        clearItems()
        
        for i, item in ipairs(items) do
            local ItemButton = Instance.new("TextButton")
            ItemButton.Name = "Item_" .. item
            ItemButton.BackgroundTransparency = 1
            ItemButton.Size = UDim2.new(1, 0, 0, self.Theme.ElementHeight)
            ItemButton.Font = self.Theme.Font
            ItemButton.Text = item
            ItemButton.TextColor3 = selectedItems[item] and self.Theme.Accent or self.Theme.Text
            ItemButton.TextSize = self.Theme.NormalTextSize
            ItemButton.Parent = ItemList
            
            ItemButton.MouseEnter:Connect(function()
                ItemButton.BackgroundTransparency = 0.9
            end)
            
            ItemButton.MouseLeave:Connect(function()
                ItemButton.BackgroundTransparency = 1
            end)
            
            ItemButton.MouseButton1Click:Connect(function()
                if multiSelect then
                    selectedItems[item] = not selectedItems[item]
                    ItemButton.TextColor3 = selectedItems[item] and self.Theme.Accent or self.Theme.Text
                else
                    selectedItems = {}
                    selectedItems[item] = true
                    
                    for _, btn in ipairs(ItemList:GetChildren()) do
                        if btn:IsA("TextButton") then
                            btn.TextColor3 = (btn.Text == item) and self.Theme.Accent or self.Theme.Text
                        end
                    end
                    
                    -- Close the dropdown after selection if not multi-select
                    isOpen = false
                    local closeTween = Utility:CreateTween(DropFrame, {Size = UDim2.new(1, 0, 0, 0)}, 0.3, Enum.EasingStyle.Quint)
                    closeTween:Play()
                    
                    closeTween.Completed:Connect(function()
                        local iconRotate = Utility:CreateTween(Icon, {Rotation = 0}, 0.3, Enum.EasingStyle.Quint)
                        iconRotate:Play()
                    end)
                    
                    Dropdown.Size = UDim2.new(1, 0, 0, self.Theme.ElementHeight)
                end
                
                updateSelectedText()
                
                local selectedArray = {}
                for selectedItem, _ in pairs(selectedItems) do
                    table.insert(selectedArray, selectedItem)
                end
                
                if multiSelect then
                    pcall(callback, selectedArray)
                else
                    pcall(callback, selectedArray[1])
                end
            end)
        end
        
        updateSelectedText()
    end
    
    createItems()
    
    Dropdown.MouseEnter:Connect(function()
        Utility:CreateTween(Dropdown, {BackgroundColor3 = self.Theme.Secondary}):Play()
    end)
    
    Dropdown.MouseLeave:Connect(function()
        Utility:CreateTween(Dropdown, {BackgroundColor3 = self.Theme.Tertiary}):Play()
    end)
    
    Dropdown.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 and not isOpen then
            isOpen = true
            
            local maxHeight = math.min(#items * self.Theme.ElementHeight, 150)
            local sizeTween = Utility:CreateTween(DropFrame, {Size = UDim2.new(1, 0, 0, maxHeight)}, 0.3, Enum.EasingStyle.Quint)
            local dropdownTween = Utility:CreateTween(Dropdown, {Size = UDim2.new(1, 0, 0, self.Theme.ElementHeight + maxHeight)}, 0.3, Enum.EasingStyle.Quint)
            local iconRotate = Utility:CreateTween(Icon, {Rotation = 180}, 0.3, Enum.EasingStyle.Quint)
            
            sizeTween:Play()
            dropdownTween:Play()
            iconRotate:Play()
        elseif input.UserInputType == Enum.UserInputType.MouseButton1 and isOpen and not DropFrame:IsDescendantOf(input.Target) then
            isOpen = false
            
            local closeTween = Utility:CreateTween(DropFrame, {Size = UDim2.new(1, 0, 0, 0)}, 0.3, Enum.EasingStyle.Quint)
            local dropdownTween = Utility:CreateTween(Dropdown, {Size = UDim2.new(1, 0, 0, self.Theme.ElementHeight)}, 0.3, Enum.EasingStyle.Quint)
            local iconRotate = Utility:CreateTween(Icon, {Rotation = 0}, 0.3, Enum.EasingStyle.Quint)
            
            closeTween:Play()
            dropdownTween:Play()
            iconRotate:Play()
        end
    end)
    
    local DropdownObj = {
        Instance = Dropdown,
        Text = TextLabel,
        Selected = Selected,
        ItemList = ItemList,
        Items = items,
        SelectedItems = selectedItems,
        Refresh = function(self, newItems)
            items = newItems or items
            createItems()
        end,
        SetValue = function(self, value)
            if multiSelect and typeof(value) == "table" then
                selectedItems = {}
                for _, item in ipairs(value) do
                    if table.find(items, item) then
                        selectedItems[item] = true
                    end
                end
            elseif not multiSelect and table.find(items, value) then
                selectedItems = {}
                selectedItems[value] = true
            end
            
            createItems()
            
            local selectedArray = {}
            for selectedItem, _ in pairs(selectedItems) do
                table.insert(selectedArray, selectedItem)
            end
            
            if multiSelect then
                pcall(callback, selectedArray)
            else
                pcall(callback, selectedArray[1])
            end
        end,
        GetValue = function(self)
            local selectedArray = {}
            for selectedItem, _ in pairs(selectedItems) do
                table.insert(selectedArray, selectedItem)
            end
            
            return multiSelect and selectedArray or (selectedArray[1] or "")
        end,
        AddItem = function(self, item)
            if not table.find(items, item) then
                table.insert(items, item)
                createItems()
            end
        end,
        RemoveItem = function(self, item)
            local index = table.find(items, item)
            if index then
                table.remove(items, index)
                if selectedItems[item] then
                    selectedItems[item] = nil
                end
                createItems()
            end
        end,
        Clear = function(self)
            items = {}
            selectedItems = {}
            createItems()
        end
    }
    
    if typeof(parent) == "table" and parent.Elements then
        parent.Elements[text] = DropdownObj
    end
    
    return DropdownObj
end

-- Create a textbox
function VexHub:CreateTextbox(parent, options)
    options = options or {}
    local text = options.Text or "Textbox"
    local placeholder = options.Placeholder or "Enter text..."
    local default = options.Default or ""
    local clearOnFocus = options.ClearOnFocus ~= nil and options.ClearOnFocus or true
    local callback = options.Callback or function() end
    local tooltip = options.Tooltip
    
    local parentObj = typeof(parent) == "table" and parent or self.ActiveWindow.Tabs[parent]
    local parentInstance = (typeof(parent) == "table" and parent.Content) or (parentObj and parentObj.Page) or parent
    
    if not parentInstance then
        self:Notification({
            Title = "Error",
            Text = "Parent not found",
            Type = "Error"
        })
        return nil
    end
    
    local Textbox = Instance.new("Frame")
    Textbox.Name = "Textbox_" .. text
    Textbox.BackgroundColor3 = self.Theme.Tertiary
    Textbox.BorderSizePixel = 0
    Textbox.Size = UDim2.new(1, 0, 0, self.Theme.ElementHeight + 8)
    Textbox.Parent = parentInstance
    
    local Corner = Instance.new("UICorner")
    Corner.CornerRadius = UDim.new(0, 6)
    Corner.Parent = Textbox
    
    local TextLabel = Instance.new("TextLabel")
    TextLabel.Name = "Text"
    TextLabel.BackgroundTransparency = 1
    TextLabel.Position = UDim2.new(0, 12, 0, 0)
    TextLabel.Size = UDim2.new(1, -24, 0, 24)
    TextLabel.Font = self.Theme.Font
    TextLabel.Text = text
    TextLabel.TextColor3 = self.Theme.Text
    TextLabel.TextSize = self.Theme.NormalTextSize
    TextLabel.TextXAlignment = Enum.TextXAlignment.Left
    TextLabel.Parent = Textbox
    
    local InputField = Instance.new("Frame")
    InputField.Name = "InputField"
    InputField.BackgroundColor3 = self.Theme.Secondary
    InputField.BorderSizePixel = 0
    InputField.Position = UDim2.new(0, 12, 0, 26)
    InputField.Size = UDim2.new(1, -24, 0, 30)
    InputField.Parent = Textbox
    
    local InputCorner = Instance.new("UICorner")
    InputCorner.CornerRadius = UDim.new(0, 6)
    InputCorner.Parent = InputField
    
    local InputBox = Instance.new("TextBox")
    InputBox.Name = "Input"
    InputBox.BackgroundTransparency = 1
    InputBox.Position = UDim2.new(0, 10, 0, 0)
    InputBox.Size = UDim2.new(1, -20, 1, 0)
    InputBox.Font = self.Theme.Font
    InputBox.PlaceholderText = placeholder
    InputBox.Text = default
    InputBox.TextColor3 = self.Theme.Text
    InputBox.PlaceholderColor3 = self.Theme.TextDark
    InputBox.TextSize = self.Theme.NormalTextSize
    InputBox.TextXAlignment = Enum.TextXAlignment.Left
    InputBox.ClearTextOnFocus = clearOnFocus
    InputBox.Parent = InputField
    
    if tooltip then
        local Tooltip = Instance.new("Frame")
        Tooltip.Name = "Tooltip"
        Tooltip.BackgroundColor3 = self.Theme.Tertiary
        Tooltip.BorderSizePixel = 0
        Tooltip.Position = UDim2.new(1, 10, 0, 0)
        Tooltip.Size = UDim2.new(0, 200, 0, 30)
        Tooltip.Visible = false
        Tooltip.ZIndex = 100
        Tooltip.Parent = Textbox
        
        local TooltipCorner = Instance.new("UICorner")
        TooltipCorner.CornerRadius = UDim.new(0, 6)
        TooltipCorner.Parent = Tooltip
        
        local TooltipText = Instance.new("TextLabel")
        TooltipText.Name = "Text"
        TooltipText.BackgroundTransparency = 1
        TooltipText.Position = UDim2.new(0, 8, 0, 0)
        TooltipText.Size = UDim2.new(1, -16, 1, 0)
        TooltipText.Font = self.Theme.Font
        TooltipText.Text = tooltip
        TooltipText.TextColor3 = self.Theme.Text
        TooltipText.TextSize = self.Theme.SmallTextSize
        TooltipText.TextWrapped = true
        TooltipText.ZIndex = 100
        TooltipText.Parent = Tooltip
        
        local TooltipShadow = Instance.new("ImageLabel")
        TooltipShadow.Name = "Shadow"
        TooltipShadow.AnchorPoint = Vector2.new(0.5, 0.5)
        TooltipShadow.BackgroundTransparency = 1
        TooltipShadow.Position = UDim2.new(0.5, 0, 0.5, 0)
        TooltipShadow.Size = UDim2.new(1, 24, 1, 24)
        TooltipShadow.ZIndex = 99
        TooltipShadow.Image = "rbxassetid://6014261993"
        TooltipShadow.ImageColor3 = Color3.fromRGB(0, 0, 0)
        TooltipShadow.ImageTransparency = 0.6
        TooltipShadow.ScaleType = Enum.ScaleType.Slice
        TooltipShadow.SliceCenter = Rect.new(49, 49, 450, 450)
        TooltipShadow.Parent = Tooltip
        
        local textSize = Utility:GetTextBounds(tooltip, self.Theme.SmallTextSize, self.Theme.Font, Vector2.new(180, 1000))
        Tooltip.Size = UDim2.new(0, 200, 0, textSize.Y + 16)
        
        Textbox.MouseEnter:Connect(function()
            Tooltip.Visible = true
        end)
        
        Textbox.MouseLeave:Connect(function()
            Tooltip.Visible = false
        end)
    end
    
    Textbox.MouseEnter:Connect(function()
        Utility:CreateTween(Textbox, {BackgroundColor3 = self.Theme.Secondary}):Play()
    end)
    
    Textbox.MouseLeave:Connect(function()
        Utility:CreateTween(Textbox, {BackgroundColor3 = self.Theme.Tertiary}):Play()
    end)
    
    InputField.MouseEnter:Connect(function()
        if InputBox:IsFocused() then return end
        Utility:CreateTween(InputField, {BackgroundColor3 = Color3.fromRGB(
            self.Theme.Secondary.R * 255 + 15,
            self.Theme.Secondary.G * 255 + 15,
            self.Theme.Secondary.B * 255 + 15
        )}):Play()
    end)
    
    InputField.MouseLeave:Connect(function()
        if InputBox:IsFocused() then return end
        Utility:CreateTween(InputField, {BackgroundColor3 = self.Theme.Secondary}):Play()
    end)
    
    InputBox.Focused:Connect(function()
        Utility:CreateTween(InputField, {BackgroundColor3 = self.Theme.DarkAccent}):Play()
    end)
    
    InputBox.FocusLost:Connect(function(enterPressed)
        Utility:CreateTween(InputField, {BackgroundColor3 = self.Theme.Secondary}):Play()
        pcall(callback, InputBox.Text, enterPressed)
    end)
    
    local TextboxObj = {
        Instance = Textbox,
        Text = TextLabel,
        Input = InputBox,
        SetValue = function(self, value)
            InputBox.Text = value
            pcall(callback, value, false)
        end,
        GetValue = function(self)
            return InputBox.Text
        end,
        SetPlaceholder = function(self, text)
            InputBox.PlaceholderText = text
        end
    }
    
    if typeof(parent) == "table" and parent.Elements then
        parent.Elements[text] = TextboxObj
    end
    
    return TextboxObj
end

-- Create a color picker
function VexHub:CreateColorPicker(parent, options)
    options = options or {}
    local text = options.Text or "Color Picker"
    local default = options.Default or Color3.fromRGB(255, 255, 255)
    local callback = options.Callback or function() end
    local tooltip = options.Tooltip
    
    local parentObj = typeof(parent) == "table" and parent or self.ActiveWindow.Tabs[parent]
    local parentInstance = (typeof(parent) == "table" and parent.Content) or (parentObj and parentObj.Page) or parent
    
    if not parentInstance then
        self:Notification({
            Title = "Error",
            Text = "Parent not found",
            Type = "Error"
        })
        return nil
    end
    
    local ColorPicker = Instance.new("Frame")
    ColorPicker.Name = "ColorPicker_" .. text
    ColorPicker.BackgroundColor3 = self.Theme.Tertiary
    ColorPicker.BorderSizePixel = 0
    ColorPicker.Size = UDim2.new(1, 0, 0, self.Theme.ElementHeight)
    ColorPicker.ClipsDescendants = true
    ColorPicker.Parent = parentInstance
    
    local Corner = Instance.new("UICorner")
    Corner.CornerRadius = UDim.new(0, 6)
    Corner.Parent = ColorPicker
    
    local TextLabel = Instance.new("TextLabel")
    TextLabel.Name = "Text"
    TextLabel.BackgroundTransparency = 1
    TextLabel.Position = UDim2.new(0, 12, 0, 0)
    TextLabel.Size = UDim2.new(1, -60, 1, 0)
    TextLabel.Font = self.Theme.Font
    TextLabel.Text = text
    TextLabel.TextColor3 = self.Theme.Text
    TextLabel.TextSize = self.Theme.NormalTextSize
    TextLabel.TextXAlignment = Enum.TextXAlignment.Left
    TextLabel.Parent = ColorPicker
    
    local ColorPreview = Instance.new("Frame")
    ColorPreview.Name = "ColorPreview"
    ColorPreview.BackgroundColor3 = default
    ColorPreview.BorderSizePixel = 0
    ColorPreview.Position = UDim2.new(1, -44, 0.5, -10)
    ColorPreview.Size = UDim2.new(0, 36, 0, 20)
    ColorPreview.Parent = ColorPicker
    
    local PreviewCorner = Instance.new("UICorner")
    PreviewCorner.CornerRadius = UDim.new(0, 4)
    PreviewCorner.Parent = ColorPreview
    
    -- Color Picker UI
    local PickerFrame = Instance.new("Frame")
    PickerFrame.Name = "PickerFrame"
    PickerFrame.BackgroundColor3 = self.Theme.Secondary
    PickerFrame.BorderSizePixel = 0
    PickerFrame.Position = UDim2.new(0, 0, 0, self.Theme.ElementHeight)
    PickerFrame.Size = UDim2.new(1, 0, 0, 0) -- Will be expanded when opened
    PickerFrame.Parent = ColorPicker
    
    local PickerCorner = Instance.new("UICorner")
    PickerCorner.CornerRadius = UDim.new(0, 6)
    PickerCorner.Parent = PickerFrame
    
    local ColorArea = Instance.new("ImageLabel")
    ColorArea.Name = "ColorArea"
    ColorArea.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
    ColorArea.BorderSizePixel = 0
    ColorArea.Position = UDim2.new(0, 12, 0, 12)
    ColorArea.Size = UDim2.new(1, -72, 0, 150)
    ColorArea.Image = "rbxassetid://4155801252"
    ColorArea.ImageColor3 = Color3.fromRGB(255, 0, 0)
    ColorArea.Parent = PickerFrame
    
    local ColorAreaCorner = Instance.new("UICorner")
    ColorAreaCorner.CornerRadius = UDim.new(0, 4)
    ColorAreaCorner.Parent = ColorArea
    
    local ColorSelector = Instance.new("Frame")
    ColorSelector.Name = "ColorSelector"
    ColorSelector.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    ColorSelector.BackgroundTransparency = 0.8
    ColorSelector.BorderSizePixel = 0
    ColorSelector.Position = UDim2.new(0.5, 0, 0.5, 0)
    ColorSelector.Size = UDim2.new(0, 10, 0, 10)
    ColorSelector.Parent = ColorArea
    
    local ColorSelectorCorner = Instance.new("UICorner")
    ColorSelectorCorner.CornerRadius = UDim.new(1, 0)
    ColorSelectorCorner.Parent = ColorSelector
    
    local HueSlider = Instance.new("Frame")
    HueSlider.Name = "HueSlider"
    HueSlider.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    HueSlider.BorderSizePixel = 0
    HueSlider.Position = UDim2.new(1, -48, 0, 12)
    HueSlider.Size = UDim2.new(0, 30, 0, 150)
    HueSlider.Parent = PickerFrame
    
    local HueSliderGradient = Instance.new("UIGradient")
    HueSliderGradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 0, 0)),
        ColorSequenceKeypoint.new(0.167, Color3.fromRGB(255, 255, 0)),
        ColorSequenceKeypoint.new(0.333, Color3.fromRGB(0, 255, 0)),
        ColorSequenceKeypoint.new(0.5, Color3.fromRGB(0, 255, 255)),
        ColorSequenceKeypoint.new(0.667, Color3.fromRGB(0, 0, 255)),
        ColorSequenceKeypoint.new(0.833, Color3.fromRGB(255, 0, 255)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 0, 0))
    })
    HueSliderGradient.Rotation = 90
    HueSliderGradient.Parent = HueSlider
    
    local HueSliderCorner = Instance.new("UICorner")
    HueSliderCorner.CornerRadius = UDim.new(0, 4)
    HueSliderCorner.Parent = HueSlider
    
    local HueSelector = Instance.new("Frame")
    HueSelector.Name = "HueSelector"
    HueSelector.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    HueSelector.BorderSizePixel = 0
    HueSelector.Position = UDim2.new(0, -2, 0, 0)
    HueSelector.Size = UDim2.new(1, 4, 0, 3)
    HueSelector.Parent = HueSlider
    
    local RGBDisplay = Instance.new("Frame")
    RGBDisplay.Name = "RGBDisplay"
    RGBDisplay.BackgroundTransparency = 1
    RGBDisplay.Position = UDim2.new(0, 12, 0, 170)
    RGBDisplay.Size = UDim2.new(1, -24, 0, 30)
    RGBDisplay.Parent = PickerFrame
    
    local RLabel = Instance.new("TextLabel")
    RLabel.Name = "RLabel"
    RLabel.BackgroundTransparency = 1
    RLabel.Size = UDim2.new(0, 30, 1, 0)
    RLabel.Font = self.Theme.Font
    RLabel.Text = "R:"
    RLabel.TextColor3 = self.Theme.Text
    RLabel.TextSize = self.Theme.NormalTextSize
    RLabel.Parent = RGBDisplay
    
    local RValue = Instance.new("TextBox")
    RValue.Name = "RValue"
    RValue.BackgroundColor3 = self.Theme.Tertiary
    RValue.BorderSizePixel = 0
    RValue.Position = UDim2.new(0, 30, 0.5, -10)
    RValue.Size = UDim2.new(0, 40, 0, 20)
    RValue.Font = self.Theme.Font
    RValue.Text = tostring(math.floor(default.R * 255))
    RValue.TextColor3 = self.Theme.Text
    RValue.TextSize = self.Theme.NormalTextSize
    RValue.Parent = RGBDisplay
    
    local RValueCorner = Instance.new("UICorner")
    RValueCorner.CornerRadius = UDim.new(0, 4)
    RValueCorner.Parent = RValue
    
    local GLabel = Instance.new("TextLabel")
    GLabel.Name = "GLabel"
    GLabel.BackgroundTransparency = 1
    GLabel.Position = UDim2.new(0, 80, 0, 0)
    GLabel.Size = UDim2.new(0, 30, 1, 0)
    GLabel.Font = self.Theme.Font
    GLabel.Text = "G:"
    GLabel.TextColor3 = self.Theme.Text
    GLabel.TextSize = self.Theme.NormalTextSize
    GLabel.Parent = RGBDisplay
    
    local GValue = Instance.new("TextBox")
    GValue.Name = "GValue"
    GValue.BackgroundColor3 = self.Theme.Tertiary
    GValue.BorderSizePixel = 0
    GValue.Position = UDim2.new(0, 110, 0.5, -10)
    GValue.Size = UDim2.new(0, 40, 0, 20)
    GValue.Font = self.Theme.Font
    GValue.Text = tostring(math.floor(default.G * 255))
    GValue.TextColor3 = self.Theme.Text
    GValue.TextSize = self.Theme.NormalTextSize
    GValue.Parent = RGBDisplay
    
    local GValueCorner = Instance.new("UICorner")
    GValueCorner.CornerRadius = UDim.new(0, 4)
    GValueCorner.Parent = GValue
    
    local BLabel = Instance.new("TextLabel")
    BLabel.Name = "BLabel"
    BLabel.BackgroundTransparency = 1
    BLabel.Position = UDim2.new(0, 160, 0, 0)
    BLabel.Size = UDim2.new(0, 30, 1, 0)
    BLabel.Font = self.Theme.Font
    BLabel.Text = "B:"
    BLabel.TextColor3 = self.Theme.Text
    BLabel.TextSize = self.Theme.NormalTextSize
    BLabel.Parent = RGBDisplay
    
    local BValue = Instance.new("TextBox")
    BValue.Name = "BValue"
    BValue.BackgroundColor3 = self.Theme.Tertiary
    BValue.BorderSizePixel = 0
    BValue.Position = UDim2.new(0, 190, 0.5, -10)
    BValue.Size = UDim2.new(0, 40, 0, 20)
    BValue.Font = self.Theme.Font
    BValue.Text = tostring(math.floor(default.B * 255))
    BValue.TextColor3 = self.Theme.Text
    BValue.TextSize = self.Theme.NormalTextSize
    BValue.Parent = RGBDisplay
    
    local BValueCorner = Instance.new("UICorner")
    BValueCorner.CornerRadius = UDim.new(0, 4)
    BValueCorner.Parent = BValue
    
    local ApplyButton = Instance.new("TextButton")
    ApplyButton.Name = "ApplyButton"
    ApplyButton.BackgroundColor3 = self.Theme.Accent
    ApplyButton.BorderSizePixel = 0
    ApplyButton.Position = UDim2.new(0, 12, 0, 210)
    ApplyButton.Size = UDim2.new(1, -24, 0, 30)
    ApplyButton.Font = self.Theme.Font
    ApplyButton.Text = "Apply"
    ApplyButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    ApplyButton.TextSize = self.Theme.NormalTextSize
    ApplyButton.Parent = PickerFrame
    
    local ApplyCorner = Instance.new("UICorner")
    ApplyCorner.CornerRadius = UDim.new(0, 4)
    ApplyCorner.Parent = ApplyButton
    
    if tooltip then
        local Tooltip = Instance.new("Frame")
        Tooltip.Name = "Tooltip"
        Tooltip.BackgroundColor3 = self.Theme.Tertiary
        Tooltip.BorderSizePixel = 0
        Tooltip.Position = UDim2.new(1, 10, 0, 0)
        Tooltip.Size = UDim2.new(0, 200, 0, 30)
        Tooltip.Visible = false
        Tooltip.ZIndex = 100
        Tooltip.Parent = ColorPicker
        
        local TooltipCorner = Instance.new("UICorner")
        TooltipCorner.CornerRadius = UDim.new(0, 6)
        TooltipCorner.Parent = Tooltip
        
        local TooltipText = Instance.new("TextLabel")
        TooltipText.Name = "Text"
        TooltipText.BackgroundTransparency = 1
        TooltipText.Position = UDim2.new(0, 8, 0, 0)
        TooltipText.Size = UDim2.new(1, -16, 1, 0)
        TooltipText.Font = self.Theme.Font
        TooltipText.Text = tooltip
        TooltipText.TextColor3 = self.Theme.Text
        TooltipText.TextSize = self.Theme.SmallTextSize
        TooltipText.TextWrapped = true
        TooltipText.ZIndex = 100
        TooltipText.Parent = Tooltip
        
        local TooltipShadow = Instance.new("ImageLabel")
        TooltipShadow.Name = "Shadow"
        TooltipShadow.AnchorPoint = Vector2.new(0.5, 0.5)
        TooltipShadow.BackgroundTransparency = 1
        TooltipShadow.Position = UDim2.new(0.5, 0, 0.5, 0)
        TooltipShadow.Size = UDim2.new(1, 24, 1, 24)
        TooltipShadow.ZIndex = 99
        TooltipShadow.Image = "rbxassetid://6014261993"
        TooltipShadow.ImageColor3 = Color3.fromRGB(0, 0, 0)
        TooltipShadow.ImageTransparency = 0.6
        TooltipShadow.ScaleType = Enum.ScaleType.Slice
        TooltipShadow.SliceCenter = Rect.new(49, 49, 450, 450)
        TooltipShadow.Parent = Tooltip
        
        local textSize = Utility:GetTextBounds(tooltip, self.Theme.SmallTextSize, self.Theme.Font, Vector2.new(180, 1000))
        Tooltip.Size = UDim2.new(0, 200, 0, textSize.Y + 16)
        
        ColorPicker.MouseEnter:Connect(function()
            Tooltip.Visible = true
        end)
        
        ColorPicker.MouseLeave:Connect(function()
            Tooltip.Visible = false
        end)
    end
    
    local isOpen = false
    local h, s, v = Color3.toHSV(default)
    local currentColor = default
    
    local function updateColorDisplay()
        ColorPreview.BackgroundColor3 = currentColor
        local r, g, b = math.floor(currentColor.R * 255), math.floor(currentColor.G * 255), math.floor(currentColor.B * 255)
        
        RValue.Text = tostring(r)
        GValue.Text = tostring(g)
        BValue.Text = tostring(b)
        
        ColorArea.ImageColor3 = Color3.fromHSV(h, 1, 1)
        ColorSelector.Position = UDim2.new(s, 0, 1 - v, 0)
        HueSelector.Position = UDim2.new(0, -2, 1 - h, 0)
    end
    
    updateColorDisplay()
    
    ColorPicker.MouseEnter:Connect(function()
        Utility:CreateTween(ColorPicker, {BackgroundColor3 = self.Theme.Secondary}):Play()
    end)
    
    ColorPicker.MouseLeave:Connect(function()
        Utility:CreateTween(ColorPicker, {BackgroundColor3 = self.Theme.Tertiary}):Play()
    end)
    
    ColorPicker.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 and not isOpen then
            isOpen = true
            
            PickerFrame.Size = UDim2.new(1, 0, 0, 0)
            PickerFrame.Visible = true
            
            local sizeTween = Utility:CreateTween(PickerFrame, {Size = UDim2.new(1, 0, 0, 250)}, 0.3, Enum.EasingStyle.Quint)
            local pickerTween = Utility:CreateTween(ColorPicker, {Size = UDim2.new(1, 0, 0, self.Theme.ElementHeight + 250)}, 0.3, Enum.EasingStyle.Quint)
            
            sizeTween:Play()
            pickerTween:Play()
        end
    end)
    
    -- Color area input
    ColorArea.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            local dragConnection
            local releaseConnection
            
            local function update()
                local relative = Vector2.new(
                    math.clamp(Mouse.X - ColorArea.AbsolutePosition.X, 0, ColorArea.AbsoluteSize.X) / ColorArea.AbsoluteSize.X,
                    math.clamp(Mouse.Y - ColorArea.AbsolutePosition.Y, 0, ColorArea.AbsoluteSize.Y) / ColorArea.AbsoluteSize.Y
                )
                
                s = relative.X
                v = 1 - relative.Y
                
                currentColor = Color3.fromHSV(h, s, v)
                updateColorDisplay()
            end
            
            dragConnection = RunService.RenderStepped:Connect(update)
            releaseConnection = UserInputService.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    dragConnection:Disconnect()
                    releaseConnection:Disconnect()
                end
            end)
            
            update()
        end
    end)
    
    -- Hue slider input
    HueSlider.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            local dragConnection
            local releaseConnection
            
            local function update()
                local relative = math.clamp(1 - (Mouse.Y - HueSlider.AbsolutePosition.Y) / HueSlider.AbsoluteSize.Y, 0, 1)
                h = relative
                
                currentColor = Color3.fromHSV(h, s, v)
                updateColorDisplay()
            end
            
            dragConnection = RunService.RenderStepped:Connect(update)
            releaseConnection = UserInputService.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    dragConnection:Disconnect()
                    releaseConnection:Disconnect()
                end
            end)
            
            update()
        end
    end)
    
    -- RGB value input
    local function validateNumber(text)
        local filtered = text:gsub("[^%d]", "")
        local number = tonumber(filtered)
        
        if number then
            return math.clamp(number, 0, 255)
        end
        
        return 0
    end
    
    RValue.FocusLost:Connect(function()
        local r = validateNumber(RValue.Text) / 255
        local g = currentColor.G
        local b = currentColor.B
        
        currentColor = Color3.new(r, g, b)
        h, s, v = Color3.toHSV(currentColor)
        updateColorDisplay()
    end)
    
    GValue.FocusLost:Connect(function()
        local r = currentColor.R
        local g = validateNumber(GValue.Text) / 255
        local b = currentColor.B
        
        currentColor = Color3.new(r, g, b)
        h, s, v = Color3.toHSV(currentColor)
        updateColorDisplay()
    end)
    
    BValue.FocusLost:Connect(function()
        local r = currentColor.R
        local g = currentColor.G
        local b = validateNumber(BValue.Text) / 255
        
        currentColor = Color3.new(r, g, b)
        h, s, v = Color3.toHSV(currentColor)
        updateColorDisplay()
    end)
    
    ApplyButton.MouseEnter:Connect(function()
        Utility:CreateTween(ApplyButton, {BackgroundColor3 = self.Theme.DarkAccent}):Play()
    end)
    
    ApplyButton.MouseLeave:Connect(function()
        Utility:CreateTween(ApplyButton, {BackgroundColor3 = self.Theme.Accent}):Play()
    end)
    
    ApplyButton.MouseButton1Click:Connect(function()
        isOpen = false
        
        local closeTween = Utility:CreateTween(PickerFrame, {Size = UDim2.new(1, 0, 0, 0)}, 0.3, Enum.EasingStyle.Quint)
        local pickerTween = Utility:CreateTween(ColorPicker, {Size = UDim2.new(1, 0, 0, self.Theme.ElementHeight)}, 0.3, Enum.EasingStyle.Quint)
        
        closeTween:Play()
        pickerTween:Play()
        
        pcall(callback, currentColor)
    end)
    
    local ColorPickerObj = {
        Instance = ColorPicker,
        Text = TextLabel,
        Preview = ColorPreview,
        SetColor = function(self, color)
            currentColor = color
            h, s, v = Color3.toHSV(color)
            updateColorDisplay()
            pcall(callback, color)
        end,
        GetColor = function(self)
            return currentColor
        end,
        SetText = function(self, newText)
            TextLabel.Text = newText
        end,
        UseGradient = function(self, gradientData)
            -- This function is not provided in the original file, so it's left unchanged
            -- You can implement your own logic here to handle gradient data
        end,
        GetColor = function(self)
            -- Enhanced color getter function with support for animated gradients
            local color = self.Instance.BackgroundColor3
            
            -- If this is a gradient-enabled element
            if self.UseGradient then
                -- Return current gradient data
                return {
                    Type = self.GradientType or "Static",
                    StartColor = self.GradientStartColor or VexHub.Theme.Accent,
                    EndColor = self.GradientEndColor or VexHub.Theme.DarkAccent,
                    Speed = self.GradientSpeed or 1,
                    Direction = self.GradientDirection or "Horizontal",
                    Enabled = true
                }
            end
            
            return color
        end,
        
        SetColor = function(self, colorData)
            if typeof(colorData) == "table" and colorData.Type then
                -- This is gradient data
                self.UseGradient = true
                self.GradientType = colorData.Type
                self.GradientStartColor = colorData.StartColor
                self.GradientEndColor = colorData.EndColor
                self.GradientSpeed = colorData.Speed
                self.GradientDirection = colorData.Direction
                
                -- Create or update gradient
                if not self.Instance:FindFirstChild("UIGradient") then
                    local gradient = Instance.new("UIGradient")
                    gradient.Parent = self.Instance
                    
                    if colorData.Type == "Animated" then
                        -- Create animation for gradient
                        local offset = 0
                        local connection = RunService.RenderStepped:Connect(function(dt)
                            offset = (offset + dt * (colorData.Speed or 1)) % 1
                            gradient.Offset = Vector2.new(offset, 0)
                        end)
                        
                        -- Store connection for cleanup
                        self._gradientConnection = connection
                    end
                end
                
                local gradient = self.Instance:FindFirstChild("UIGradient")
                
                if colorData.Direction == "Horizontal" then
                    gradient.Rotation = 0
                elseif colorData.Direction == "Vertical" then
                    gradient.Rotation = 90
                elseif colorData.Direction == "Diagonal" then
                    gradient.Rotation = 45
                end
                
                gradient.Color = ColorSequence.new({
                    ColorSequenceKeypoint.new(0, colorData.StartColor),
                    ColorSequenceKeypoint.new(1, colorData.EndColor)
                })
            else
                -- Regular color
                self.UseGradient = false
                
                -- Remove gradient if exists
                if self.Instance:FindFirstChild("UIGradient") then
                    self.Instance:FindFirstChild("UIGradient"):Destroy()
                end
                
                -- Clear animation connection if exists
                if self._gradientConnection then
                    self._gradientConnection:Disconnect()
                    self._gradientConnection = nil
                end
                
                -- Set normal color
                self.Instance.BackgroundColor3 = colorData
            end
            
            return self
        end
    }
    
    if typeof(parent) == "table" and parent.Elements then
        parent.Elements[text] = ColorPickerObj
    end
    
    return ColorPickerObj
end

-- VexHub Themes and Effects System
VexHub.Themes = {
    Default = {
        Primary = Color3.fromRGB(30, 30, 30),
        Secondary = Color3.fromRGB(25, 25, 25),
        Tertiary = Color3.fromRGB(20, 20, 20),
        Accent = Color3.fromRGB(0, 115, 255),
        DarkAccent = Color3.fromRGB(0, 85, 200),
        TextAccent = Color3.fromRGB(70, 160, 255),
        Success = Color3.fromRGB(50, 200, 80),
        Warning = Color3.fromRGB(255, 180, 40),
        Error = Color3.fromRGB(255, 70, 70),
        Text = Color3.fromRGB(240, 240, 240),
        TextDark = Color3.fromRGB(180, 180, 180),
        TextDarker = Color3.fromRGB(140, 140, 140),
        
        -- Sizing params
        RoundRadius = UDim.new(0, 6),
        LargeRoundRadius = UDim.new(0, 12),
        SmallRoundRadius = UDim.new(0, 4),
        
        -- Font params
        Font = Enum.Font.Gotham,
        FontBold = Enum.Font.GothamBold,
        FontSemiBold = Enum.Font.GothamSemibold,
        
        -- Text sizes
        TitleTextSize = 20,
        LargeTextSize = 18,
        NormalTextSize = 14,
        SmallTextSize = 12,
        
        -- Transitions
        ShortTransition = 0.15,
        NormalTransition = 0.25,
        LongTransition = 0.4,
        
        -- Elevations (shadow depths)
        Elevation = {
            Low = {
                Blur = 4,
                Transparency = 0.8
            },
            Medium = {
                Blur = 8,
                Transparency = 0.7
            },
            High = {
                Blur = 12,
                Transparency = 0.6
            }
        }
    },
    
    Dark = {
        Primary = Color3.fromRGB(15, 15, 15),
        Secondary = Color3.fromRGB(20, 20, 20),
        Tertiary = Color3.fromRGB(25, 25, 25),
        Accent = Color3.fromRGB(110, 80, 255),
        DarkAccent = Color3.fromRGB(80, 50, 200),
        TextAccent = Color3.fromRGB(150, 120, 255),
        Success = Color3.fromRGB(40, 180, 70),
        Warning = Color3.fromRGB(255, 160, 30),
        Error = Color3.fromRGB(255, 60, 60),
        Text = Color3.fromRGB(240, 240, 240),
        TextDark = Color3.fromRGB(180, 180, 180),
        TextDarker = Color3.fromRGB(140, 140, 140),
        
        -- Sizing params
        RoundRadius = UDim.new(0, 8),
        LargeRoundRadius = UDim.new(0, 16),
        SmallRoundRadius = UDim.new(0, 4),
        
        -- Font params
        Font = Enum.Font.Gotham,
        FontBold = Enum.Font.GothamBold,
        FontSemiBold = Enum.Font.GothamSemibold,
        
        -- Text sizes
        TitleTextSize = 20,
        LargeTextSize = 18,
        NormalTextSize = 14,
        SmallTextSize = 12,
        
        -- Transitions
        ShortTransition = 0.15,
        NormalTransition = 0.25,
        LongTransition = 0.4,
        
        -- Elevations (shadow depths)
        Elevation = {
            Low = {
                Blur = 4,
                Transparency = 0.8
            },
            Medium = {
                Blur = 8,
                Transparency = 0.7
            },
            High = {
                Blur = 12,
                Transparency = 0.6
            }
        }
    },
    
    Light = {
        Primary = Color3.fromRGB(245, 245, 245),
        Secondary = Color3.fromRGB(255, 255, 255),
        Tertiary = Color3.fromRGB(235, 235, 235),
        Accent = Color3.fromRGB(0, 115, 255),
        DarkAccent = Color3.fromRGB(0, 85, 200),
        TextAccent = Color3.fromRGB(0, 100, 230),
        Success = Color3.fromRGB(40, 180, 70),
        Warning = Color3.fromRGB(240, 150, 20),
        Error = Color3.fromRGB(230, 50, 50),
        Text = Color3.fromRGB(40, 40, 40),
        TextDark = Color3.fromRGB(80, 80, 80),
        TextDarker = Color3.fromRGB(120, 120, 120),
        
        -- Sizing params
        RoundRadius = UDim.new(0, 8),
        LargeRoundRadius = UDim.new(0, 16),
        SmallRoundRadius = UDim.new(0, 4),
        
        -- Font params
        Font = Enum.Font.Gotham,
        FontBold = Enum.Font.GothamBold,
        FontSemiBold = Enum.Font.GothamSemibold,
        
        -- Text sizes
        TitleTextSize = 20,
        LargeTextSize = 18,
        NormalTextSize = 14,
        SmallTextSize = 12,
        
        -- Transitions
        ShortTransition = 0.15,
        NormalTransition = 0.25,
        LongTransition = 0.4,
        
        -- Elevations (shadow depths)
        Elevation = {
            Low = {
                Blur = 4,
                Transparency = 0.92
            },
            Medium = {
                Blur = 8,
                Transparency = 0.9
            },
            High = {
                Blur = 12,
                Transparency = 0.85
            }
        }
    },
    
    Midnight = {
        Primary = Color3.fromRGB(15, 20, 35),
        Secondary = Color3.fromRGB(20, 25, 45),
        Tertiary = Color3.fromRGB(25, 30, 55),
        Accent = Color3.fromRGB(80, 120, 255),
        DarkAccent = Color3.fromRGB(60, 90, 220),
        TextAccent = Color3.fromRGB(110, 150, 255),
        Success = Color3.fromRGB(40, 180, 100),
        Warning = Color3.fromRGB(255, 170, 30),
        Error = Color3.fromRGB(255, 60, 80),
        Text = Color3.fromRGB(240, 240, 240),
        TextDark = Color3.fromRGB(180, 180, 180),
        TextDarker = Color3.fromRGB(140, 140, 140),
        
        -- Sizing params
        RoundRadius = UDim.new(0, 10),
        LargeRoundRadius = UDim.new(0, 18),
        SmallRoundRadius = UDim.new(0, 6),
        
        -- Font params
        Font = Enum.Font.Gotham,
        FontBold = Enum.Font.GothamBold,
        FontSemiBold = Enum.Font.GothamSemibold,
        
        -- Text sizes
        TitleTextSize = 20,
        LargeTextSize = 18,
        NormalTextSize = 14,
        SmallTextSize = 12,
        
        -- Transitions
        ShortTransition = 0.15,
        NormalTransition = 0.25,
        LongTransition = 0.4,
        
        -- Elevations (shadow depths)
        Elevation = {
            Low = {
                Blur = 4,
                Transparency = 0.8
            },
            Medium = {
                Blur = 8,
                Transparency = 0.7
            },
            High = {
                Blur = 12,
                Transparency = 0.6
            }
        }
    }
}

-- Effects system for UI elements
VexHub.Effects = {
    ApplyBlur = function(instance, blurSize, transparency)
        local blur = Instance.new("BlurEffect")
        blur.Size = blurSize or 10
        blur.Parent = game:GetService("Lighting")
        
        local bindable = Instance.new("BindableEvent")
        
        -- Convert the instance to image if needed
        if instance:IsA("Frame") or instance:IsA("ScrollingFrame") then
            -- Create ViewportFrame for blurring
            local viewport = Instance.new("ViewportFrame")
            viewport.Name = "BlurViewport"
            viewport.BackgroundTransparency = 1
            viewport.Size = UDim2.new(1, 0, 1, 0)
            viewport.ZIndex = instance.ZIndex - 1
            viewport.Parent = instance
            
            -- Create blur effect holder
            local blurFrame = Instance.new("Frame")
            blurFrame.Name = "BlurFrame"
            blurFrame.BackgroundColor3 = Color3.new(0, 0, 0)
            blurFrame.BackgroundTransparency = transparency or 0.9
            blurFrame.Size = UDim2.new(1, 0, 1, 0)
            blurFrame.BorderSizePixel = 0
            blurFrame.ZIndex = viewport.ZIndex
            blurFrame.Parent = viewport
            
            -- Track instance changes to update blur
            local connection = RunService.RenderStepped:Connect(function()
                if not instance or not instance.Parent then
                    blur:Destroy()
                    connection:Disconnect()
                    bindable:Fire()
                    return
                end
                
                if instance.Visible then
                    blur.Enabled = true
                    viewport.Visible = true
                else
                    blur.Enabled = false
                    viewport.Visible = false
                end
            end)
            
            instance.Destroying:Connect(function()
                blur:Destroy()
                connection:Disconnect()
                bindable:Fire()
            end)
        end
        
        return {
            BlurEffect = blur,
            Completed = bindable.Event,
            Destroy = function()
                blur:Destroy()
                bindable:Fire()
            end
        }
    end,
    
    ApplyGradient = function(instance, color1, color2, rotation, style, speed)
        if not instance then return end
        
        -- Remove existing gradient if any
        for _, child in ipairs(instance:GetChildren()) do
            if child:IsA("UIGradient") and child.Name == "VexGradient" then
                child:Destroy()
            end
        end
        
        local gradient = Instance.new("UIGradient")
        gradient.Name = "VexGradient"
        
        -- Default values
        color1 = color1 or VexHub.Theme.Accent
        color2 = color2 or VexHub.Theme.DarkAccent
        rotation = rotation or 0
        
        if style == "Rainbow" then
            -- Create rainbow gradient
            gradient.Color = ColorSequence.new({
                ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 0, 0)),
                ColorSequenceKeypoint.new(0.167, Color3.fromRGB(255, 255, 0)),
                ColorSequenceKeypoint.new(0.333, Color3.fromRGB(0, 255, 0)),
                ColorSequenceKeypoint.new(0.5, Color3.fromRGB(0, 255, 255)),
                ColorSequenceKeypoint.new(0.667, Color3.fromRGB(0, 0, 255)),
                ColorSequenceKeypoint.new(0.833, Color3.fromRGB(255, 0, 255)),
                ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 0, 0))
            })
        elseif style == "Fade" then
            -- Create fade gradient
            gradient.Color = ColorSequence.new({
                ColorSequenceKeypoint.new(0, color1),
                ColorSequenceKeypoint.new(0.5, color2),
                ColorSequenceKeypoint.new(1, color1)
            })
        elseif style == "Shine" then
            -- Create shine effect
            local baseColor = color1
            local shineColor = Color3.new(
                math.min(baseColor.R + 0.3, 1),
                math.min(baseColor.G + 0.3, 1),
                math.min(baseColor.B + 0.3, 1)
            )
            
            gradient.Color = ColorSequence.new({
                ColorSequenceKeypoint.new(0, baseColor),
                ColorSequenceKeypoint.new(0.1, baseColor),
                ColorSequenceKeypoint.new(0.5, shineColor),
                ColorSequenceKeypoint.new(0.9, baseColor),
                ColorSequenceKeypoint.new(1, baseColor)
            })
        else
            -- Standard two-color gradient
            gradient.Color = ColorSequence.new({
                ColorSequenceKeypoint.new(0, color1),
                ColorSequenceKeypoint.new(1, color2)
            })
        end
        
        gradient.Rotation = rotation
        gradient.Parent = instance
        
        -- Animate gradient if speed is provided
        if speed and speed > 0 then
            task.spawn(function()
                local offset = 0
                local connection = RunService.RenderStepped:Connect(function(dt)
                    if not gradient or not gradient.Parent then
                        connection:Disconnect()
                        return
                    end
                    
                    offset = (offset + dt * speed) % 1
                    
                    if style == "Rainbow" or style == "Fade" then
                        gradient.Offset = Vector2.new(offset, 0)
                    elseif style == "Shine" then
                        -- Shine effect is slower
                        gradient.Offset = Vector2.new(offset * 0.5, 0)
                    end
                end)
                
                instance.Destroying:Connect(function()
                    connection:Disconnect()
                end)
            end)
        end
        
        return gradient
    end,
    
    ApplyShadow = function(instance, elevation)
        if not instance then return end
        
        -- Remove existing shadow if any
        for _, child in ipairs(instance:GetChildren()) do
            if child:IsA("ImageLabel") and child.Name == "VexShadow" then
                child:Destroy()
            end
        end
        
        elevation = elevation or "Medium"
        local elevationSettings
        
        if type(elevation) == "string" then
            elevationSettings = VexHub.Theme.Elevation[elevation]
        else
            elevationSettings = elevation
        end
        
        local blur = elevationSettings.Blur or 12
        local transparency = elevationSettings.Transparency or 0.6
        
        local shadow = Instance.new("ImageLabel")
        shadow.Name = "VexShadow"
        shadow.AnchorPoint = Vector2.new(0.5, 0.5)
        shadow.BackgroundTransparency = 1
        shadow.Position = UDim2.new(0.5, 0, 0.5, blur/2)
        shadow.Size = UDim2.new(1, blur*2, 1, blur*2)
        shadow.ZIndex = instance.ZIndex - 1
        shadow.Image = "rbxassetid://6014261993"
        shadow.ImageColor3 = Color3.fromRGB(0, 0, 0)
        shadow.ImageTransparency = transparency
        shadow.ScaleType = Enum.ScaleType.Slice
        shadow.SliceCenter = Rect.new(49, 49, 450, 450)
        shadow.Parent = instance
        
        return shadow
    end,
    
    ApplyRipple = function(instance, position, color, size, duration)
        if not instance then return end
        
        position = position or UDim2.new(0.5, 0, 0.5, 0)
        color = color or VexHub.Theme.Accent
        size = size or UDim2.new(1.5, 0, 1.5, 0)
        duration = duration or 0.5
        
        local ripple = Instance.new("Frame")
        ripple.Name = "VexRipple"
        ripple.AnchorPoint = Vector2.new(0.5, 0.5)
        ripple.BackgroundColor3 = color
        ripple.BackgroundTransparency = 0.7
        ripple.BorderSizePixel = 0
        ripple.Position = position
        ripple.Size = UDim2.new(0, 0, 0, 0)
        ripple.ZIndex = instance.ZIndex + 1
        
        local corner = Instance.new("UICorner")
        corner.CornerRadius = UDim.new(1, 0)
        corner.Parent = ripple
        
        ripple.Parent = instance
        
        local tween = Utility:CreateTween(ripple, {
            Size = size,
            BackgroundTransparency = 1
        }, duration, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
        
        tween:Play()
        
        tween.Completed:Connect(function()
            ripple:Destroy()
        end)
        
        return ripple
    end,
    
    ApplyStroke = function(instance, color, thickness, transparency)
        if not instance then return end
        
        -- Remove existing stroke if any
        for _, child in ipairs(instance:GetChildren()) do
            if child:IsA("UIStroke") and child.Name == "VexStroke" then
                child:Destroy()
            end
        end
        
        color = color or VexHub.Theme.Accent
        thickness = thickness or 1
        transparency = transparency or 0
        
        local stroke = Instance.new("UIStroke")
        stroke.Name = "VexStroke"
        stroke.Color = color
        stroke.Thickness = thickness
        stroke.Transparency = transparency
        stroke.Parent = instance
        
        return stroke
    end,
    
    ApplyShine = function(instance, speed, transparency)
        if not instance then return end
        
        speed = speed or 1
        transparency = transparency or 0.7
        
        local shine = Instance.new("Frame")
        shine.Name = "VexShine"
        shine.BackgroundColor3 = Color3.new(1, 1, 1)
        shine.BackgroundTransparency = transparency
        shine.BorderSizePixel = 0
        shine.Size = UDim2.new(0.3, 0, 2, 0)
        shine.Rotation = 45
        shine.ZIndex = instance.ZIndex + 1
        shine.ClipsDescendants = true
        
        instance.ClipsDescendants = true
        
        shine.Parent = instance
        
        -- Position shine off-screen to start
        shine.Position = UDim2.new(-1, 0, -0.5, 0)
        
        task.spawn(function()
            while true do
                if not shine or not shine.Parent then break end
                
                local tween = Utility:CreateTween(shine, {
                    Position = UDim2.new(1.5, 0, -0.5, 0)
                }, 1.5 / speed, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut)
                
                tween:Play()
                tween.Completed:Wait()
                
                if not shine or not shine.Parent then break end
                shine.Position = UDim2.new(-1, 0, -0.5, 0)
                
                task.wait(3 / speed)
            end
        end)
        
        return shine
    end
}

-- Enhanced Luna-style animations module
VexHub.Animations = {
    -- Modern animation presets
    Presets = {
        Bounce = TweenInfo.new(0.5, Enum.EasingStyle.Bounce),
        Smooth = TweenInfo.new(0.3, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut),
        Elastic = TweenInfo.new(0.6, Enum.EasingStyle.Elastic),
        Fast = TweenInfo.new(0.2, Enum.EasingStyle.Quad),
        SlowFade = TweenInfo.new(1.2, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut),
        GlassReveal = TweenInfo.new(0.7, Enum.EasingStyle.Exponential),
        -- Luna-like animation presets
        LunaExpand = TweenInfo.new(0.35, Enum.EasingStyle.Back, Enum.EasingDirection.Out),
        LunaFade = TweenInfo.new(0.4, Enum.EasingStyle.Exponential),
        LunaRotate = TweenInfo.new(1.7, Enum.EasingStyle.Back, Enum.EasingDirection.Out, 2, false, 0.2)
    },
    
    -- Create a sequence of animations like Luna
    Sequence = function(animationTable, callback)
        local totalAnimations = #animationTable
        local currentAnimation = 0
        
        local function playNext()
            currentAnimation = currentAnimation + 1
            if currentAnimation <= totalAnimations then
                local anim = animationTable[currentAnimation]
                
                if anim.Delay then
                    task.delay(anim.Delay, function()
                        local tween = Utility:CreateTween(anim.Instance, anim.Properties, anim.Duration, anim.EasingStyle, anim.EasingDirection)
                        tween:Play()
                        tween.Completed:Connect(playNext)
                    end)
                else
                    local tween = Utility:CreateTween(anim.Instance, anim.Properties, anim.Duration, anim.EasingStyle, anim.EasingDirection)
                    tween:Play()
                    tween.Completed:Connect(playNext)
                end
            else
                if callback then callback() end
            end
        end
        
        playNext()
    end,
    
    -- Create floating dots animation (Luna-style)
    FloatingDots = function(parent, color)
        local dotHolder = Instance.new("Frame")
        dotHolder.Name = "FloatingDots"
        dotHolder.BackgroundTransparency = 1
        dotHolder.Size = UDim2.new(1, 0, 1, 0)
        dotHolder.ZIndex = parent.ZIndex + 1
        dotHolder.ClipsDescendants = true
        dotHolder.Parent = parent
        
        local dots = {}
        color = color or VexHub.Theme.Accent
        
        for i = 1, 3 do
            local dot = Instance.new("Frame")
            dot.Name = "Dot" .. i
            dot.AnchorPoint = Vector2.new(0.5, 0.5)
            dot.BackgroundColor3 = color
            dot.BackgroundTransparency = 0.5
            dot.Size = UDim2.new(0, 6, 0, 6)
            dot.Position = UDim2.new(0.5, (i-2) * 12, 0.5, 0)
            dot.ZIndex = dotHolder.ZIndex
            
            local corner = Instance.new("UICorner")
            corner.CornerRadius = UDim.new(1, 0)
            corner.Parent = dot
            
            -- Add Luna-style glow
            local glow = Instance.new("ImageLabel")
            glow.Name = "Glow"
            glow.BackgroundTransparency = 1
            glow.Image = "rbxassetid://4996891970" -- Radial gradient
            glow.ImageColor3 = color
            glow.ImageTransparency = 0.7
            glow.Size = UDim2.new(1.5, 0, 1.5, 0)
            glow.SizeConstraint = Enum.SizeConstraint.RelativeXY
            glow.Position = UDim2.new(0.5, 0, 0.5, 0)
            glow.AnchorPoint = Vector2.new(0.5, 0.5)
            glow.ZIndex = dot.ZIndex - 1
            glow.Parent = dot
            
            dot.Parent = dotHolder
            table.insert(dots, dot)
            
            -- Animate the dot with Luna-like pulsing
            task.spawn(function()
                while dot and dot.Parent do
                    -- Sequence 1: Expand and brighten
                    Utility:CreateTween(dot, {
                        BackgroundTransparency = 0.3, 
                        Size = UDim2.new(0, 8, 0, 8)
                    }, 0.6, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut):Play()
                    
                    Utility:CreateTween(glow, {
                        ImageTransparency = 0.5,
                        Size = UDim2.new(2, 0, 2, 0)
                    }, 0.6, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut):Play()
                    
                    task.wait(0.2 * i)
                    
                    -- Sequence 2: Contract and fade
                    Utility:CreateTween(dot, {
                        BackgroundTransparency = 0.5, 
                        Size = UDim2.new(0, 6, 0, 6)
                    }, 0.6, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut):Play()
                    
                    Utility:CreateTween(glow, {
                        ImageTransparency = 0.7,
                        Size = UDim2.new(1.5, 0, 1.5, 0)
                    }, 0.6, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut):Play()
                    
                    task.wait(0.2 * (4-i))
                end
            end)
        end
        
        return {
            Destroy = function()
                if dotHolder and dotHolder.Parent then
                    dotHolder:Destroy()
                end
            end
        }
    end,
    
    -- Create Luna-style loading spinner
    CreateSpinner = function(parent, size, color)
        size = size or UDim2.new(0, 40, 0, 40)
        color = color or VexHub.Theme.Accent
        
        local spinner = Instance.new("Frame")
        spinner.Name = "Spinner"
        spinner.BackgroundTransparency = 1
        spinner.Size = size
        spinner.AnchorPoint = Vector2.new(0.5, 0.5)
        spinner.Position = UDim2.new(0.5, 0, 0.5, 0)
        
        local spinnerImage = Instance.new("ImageLabel")
        spinnerImage.Name = "SpinnerImage"
        spinnerImage.BackgroundTransparency = 1
        spinnerImage.Size = UDim2.new(1, 0, 1, 0)
        spinnerImage.Image = "rbxassetid://10926835820" -- Circle asset
        spinnerImage.ImageColor3 = color
        spinnerImage.Parent = spinner
        
        -- Add Luna-style glow to spinner
        local spinnerGlow = Instance.new("ImageLabel")
        spinnerGlow.Name = "SpinnerGlow"
        spinnerGlow.BackgroundTransparency = 1
        spinnerGlow.Image = "rbxassetid://4996891970" -- Radial gradient
        spinnerGlow.ImageColor3 = color
        spinnerGlow.ImageTransparency = 0.7
        spinnerGlow.Size = UDim2.new(1.5, 0, 1.5, 0)
        spinnerGlow.Position = UDim2.new(0.5, 0, 0.5, 0)
        spinnerGlow.AnchorPoint = Vector2.new(0.5, 0.5)
        spinnerGlow.ZIndex = spinnerImage.ZIndex - 1
        spinnerGlow.Parent = spinner
        
        local uiGradient = Instance.new("UIGradient")
        uiGradient.Color = ColorSequence.new({
            ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)),
            ColorSequenceKeypoint.new(0.8, Color3.fromRGB(180, 180, 180)),
            ColorSequenceKeypoint.new(1, Color3.fromRGB(120, 120, 120))
        })
        uiGradient.Parent = spinnerImage
        
        spinner.Parent = parent
        
        -- Animate the spinner with Luna-like rotation
        task.spawn(function()
            while spinner and spinner.Parent do
                -- Rotate spinner
                local rotationTween = TweenService:Create(
                    uiGradient, 
                    TweenInfo.new(1, Enum.EasingStyle.Linear), 
                    {Rotation = 360}
                )
                
                -- Pulse glow
                local glowTween = TweenService:Create(
                    spinnerGlow,
                    TweenInfo.new(1.5, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut),
                    {ImageTransparency = 0.5, Size = UDim2.new(1.8, 0, 1.8, 0)}
                )
                
                rotationTween:Play()
                glowTween:Play()
                rotationTween.Completed:Wait()
                
                -- Reset values
                uiGradient.Rotation = 0
                TweenService:Create(
                    spinnerGlow,
                    TweenInfo.new(1.5, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut),
                    {ImageTransparency = 0.7, Size = UDim2.new(1.5, 0, 1.5, 0)}
                ):Play()
            end
        end)
        
        return {
            Destroy = function()
                if spinner and spinner.Parent then
                    spinner:Destroy()
                end
            end,
            SetColor = function(newColor)
                if spinnerImage then
                    TweenService:Create(spinnerImage, TweenInfo.new(0.3), {ImageColor3 = newColor}):Play()
                    if spinnerGlow then
                        TweenService:Create(spinnerGlow, TweenInfo.new(0.3), {ImageColor3 = newColor}):Play()
                    end
                end
            end
        }
    end,
    
    -- Luna-style hover effect for buttons and UI elements
    ApplyHoverEffect = function(instance, options)
        options = options or {}
        local hoverColor = options.HoverColor or VexHub.Theme.Accent
        local normalColor = options.NormalColor or instance.BackgroundColor3
        local hoverTransparency = options.HoverTransparency or math.max(0, instance.BackgroundTransparency - 0.1)
        local normalTransparency = options.NormalTransparency or instance.BackgroundTransparency
        local scaleOnHover = options.ScaleOnHover or false
        local glowOnHover = options.GlowOnHover or true
        local strokeInstance = instance:FindFirstChildOfClass("UIStroke")
        
        -- Add hover events
        local hovered = false
        
        -- Luna-style glow effect
        local glowEffect
        if glowOnHover then
            glowEffect = Instance.new("ImageLabel")
            glowEffect.Name = "LunaGlowEffect"
            glowEffect.BackgroundTransparency = 1
            glowEffect.Image = "rbxassetid://4996891970" -- Radial gradient
            glowEffect.ImageColor3 = hoverColor
            glowEffect.ImageTransparency = 1 -- Start fully transparent
            glowEffect.Size = UDim2.new(1.5, 0, 1.5, 0)
            glowEffect.SizeConstraint = Enum.SizeConstraint.RelativeXY
            glowEffect.Position = UDim2.new(0.5, 0, 0.5, 0)
            glowEffect.AnchorPoint = Vector2.new(0.5, 0.5)
            glowEffect.ZIndex = instance.ZIndex - 1
            
            -- Match corners if the instance has them
            local corner = instance:FindFirstChildOfClass("UICorner")
            if corner then
                local glowCorner = corner:Clone()
                glowCorner.Parent = glowEffect
            end
            
            glowEffect.Parent = instance
        end
        
        -- Mouse enter event
        instance.MouseEnter:Connect(function()
            hovered = true
            
            -- Background color/transparency change
            Utility:CreateTween(instance, {
                BackgroundColor3 = hoverColor,
                BackgroundTransparency = hoverTransparency
            }, 0.3, Enum.EasingStyle.Quad):Play()
            
            -- UIStroke effect
            if strokeInstance then
                Utility:CreateTween(strokeInstance, {
                    Color = hoverColor,
                    Transparency = math.max(0, strokeInstance.Transparency - 0.2)
                }, 0.3, Enum.EasingStyle.Quad):Play()
            end
            
            -- Scale effect (Luna-like)
            if scaleOnHover then
                Utility:CreateTween(instance, {
                    Size = UDim2.new(instance.Size.X.Scale, instance.Size.X.Offset + 2, 
                                    instance.Size.Y.Scale, instance.Size.Y.Offset + 2)
                }, 0.3, Enum.EasingStyle.Back, Enum.EasingDirection.Out):Play()
            end
            
            -- Glow effect (Luna-like)
            if glowOnHover and glowEffect then
                Utility:CreateTween(glowEffect, {
                    ImageTransparency = 0.7,
                    Size = UDim2.new(1.7, 0, 1.7, 0)
                }, 0.4, Enum.EasingStyle.Quad, Enum.EasingDirection.Out):Play()
            end
        end)
        
        -- Mouse leave event
        instance.MouseLeave:Connect(function()
            hovered = false
            
            -- Reset background
            Utility:CreateTween(instance, {
                BackgroundColor3 = normalColor,
                BackgroundTransparency = normalTransparency
            }, 0.3, Enum.EasingStyle.Quad):Play()
            
            -- Reset stroke
            if strokeInstance then
                Utility:CreateTween(strokeInstance, {
                    Color = strokeInstance.Color,
                    Transparency = strokeInstance.Transparency + 0.2
                }, 0.3, Enum.EasingStyle.Quad):Play()
            end
            
            -- Reset scale
            if scaleOnHover then
                Utility:CreateTween(instance, {
                    Size = UDim2.new(instance.Size.X.Scale, instance.Size.X.Offset - 2, 
                                    instance.Size.Y.Scale, instance.Size.Y.Offset - 2)
                }, 0.3, Enum.EasingStyle.Quad):Play()
            end
            
            -- Reset glow
            if glowOnHover and glowEffect then
                Utility:CreateTween(glowEffect, {
                    ImageTransparency = 1,
                    Size = UDim2.new(1.5, 0, 1.5, 0)
                }, 0.4, Enum.EasingStyle.Quad):Play()
            end
        end)
        
        -- Return control methods
        return {
            IsHovered = function() return hovered end,
            SetColors = function(newNormal, newHover)
                normalColor = newNormal or normalColor
                hoverColor = newHover or hoverColor
                if not hovered then
                    Utility:CreateTween(instance, {BackgroundColor3 = normalColor}, 0.3):Play()
                else
                    Utility:CreateTween(instance, {BackgroundColor3 = hoverColor}, 0.3):Play()
                end
                
                if glowEffect then
                    glowEffect.ImageColor3 = hoverColor
                end
            end,
            Destroy = function()
                if glowEffect then
                    glowEffect:Destroy()
                end
            end
        }
    end,
    
    -- Create a Luna-style active selection bar for tabs
    CreateTabIndicator = function(parent, activeTab)
        local indicator = Instance.new("Frame")
        indicator.Name = "TabIndicator"
        indicator.BackgroundColor3 = VexHub.Theme.Accent
        indicator.BorderSizePixel = 0
        indicator.Size = UDim2.new(0, 25, 0, 3)
        indicator.AnchorPoint = Vector2.new(0.5, 1)
        indicator.Position = UDim2.new(0.5, 0, 1, 0)
        
        -- Add glow to the indicator
        local glow = Instance.new("ImageLabel")
        glow.Name = "Glow"
        glow.BackgroundTransparency = 1
        glow.Image = "rbxassetid://4996891970" -- Radial gradient
        glow.ImageColor3 = VexHub.Theme.Accent
        glow.ImageTransparency = 0.7
        glow.Size = UDim2.new(1, 14, 3, 0)
        glow.Position = UDim2.new(0.5, 0, 0.5, 0)
        glow.AnchorPoint = Vector2.new(0.5, 0.5)
        glow.ZIndex = indicator.ZIndex - 1
        glow.Parent = indicator
        
        -- Apply gradient if theme uses gradient
        local gradient = Instance.new("UIGradient")
        gradient.Color = VexHub.ThemeGradient
        gradient.Offset = Vector2.new(0, 0)
        gradient.Rotation = 90
        gradient.Parent = indicator
        
        indicator.Parent = parent
        
        -- Set up initial position if there's an active tab
        if activeTab then
            indicator.Position = UDim2.new(0.5, 0, 1, 0)
            indicator.Parent = activeTab
        else
            indicator.BackgroundTransparency = 1
            glow.ImageTransparency = 1
        end
        
        return {
            SetActiveTab = function(tab)
                if not tab then return end
                
                -- First fade out the indicator
                local fadeOutTween = Utility:CreateTween(indicator, {
                    BackgroundTransparency = 1,
                    Size = UDim2.new(0, 10, 0, 2)
                }, 0.2, Enum.EasingStyle.Quad)
                
                local glowFadeOut = Utility:CreateTween(glow, {
                    ImageTransparency = 1
                }, 0.2, Enum.EasingStyle.Quad)
                
                -- After fading out, move to new tab
                fadeOutTween.Completed:Connect(function()
                    indicator.Parent = tab
                    indicator.Position = UDim2.new(0.5, 0, 1, 0)
                    
                    -- Then fade back in with Luna-like animation
                    Utility:CreateTween(indicator, {
                        BackgroundTransparency = 0,
                        Size = UDim2.new(0, 25, 0, 3)
                    }, 0.3, Enum.EasingStyle.Back, Enum.EasingDirection.Out):Play()
                    
                    Utility:CreateTween(glow, {
                        ImageTransparency = 0.7
                    }, 0.3, Enum.EasingStyle.Quad):Play()
                end)
                
                fadeOutTween:Play()
                glowFadeOut:Play()
            end,
            
            SetColor = function(color)
                Utility:CreateTween(indicator, {BackgroundColor3 = color}, 0.3):Play()
                Utility:CreateTween(glow, {ImageColor3 = color}, 0.3):Play()
            end
        }
    end
}

-- Modern blurred glass effect for Luna-like UI
function Utility:ApplyModernBlur(instance, strength, transparency)
    if not instance then return end
    
    -- Clean any existing blur effects
    for _, child in ipairs(instance:GetChildren()) do
        if (child:IsA("Frame") and child.Name == "ModernBlurFrame") or
           (child:IsA("ImageLabel") and child.Name == "ModernBlurEffect") then
            child:Destroy()
        end
    end
    
    strength = strength or 10
    transparency = transparency or 0.85
    
    -- Create Luna-style container
    local blurContainer = Instance.new("Frame")
    blurContainer.Name = "ModernBlurFrame"
    blurContainer.BackgroundTransparency = 1
    blurContainer.BorderSizePixel = 0
    blurContainer.Size = UDim2.new(1, 0, 1, 0)
    blurContainer.ZIndex = instance.ZIndex - 1
    blurContainer.Parent = instance
    
    -- Primary blur effect (stronger in center)
    local primaryBlur = Instance.new("ImageLabel")
    primaryBlur.Name = "PrimaryBlurEffect"
    primaryBlur.AnchorPoint = Vector2.new(0.5, 0.5)
    primaryBlur.BackgroundTransparency = 1
    primaryBlur.Position = UDim2.new(0.5, 0, 0.5, 0)
    primaryBlur.Size = UDim2.new(1, 0, 1, 0)
    primaryBlur.Image = "rbxassetid://10929566376" -- Modern blur asset
    primaryBlur.ImageColor3 = Color3.fromRGB(15, 15, 20)
    primaryBlur.ImageTransparency = transparency
    primaryBlur.ScaleType = Enum.ScaleType.Stretch
    primaryBlur.Parent = blurContainer
    
    -- Add corner if parent has corner
    local parentCorner = instance:FindFirstChildOfClass("UICorner")
    if parentCorner then
        local primaryCorner = parentCorner:Clone()
        primaryCorner.Parent = primaryBlur
    end
    
    -- Animated gradient effect for glass shimmer
    local gradient = Instance.new("UIGradient")
    gradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)),
        ColorSequenceKeypoint.new(0.5, Color3.fromRGB(220, 220, 255)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(200, 200, 230))
    })
    gradient.Transparency = NumberSequence.new({
        NumberSequenceKeypoint.new(0, 0.95),
        NumberSequenceKeypoint.new(0.5, 0.9),
        NumberSequenceKeypoint.new(1, 0.95)
    })
    gradient.Rotation = 45
    gradient.Parent = primaryBlur
    
    -- Create subtle animation
    task.spawn(function()
        local t = 0
        local connection = RunService.RenderStepped:Connect(function(dt)
            if not gradient or not gradient.Parent then
                connection:Disconnect()
                return
            end
            
            t = t + dt * 0.3
            gradient.Offset = Vector2.new(math.sin(t) * 0.1, math.cos(t * 0.7) * 0.1)
        end)
        
        if instance then
            instance.Destroying:Connect(function()
                connection:Disconnect()
            end)
        end
    end)
    
    return blurContainer
end

-- Return the library
return VexHub

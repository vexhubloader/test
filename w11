local VexHubLib = {}
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()

-- Asset references
local Images = {
    User = "rbxassetid://", -- Replace with actual asset ID after uploading
    Menu = "rbxassetid://",
    ColorPicker = "rbxassetid://",
    MainFrame = "rbxassetid://",
    SearchButton = "rbxassetid://",
    VersionListButton = "rbxassetid://",
    GameNameButton = "rbxassetid://",
    TopBar = "rbxassetid://",
    Main = "rbxassetid://",
    Tabs = "rbxassetid://"
}

-- UI Settings
local UISettings = {
    Theme = {
        Primary = Color3.fromRGB(28, 28, 28),
        Secondary = Color3.fromRGB(35, 35, 35),
        Accent = Color3.fromRGB(98, 114, 164),
        Text = Color3.fromRGB(255, 255, 255)
    },
    Animation = {
        TweenInfo = TweenInfo.new(0.3, Enum.EasingStyle.Quint),
        FadeInfo = TweenInfo.new(0.5, Enum.EasingStyle.Quint)
    }
}

function VexHubLib:CreateWindow(options)
    options = options or {}
    local WindowName = options.Name or "VexHub"
    local ThemeOverrides = options.Theme or {}
    
    -- Apply theme overrides
    for key, value in pairs(ThemeOverrides) do
        UISettings.Theme[key] = value
    end
    
    -- Create main GUI elements
    local VexHubGUI = Instance.new("ScreenGui")
    VexHubGUI.Name = "VexHubGUI"
    VexHubGUI.ResetOnSpawn = false
    VexHubGUI.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    
    -- Handle parent assignment
    if syn and syn.protect_gui then
        syn.protect_gui(VexHubGUI)
        VexHubGUI.Parent = game.CoreGui
    elseif gethui then
        VexHubGUI.Parent = gethui()
    else
        VexHubGUI.Parent = game.CoreGui
    end
    
    -- Create main frame
    local MainFrame = Instance.new("Frame")
    MainFrame.Name = "MainFrame"
    MainFrame.BackgroundColor3 = UISettings.Theme.Primary
    MainFrame.BorderSizePixel = 0
    MainFrame.Position = UDim2.new(0.5, -300, 0.5, -175)
    MainFrame.Size = UDim2.new(0, 600, 0, 350)
    MainFrame.ClipsDescendants = true
    MainFrame.Parent = VexHubGUI
    
    -- Add shadow
    local Shadow = Instance.new("ImageLabel")
    Shadow.Name = "Shadow"
    Shadow.BackgroundTransparency = 1
    Shadow.Position = UDim2.new(0, -15, 0, -15)
    Shadow.Size = UDim2.new(1, 30, 1, 30)
    Shadow.Image = "rbxassetid://5554236805"
    Shadow.ImageColor3 = Color3.fromRGB(0, 0, 0)
    Shadow.ScaleType = Enum.ScaleType.Slice
    Shadow.SliceCenter = Rect.new(23, 23, 277, 277)
    Shadow.Parent = MainFrame
    
    -- Top bar
    local TopBar = Instance.new("Frame")
    TopBar.Name = "TopBar"
    TopBar.BackgroundColor3 = UISettings.Theme.Secondary
    TopBar.BorderSizePixel = 0
    TopBar.Size = UDim2.new(1, 0, 0, 30)
    TopBar.Parent = MainFrame
    
    -- Title
    local Title = Instance.new("TextLabel")
    Title.Name = "Title"
    Title.BackgroundTransparency = 1
    Title.Position = UDim2.new(0, 10, 0, 0)
    Title.Size = UDim2.new(0, 200, 1, 0)
    Title.Font = Enum.Font.GothamSemibold
    Title.Text = WindowName
    Title.TextColor3 = UISettings.Theme.Text
    Title.TextSize = 14
    Title.TextXAlignment = Enum.TextXAlignment.Left
    Title.Parent = TopBar
    
    -- Close button
    local CloseButton = Instance.new("TextButton")
    CloseButton.Name = "CloseButton"
    CloseButton.BackgroundTransparency = 1
    CloseButton.Position = UDim2.new(1, -30, 0, 0)
    CloseButton.Size = UDim2.new(0, 30, 1, 0)
    CloseButton.Font = Enum.Font.GothamSemibold
    CloseButton.Text = "X"
    CloseButton.TextColor3 = UISettings.Theme.Text
    CloseButton.TextSize = 14
    CloseButton.Parent = TopBar
    
    -- Minimize button
    local MinimizeButton = Instance.new("TextButton")
    MinimizeButton.Name = "MinimizeButton"
    MinimizeButton.BackgroundTransparency = 1
    MinimizeButton.Position = UDim2.new(1, -60, 0, 0)
    MinimizeButton.Size = UDim2.new(0, 30, 1, 0)
    MinimizeButton.Font = Enum.Font.GothamSemibold
    MinimizeButton.Text = "-"
    MinimizeButton.TextColor3 = UISettings.Theme.Text
    MinimizeButton.TextSize = 14
    MinimizeButton.Parent = TopBar
    
    -- Tab container
    local TabContainer = Instance.new("Frame")
    TabContainer.Name = "TabContainer"
    TabContainer.BackgroundColor3 = UISettings.Theme.Secondary
    TabContainer.BorderSizePixel = 0
    TabContainer.Position = UDim2.new(0, 0, 0, 30)
    TabContainer.Size = UDim2.new(0, 150, 1, -30)
    TabContainer.Parent = MainFrame
    
    -- Tab scroll frame
    local TabScrollFrame = Instance.new("ScrollingFrame")
    TabScrollFrame.Name = "TabScrollFrame"
    TabScrollFrame.BackgroundTransparency = 1
    TabScrollFrame.BorderSizePixel = 0
    TabScrollFrame.Position = UDim2.new(0, 0, 0, 10)
    TabScrollFrame.Size = UDim2.new(1, 0, 1, -10)
    TabScrollFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
    TabScrollFrame.ScrollBarThickness = 2
    TabScrollFrame.ScrollBarImageColor3 = UISettings.Theme.Accent
    TabScrollFrame.Parent = TabContainer
    
    -- TabList layout
    local TabListLayout = Instance.new("UIListLayout")
    TabListLayout.Name = "TabListLayout"
    TabListLayout.Padding = UDim.new(0, 5)
    TabListLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
    TabListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    TabListLayout.Parent = TabScrollFrame
    
    -- Content container
    local ContentContainer = Instance.new("Frame")
    ContentContainer.Name = "ContentContainer"
    ContentContainer.BackgroundTransparency = 1
    ContentContainer.Position = UDim2.new(0, 150, 0, 30)
    ContentContainer.Size = UDim2.new(1, -150, 1, -30)
    ContentContainer.Parent = MainFrame
    
    -- Make the window draggable
    local dragging = false
    local dragInput, mousePos, framePos
    
    TopBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            mousePos = input.Position
            framePos = MainFrame.Position
        end
    end)
    
    TopBar.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement and dragging then
            local delta = input.Position - mousePos
            MainFrame.Position = UDim2.new(framePos.X.Scale, framePos.X.Offset + delta.X, framePos.Y.Scale, framePos.Y.Offset + delta.Y)
        end
    end)
    
    -- Close button functionality
    CloseButton.MouseButton1Click:Connect(function()
        VexHubGUI:Destroy()
    end)
    
    -- Minimize button functionality
    local minimized = false
    MinimizeButton.MouseButton1Click:Connect(function()
        minimized = not minimized
        if minimized then
            TweenService:Create(MainFrame, UISettings.Animation.TweenInfo, {Size = UDim2.new(0, 600, 0, 30)}):Play()
        else
            TweenService:Create(MainFrame, UISettings.Animation.TweenInfo, {Size = UDim2.new(0, 600, 0, 350)}):Play()
        end
    end)
    
    -- Tab system
    local Tabs = {}
    local SelectedTab = nil
    
    local Window = {}
    
    function Window:AddTab(tabName, icon)
        -- Create tab button
        local TabButton = Instance.new("TextButton")
        TabButton.Name = tabName.."Tab"
        TabButton.BackgroundColor3 = UISettings.Theme.Primary
        TabButton.BorderSizePixel = 0
        TabButton.Size = UDim2.new(0, 140, 0, 30)
        TabButton.Font = Enum.Font.GothamSemibold
        TabButton.Text = tabName
        TabButton.TextColor3 = UISettings.Theme.Text
        TabButton.TextSize = 12
        TabButton.Parent = TabScrollFrame
        
        -- Create tab indicator
        local TabIndicator = Instance.new("Frame")
        TabIndicator.Name = "TabIndicator"
        TabIndicator.BackgroundColor3 = UISettings.Theme.Accent
        TabIndicator.BorderSizePixel = 0
        TabIndicator.Position = UDim2.new(0, 0, 0, 0)
        TabIndicator.Size = UDim2.new(0, 2, 1, 0)
        TabIndicator.Visible = false
        TabIndicator.Parent = TabButton
        
        -- Create tab content
        local TabContent = Instance.new("ScrollingFrame")
        TabContent.Name = tabName.."Content"
        TabContent.BackgroundTransparency = 1
        TabContent.BorderSizePixel = 0
        TabContent.Size = UDim2.new(1, 0, 1, 0)
        TabContent.CanvasSize = UDim2.new(0, 0, 0, 0)
        TabContent.ScrollBarThickness = 2
        TabContent.ScrollBarImageColor3 = UISettings.Theme.Accent
        TabContent.Visible = false
        TabContent.Parent = ContentContainer
        
        -- Content layout
        local ContentLayout = Instance.new("UIListLayout")
        ContentLayout.Name = "ContentLayout"
        ContentLayout.Padding = UDim.new(0, 10)
        ContentLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
        ContentLayout.SortOrder = Enum.SortOrder.LayoutOrder
        ContentLayout.Parent = TabContent
        
        ContentLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
            TabContent.CanvasSize = UDim2.new(0, 0, 0, ContentLayout.AbsoluteContentSize.Y + 20)
        end)
        
        local Tab = {
            Name = tabName,
            Button = TabButton,
            Content = TabContent,
            Indicator = TabIndicator,
            Sections = {}
        }
        
        -- Tab selection
        TabButton.MouseButton1Click:Connect(function()
            if SelectedTab == Tab then return end
            
            if SelectedTab then
                SelectedTab.Indicator.Visible = false
                SelectedTab.Content.Visible = false
                TweenService:Create(SelectedTab.Button, UISettings.Animation.TweenInfo, {BackgroundColor3 = UISettings.Theme.Primary}):Play()
            end
            
            SelectedTab = Tab
            Tab.Indicator.Visible = true
            Tab.Content.Visible = true
            TweenService:Create(Tab.Button, UISettings.Animation.TweenInfo, {BackgroundColor3 = UISettings.Theme.Secondary}):Play()
        end)
        
        -- If this is the first tab, select it by default
        if not SelectedTab then
            SelectedTab = Tab
            Tab.Indicator.Visible = true
            Tab.Content.Visible = true
            TweenService:Create(Tab.Button, UISettings.Animation.TweenInfo, {BackgroundColor3 = UISettings.Theme.Secondary}):Play()
        end
        
        -- Section creator
        function Tab:AddSection(sectionName)
            local Section = Instance.new("Frame")
            Section.Name = sectionName.."Section"
            Section.BackgroundColor3 = UISettings.Theme.Secondary
            Section.BorderSizePixel = 0
            Section.Size = UDim2.new(0.95, 0, 0, 30)
            Section.AutomaticSize = Enum.AutomaticSize.Y
            Section.Parent = TabContent
            
            -- Section title
            local SectionTitle = Instance.new("TextLabel")
            SectionTitle.Name = "SectionTitle"
            SectionTitle.BackgroundTransparency = 1
            SectionTitle.Position = UDim2.new(0, 10, 0, 0)
            SectionTitle.Size = UDim2.new(1, -20, 0, 30)
            SectionTitle.Font = Enum.Font.GothamSemibold
            SectionTitle.Text = sectionName
            SectionTitle.TextColor3 = UISettings.Theme.Text
            SectionTitle.TextSize = 14
            SectionTitle.TextXAlignment = Enum.TextXAlignment.Left
            SectionTitle.Parent = Section
            
            -- Section content
            local SectionContent = Instance.new("Frame")
            SectionContent.Name = "SectionContent"
            SectionContent.BackgroundTransparency = 1
            SectionContent.Position = UDim2.new(0, 10, 0, 30)
            SectionContent.Size = UDim2.new(1, -20, 0, 0)
            SectionContent.AutomaticSize = Enum.AutomaticSize.Y
            SectionContent.Parent = Section
            
            -- Content layout
            local SectionLayout = Instance.new("UIListLayout")
            SectionLayout.Name = "SectionLayout"
            SectionLayout.Padding = UDim.new(0, 8)
            SectionLayout.SortOrder = Enum.SortOrder.LayoutOrder
            SectionLayout.Parent = SectionContent
            
            SectionLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
                SectionContent.Size = UDim2.new(1, -20, 0, SectionLayout.AbsoluteContentSize.Y)
            end)
            
            local SectionObj = {}
            
            -- Button creator
            function SectionObj:AddButton(options)
                options = options or {}
                local ButtonText = options.Text or "Button"
                local ButtonCallback = options.Callback or function() end
                
                local Button = Instance.new("TextButton")
                Button.Name = ButtonText.."Button"
                Button.BackgroundColor3 = UISettings.Theme.Primary
                Button.BorderSizePixel = 0
                Button.Size = UDim2.new(1, 0, 0, 30)
                Button.Font = Enum.Font.Gotham
                Button.Text = ButtonText
                Button.TextColor3 = UISettings.Theme.Text
                Button.TextSize = 12
                Button.Parent = SectionContent
                
                Button.MouseButton1Click:Connect(function()
                    ButtonCallback()
                end)
                
                return Button
            end
            
            -- Toggle creator
            function SectionObj:AddToggle(options)
                options = options or {}
                local ToggleText = options.Text or "Toggle"
                local ToggleDefault = options.Default or false
                local ToggleCallback = options.Callback or function() end
                
                local Toggle = Instance.new("Frame")
                Toggle.Name = ToggleText.."Toggle"
                Toggle.BackgroundTransparency = 1
                Toggle.Size = UDim2.new(1, 0, 0, 30)
                Toggle.Parent = SectionContent
                
                local ToggleButton = Instance.new("TextButton")
                ToggleButton.Name = "ToggleButton"
                ToggleButton.BackgroundColor3 = UISettings.Theme.Primary
                ToggleButton.BorderSizePixel = 0
                ToggleButton.Position = UDim2.new(0, 0, 0.5, -10)
                ToggleButton.Size = UDim2.new(0, 20, 0, 20)
                ToggleButton.Text = ""
                ToggleButton.Parent = Toggle
                
                local ToggleLabel = Instance.new("TextLabel")
                ToggleLabel.Name = "ToggleLabel"
                ToggleLabel.BackgroundTransparency = 1
                ToggleLabel.Position = UDim2.new(0, 30, 0, 0)
                ToggleLabel.Size = UDim2.new(1, -30, 1, 0)
                ToggleLabel.Font = Enum.Font.Gotham
                ToggleLabel.Text = ToggleText
                ToggleLabel.TextColor3 = UISettings.Theme.Text
                ToggleLabel.TextSize = 12
                ToggleLabel.TextXAlignment = Enum.TextXAlignment.Left
                ToggleLabel.Parent = Toggle
                
                local Toggled = ToggleDefault
                
                local function UpdateToggle()
                    if Toggled then
                        TweenService:Create(ToggleButton, UISettings.Animation.TweenInfo, {BackgroundColor3 = UISettings.Theme.Accent}):Play()
                    else
                        TweenService:Create(ToggleButton, UISettings.Animation.TweenInfo, {BackgroundColor3 = UISettings.Theme.Primary}):Play()
                    end
                    ToggleCallback(Toggled)
                end
                
                UpdateToggle()
                
                ToggleButton.MouseButton1Click:Connect(function()
                    Toggled = not Toggled
                    UpdateToggle()
                end)
                
                local ToggleObj = {}
                
                function ToggleObj:Set(value)
                    Toggled = value
                    UpdateToggle()
                end
                
                return ToggleObj
            end
            
            -- Slider creator
            function SectionObj:AddSlider(options)
                options = options or {}
                local SliderText = options.Text or "Slider"
                local SliderMin = options.Min or 0
                local SliderMax = options.Max or 100
                local SliderDefault = options.Default or SliderMin
                local SliderCallback = options.Callback or function() end
                
                local Slider = Instance.new("Frame")
                Slider.Name = SliderText.."Slider"
                Slider.BackgroundTransparency = 1
                Slider.Size = UDim2.new(1, 0, 0, 45)
                Slider.Parent = SectionContent
                
                local SliderLabel = Instance.new("TextLabel")
                SliderLabel.Name = "SliderLabel"
                SliderLabel.BackgroundTransparency = 1
                SliderLabel.Size = UDim2.new(1, 0, 0, 20)
                SliderLabel.Font = Enum.Font.Gotham
                SliderLabel.Text = SliderText
                SliderLabel.TextColor3 = UISettings.Theme.Text
                SliderLabel.TextSize = 12
                SliderLabel.TextXAlignment = Enum.TextXAlignment.Left
                SliderLabel.Parent = Slider
                
                local SliderValue = Instance.new("TextLabel")
                SliderValue.Name = "SliderValue"
                SliderValue.BackgroundTransparency = 1
                SliderValue.Position = UDim2.new(1, -30, 0, 0)
                SliderValue.Size = UDim2.new(0, 30, 0, 20)
                SliderValue.Font = Enum.Font.Gotham
                SliderValue.Text = tostring(SliderDefault)
                SliderValue.TextColor3 = UISettings.Theme.Text
                SliderValue.TextSize = 12
                SliderValue.Parent = Slider
                
                local SliderBG = Instance.new("Frame")
                SliderBG.Name = "SliderBG"
                SliderBG.BackgroundColor3 = UISettings.Theme.Primary
                SliderBG.BorderSizePixel = 0
                SliderBG.Position = UDim2.new(0, 0, 0, 25)
                SliderBG.Size = UDim2.new(1, 0, 0, 10)
                SliderBG.Parent = Slider
                
                local SliderFill = Instance.new("Frame")
                SliderFill.Name = "SliderFill"
                SliderFill.BackgroundColor3 = UISettings.Theme.Accent
                SliderFill.BorderSizePixel = 0
                SliderFill.Size = UDim2.new((SliderDefault - SliderMin) / (SliderMax - SliderMin), 0, 1, 0)
                SliderFill.Parent = SliderBG
                
                local SliderButton = Instance.new("TextButton")
                SliderButton.Name = "SliderButton"
                SliderButton.BackgroundTransparency = 1
                SliderButton.Size = UDim2.new(1, 0, 1, 0)
                SliderButton.Text = ""
                SliderButton.Parent = SliderBG
                
                local Value = SliderDefault
                
                local function UpdateSlider()
                    local Percent = (Value - SliderMin) / (SliderMax - SliderMin)
                    SliderFill.Size = UDim2.new(Percent, 0, 1, 0)
                    SliderValue.Text = tostring(Value)
                    SliderCallback(Value)
                end
                
                SliderButton.MouseButton1Down:Connect(function()
                    local Connection
                    Connection = RunService.RenderStepped:Connect(function()
                        if not UserInputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton1) then
                            Connection:Disconnect()
                            return
                        end
                        
                        local MousePos = UserInputService:GetMouseLocation().X
                        local SliderPos = SliderBG.AbsolutePosition.X
                        local SliderSize = SliderBG.AbsoluteSize.X
                        local Percent = math.clamp((MousePos - SliderPos) / SliderSize, 0, 1)
                        
                        Value = SliderMin + (SliderMax - SliderMin) * Percent
                        UpdateSlider()
                    end)
                end)
                
                UpdateSlider()
                
                local SliderObj = {}
                
                function SliderObj:Set(value)
                    Value = math.clamp(value, SliderMin, SliderMax)
                    UpdateSlider()
                end
                
                return SliderObj
            end
            
            -- Dropdown creator
            function SectionObj:AddDropdown(options)
                options = options or {}
                local DropdownText = options.Text or "Dropdown"
                local DropdownOptions = options.Options or {}
                local DropdownDefault = options.Default or (DropdownOptions[1] or "")
                local DropdownCallback = options.Callback or function() end
                
                local Dropdown = Instance.new("Frame")
                Dropdown.Name = DropdownText.."Dropdown"
                Dropdown.BackgroundTransparency = 1
                Dropdown.Size = UDim2.new(1, 0, 0, 50)
                Dropdown.ClipsDescendants = true
                Dropdown.Parent = SectionContent
                
                local DropdownLabel = Instance.new("TextLabel")
                DropdownLabel.Name = "DropdownLabel"
                DropdownLabel.BackgroundTransparency = 1
                DropdownLabel.Size = UDim2.new(1, 0, 0, 20)
                DropdownLabel.Font = Enum.Font.Gotham
                DropdownLabel.Text = DropdownText
                DropdownLabel.TextColor3 = UISettings.Theme.Text
                DropdownLabel.TextSize = 12
                DropdownLabel.TextXAlignment = Enum.TextXAlignment.Left
                DropdownLabel.Parent = Dropdown
                
                local DropdownButton = Instance.new("TextButton")
                DropdownButton.Name = "DropdownButton"
                DropdownButton.BackgroundColor3 = UISettings.Theme.Primary
                DropdownButton.BorderSizePixel = 0
                DropdownButton.Position = UDim2.new(0, 0, 0, 25)
                DropdownButton.Size = UDim2.new(1, 0, 0, 25)
                DropdownButton.Font = Enum.Font.Gotham
                DropdownButton.Text = DropdownDefault
                DropdownButton.TextColor3 = UISettings.Theme.Text
                DropdownButton.TextSize = 12
                DropdownButton.Parent = Dropdown
                
                local DropdownContainer = Instance.new("Frame")
                DropdownContainer.Name = "DropdownContainer"
                DropdownContainer.BackgroundColor3 = UISettings.Theme.Primary
                DropdownContainer.BorderSizePixel = 0
                DropdownContainer.Position = UDim2.new(0, 0, 0, 50)
                DropdownContainer.Size = UDim2.new(1, 0, 0, 0)
                DropdownContainer.Visible = false
                DropdownContainer.Parent = Dropdown
                
                local DropdownLayout = Instance.new("UIListLayout")
                DropdownLayout.Name = "DropdownLayout"
                DropdownLayout.SortOrder = Enum.SortOrder.LayoutOrder
                DropdownLayout.Parent = DropdownContainer
                
                local Selected = DropdownDefault
                local Open = false
                
                DropdownButton.MouseButton1Click:Connect(function()
                    Open = not Open
                    
                    if Open then
                        Dropdown.Size = UDim2.new(1, 0, 0, 50 + #DropdownOptions * 25)
                        DropdownContainer.Size = UDim2.new(1, 0, 0, #DropdownOptions * 25)
                        DropdownContainer.Visible = true
                    else
                        Dropdown.Size = UDim2.new(1, 0, 0, 50)
                        DropdownContainer.Size = UDim2.new(1, 0, 0, 0)
                        DropdownContainer.Visible = false
                    end
                end)
                
                for i, option in ipairs(DropdownOptions) do
                    local OptionButton = Instance.new("TextButton")
                    OptionButton.Name = option.."Option"
                    OptionButton.BackgroundColor3 = UISettings.Theme.Primary
                    OptionButton.BorderSizePixel = 0
                    OptionButton.Size = UDim2.new(1, 0, 0, 25)
                    OptionButton.Font = Enum.Font.Gotham
                    OptionButton.Text = option
                    OptionButton.TextColor3 = UISettings.Theme.Text
                    OptionButton.TextSize = 12
                    OptionButton.Parent = DropdownContainer
                    
                    OptionButton.MouseButton1Click:Connect(function()
                        Selected = option
                        DropdownButton.Text = Selected
                        Open = false
                        Dropdown.Size = UDim2.new(1, 0, 0, 50)
                        DropdownContainer.Size = UDim2.new(1, 0, 0, 0)
                        DropdownContainer.Visible = false
                        DropdownCallback(Selected)
                    end)
                end
                
                local DropdownObj = {}
                
                function DropdownObj:Set(option)
                    if table.find(DropdownOptions, option) then
                        Selected = option
                        DropdownButton.Text = Selected
                        DropdownCallback(Selected)
                    end
                end
                
                return DropdownObj
            end
            
            return SectionObj
        end
        
        table.insert(Tabs, Tab)
        return Tab
    end
    
    return Window
end

return VexHubLib

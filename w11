--[[
Vex Hub Interface Suite
Dark MacOS/Windows 11 Theme

Based on Luna Interface Suite by Nebula Softworks

Main Developer: Claude
]]

local Vex = {
    Folder = "Vex",
    Options = {},
    ThemeGradient = ColorSequence.new{
        ColorSequenceKeypoint.new(0.00, Color3.fromRGB(36, 36, 36)), 
        ColorSequenceKeypoint.new(0.50, Color3.fromRGB(48, 48, 48)), 
        ColorSequenceKeypoint.new(1.00, Color3.fromRGB(36, 36, 36))
    }
}

-- Services
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local HttpService = game:GetService("HttpService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local CoreGui = game:GetService("CoreGui")

local Player = Players.LocalPlayer
local Camera = workspace.CurrentCamera
local isStudio = RunService:IsStudio()

-- Theme Settings
local VexTheme = {
    Window = {
        Background = Color3.fromRGB(25, 25, 25),
        Accent = Color3.fromRGB(65, 105, 225),
        Highlight = Color3.fromRGB(75, 120, 240),
        Text = Color3.fromRGB(240, 240, 240),
        SubText = Color3.fromRGB(180, 180, 180),
        Stroke = Color3.fromRGB(45, 45, 45),
        Radius = UDim.new(0, 8)
    },
    Elements = {
        Background = Color3.fromRGB(32, 32, 32),
        Accent = Color3.fromRGB(60, 100, 220),
        Highlight = Color3.fromRGB(70, 115, 235),
        Text = Color3.fromRGB(230, 230, 230),
        SubText = Color3.fromRGB(170, 170, 170),
        Disabled = Color3.fromRGB(100, 100, 100),
        Stroke = Color3.fromRGB(50, 50, 50),
        SliderBackground = Color3.fromRGB(40, 40, 40),
        Radius = UDim.new(0, 6)
    }
}

-- Other Variables
local request = (syn and syn.request) or (http and http.request) or http_request or nil
local tweeninfo = TweenInfo.new(0.3, Enum.EasingStyle.Quint, Enum.EasingDirection.Out)
local PresetGradients = {
    ["Dark"] = {Color3.fromRGB(36, 36, 36), Color3.fromRGB(48, 48, 48), Color3.fromRGB(36, 36, 36)},
    ["Blurple"] = {Color3.fromRGB(65, 105, 225), Color3.fromRGB(70, 115, 235), Color3.fromRGB(65, 105, 225)},
    ["Aqua"] = {Color3.fromRGB(50, 190, 180), Color3.fromRGB(60, 210, 200), Color3.fromRGB(50, 190, 180)},
    ["Royal"] = {Color3.fromRGB(100, 65, 165), Color3.fromRGB(125, 80, 190), Color3.fromRGB(100, 65, 165)},
    ["Crimson"] = {Color3.fromRGB(175, 50, 50), Color3.fromRGB(200, 70, 70), Color3.fromRGB(175, 50, 50)},
    ["Ocean"] = {Color3.fromRGB(40, 140, 200), Color3.fromRGB(50, 160, 220), Color3.fromRGB(40, 140, 200)},
    ["Forest"] = {Color3.fromRGB(40, 140, 80), Color3.fromRGB(50, 160, 90), Color3.fromRGB(40, 140, 80)},
    ["Sunrise"] = {Color3.fromRGB(210, 120, 50), Color3.fromRGB(230, 140, 60), Color3.fromRGB(210, 120, 50)},
    ["Grape"] = {Color3.fromRGB(150, 70, 180), Color3.fromRGB(170, 90, 200), Color3.fromRGB(150, 70, 180)},
    ["Slate"] = {Color3.fromRGB(80, 90, 110), Color3.fromRGB(100, 110, 130), Color3.fromRGB(80, 90, 110)},
}

-- Icons module
local IconModule = {
    Material = {
        ["home"] = "http://www.roblox.com/asset/?id=6026568195",
        ["settings"] = "http://www.roblox.com/asset/?id=6031280882",
        ["search"] = "http://www.roblox.com/asset/?id=6031154871",
        ["close"] = "http://www.roblox.com/asset/?id=6031094678",
        ["minimize"] = "http://www.roblox.com/asset/?id=6026568240",
        ["maximize"] = "http://www.roblox.com/asset/?id=6026568267",
        ["check"] = "http://www.roblox.com/asset/?id=6031094667",
        ["error"] = "http://www.roblox.com/asset/?id=6031071057",
        ["warning"] = "http://www.roblox.com/asset/?id=6031071053",
        ["info"] = "http://www.roblox.com/asset/?id=6026568227",
        ["toggle_on"] = "http://www.roblox.com/asset/?id=6031068430",
        ["toggle_off"] = "http://www.roblox.com/asset/?id=6031068429",
        ["arrow_drop_down"] = "http://www.roblox.com/asset/?id=6031091004",
        ["arrow_drop_up"] = "http://www.roblox.com/asset/?id=6031090990",
        ["keyboard_arrow_down"] = "http://www.roblox.com/asset/?id=6034818372",
        ["keyboard_arrow_up"] = "http://www.roblox.com/asset/?id=6034818379",
        ["keyboard_arrow_right"] = "http://www.roblox.com/asset/?id=6034818365",
        ["keyboard_arrow_left"] = "http://www.roblox.com/asset/?id=6034818375",
        ["expand_more"] = "http://www.roblox.com/asset/?id=6031094687",
        ["expand_less"] = "http://www.roblox.com/asset/?id=6031094679",
    }
}

-- Utility Functions
local function GetIcon(icon, source)
    if source == "Custom" then
        return "rbxassetid://" .. icon
    else
        if icon ~= nil and IconModule[source] then
            local sourceicon = IconModule[source]
            return sourceicon[icon]
        else
            return nil
        end
    end
end

local function Kwargify(defaults, passed)
    for i, v in pairs(defaults) do
        if passed[i] == nil then
            passed[i] = v
        end
    end
    return passed
end

local function PackColor(Color)
    return {R = Color.R * 255, G = Color.G * 255, B = Color.B * 255}
end    

local function UnpackColor(Color)
    return Color3.fromRGB(Color.R, Color.G, Color.B)
end

function tween(object, goal, callback, tweenin)
    local tween = TweenService:Create(object, tweenin or tweeninfo, goal)
    tween.Completed:Connect(callback or function() end)
    tween:Play()
    return tween
end

-- Make an element draggable
local function Draggable(frame, drag, clampToScreen)
    if not drag then drag = frame end
    
    local dragging = false
    local dragInput
    local dragStart
    local startPos
    
    local function update(input)
        local delta = input.Position - dragStart
        local newPosition = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        
        if clampToScreen then
            -- Ensure window stays visible on screen
            local screenSize = Camera.ViewportSize
            local frameSize = frame.AbsoluteSize
            
            local minX = 30
            local maxX = screenSize.X - (frameSize.X - 30)
            local minY = 30
            local maxY = screenSize.Y - 30
            
            newPosition = UDim2.new(
                0, 
                math.clamp(newPosition.X.Offset, minX, maxX),
                0, 
                math.clamp(newPosition.Y.Offset, minY, maxY)
            )
        end
        
        frame.Position = newPosition
    end
    
    drag.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = frame.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    
    drag.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            update(input)
        end
    end)
end

-- Blur effect module for window
local function BlurModule(Frame)
    local RunService = game:GetService('RunService')
    local camera = workspace.CurrentCamera
    local MTREL = "Glass"
    local binds = {}
    local root = Instance.new('Folder', camera)
    root.Name = 'VexBlur'

    local gToken = math.random(1, 99999999)

    local DepthOfField = Instance.new('DepthOfFieldEffect', game:GetService('Lighting'))
    DepthOfField.FarIntensity = 0
    DepthOfField.FocusDistance = 51.6
    DepthOfField.InFocusRadius = 50
    DepthOfField.NearIntensity = 6
    DepthOfField.Name = "DPT_"..gToken

    local frame = Instance.new('Frame')
    frame.Parent = Frame
    frame.Size = UDim2.new(0.95, 0, 0.95, 0)
    frame.Position = UDim2.new(0.5, 0, 0.5, 0)
    frame.AnchorPoint = Vector2.new(0.5, 0.5)
    frame.BackgroundTransparency = 1

    local GenUid; do
        local id = 0
        function GenUid()
            id = id + 1
            return 'vex::'..tostring(id)
        end
    end

    do
        local function IsNotNaN(x)
            return x == x
        end
        local continue = IsNotNaN(camera:ScreenPointToRay(0,0).Origin.x)
        while not continue do
            RunService.RenderStepped:wait()
            continue = IsNotNaN(camera:ScreenPointToRay(0,0).Origin.x)
        end
    end

    local DrawQuad; do
        local acos, max, pi, sqrt = math.acos, math.max, math.pi, math.sqrt
        local sz = 0.2
        
        local function DrawTriangle(v1, v2, v3, p0, p1)
            local s1 = (v1 - v2).magnitude
            local s2 = (v2 - v3).magnitude
            local s3 = (v3 - v1).magnitude
            local smax = max(s1, s2, s3)
            local A, B, C
            if s1 == smax then
                A, B, C = v1, v2, v3
            elseif s2 == smax then
                A, B, C = v2, v3, v1
            elseif s3 == smax then
                A, B, C = v3, v1, v2
            end

            local para = ( (B-A).x*(C-A).x + (B-A).y*(C-A).y + (B-A).z*(C-A).z ) / (A-B).magnitude
            local perp = sqrt((C-A).magnitude^2 - para*para)
            local dif_para = (A - B).magnitude - para

            local st = CFrame.new(B, A)
            local za = CFrame.Angles(pi/2,0,0)

            local cf0 = st

            local Top_Look = (cf0 * za).lookVector
            local Mid_Point = A + CFrame.new(A, B).lookVector * para
            local Needed_Look = CFrame.new(Mid_Point, C).lookVector
            local dot = Top_Look.x*Needed_Look.x + Top_Look.y*Needed_Look.y + Top_Look.z*Needed_Look.z

            local ac = CFrame.Angles(0, 0, acos(dot))

            cf0 = cf0 * ac
            if ((cf0 * za).lookVector - Needed_Look).magnitude > 0.01 then
                cf0 = cf0 * CFrame.Angles(0, 0, -2*acos(dot))
            end
            cf0 = cf0 * CFrame.new(0, perp/2, -(dif_para + para/2))

            local cf1 = st * ac * CFrame.Angles(0, pi, 0)
            if ((cf1 * za).lookVector - Needed_Look).magnitude > 0.01 then
                cf1 = cf1 * CFrame.Angles(0, 0, 2*acos(dot))
            end
            cf1 = cf1 * CFrame.new(0, perp/2, dif_para/2)

            if not p0 then
                p0 = Instance.new('Part')
                p0.FormFactor = 'Custom'
                p0.TopSurface = 0
                p0.BottomSurface = 0
                p0.Anchored = true
                p0.CanCollide = false
                p0.CastShadow = false
                p0.Material = MTREL
                p0.Size = Vector3.new(sz, sz, sz)
                local mesh = Instance.new('SpecialMesh', p0)
                mesh.MeshType = 2
                mesh.Name = 'WedgeMesh'
            end
            p0.WedgeMesh.Scale = Vector3.new(0, perp/sz, para/sz)
            p0.CFrame = cf0

            if not p1 then
                p1 = p0:clone()
            end
            p1.WedgeMesh.Scale = Vector3.new(0, perp/sz, dif_para/sz)
            p1.CFrame = cf1

            return p0, p1
        end

        function DrawQuad(v1, v2, v3, v4, parts)
            parts[1], parts[2] = DrawTriangle(v1, v2, v3, parts[1], parts[2])
            parts[3], parts[4] = DrawTriangle(v3, v2, v4, parts[3], parts[4])
        end
    end

    if binds[frame] then
        return binds[frame].parts
    end

    local uid = GenUid()
    local parts = {}
    local f = Instance.new('Folder', root)
    f.Name = frame.Name

    local parents = {}
    do
        local function add(child)
            if child:IsA'GuiObject' then
                parents[#parents + 1] = child
                add(child.Parent)
            end
        end
        add(frame)
    end

    local function UpdateOrientation(fetchProps)
        local properties = {
            Transparency = 0.98;
            BrickColor = BrickColor.new('Institutional white');
        }
        local zIndex = 1 - 0.05*frame.ZIndex

        local tl, br = frame.AbsolutePosition, frame.AbsolutePosition + frame.AbsoluteSize
        local tr, bl = Vector2.new(br.x, tl.y), Vector2.new(tl.x, br.y)
        do
            local rot = 0;
            for _, v in ipairs(parents) do
                rot = rot + v.Rotation
            end
            if rot ~= 0 and rot%180 ~= 0 then
                local mid = tl:lerp(br, 0.5)
                local s, c = math.sin(math.rad(rot)), math.cos(math.rad(rot))
                local vec = tl
                tl = Vector2.new(c*(tl.x - mid.x) - s*(tl.y - mid.y), s*(tl.x - mid.x) + c*(tl.y - mid.y)) + mid
                tr = Vector2.new(c*(tr.x - mid.x) - s*(tr.y - mid.y), s*(tr.x - mid.x) + c*(tr.y - mid.y)) + mid
                bl = Vector2.new(c*(bl.x - mid.x) - s*(bl.y - mid.y), s*(bl.x - mid.x) + c*(bl.y - mid.y)) + mid
                br = Vector2.new(c*(br.x - mid.x) - s*(br.y - mid.y), s*(br.x - mid.x) + c*(br.y - mid.y)) + mid
            end
        end
        DrawQuad(
            camera:ScreenPointToRay(tl.x, tl.y, zIndex).Origin, 
            camera:ScreenPointToRay(tr.x, tr.y, zIndex).Origin, 
            camera:ScreenPointToRay(bl.x, bl.y, zIndex).Origin, 
            camera:ScreenPointToRay(br.x, br.y, zIndex).Origin, 
            parts
        )
        if fetchProps then
            for _, pt in pairs(parts) do
                pt.Parent = f
            end
            for propName, propValue in pairs(properties) do
                for _, pt in pairs(parts) do
                    pt[propName] = propValue
                end
            end
        end
    end

    UpdateOrientation(true)
    RunService:BindToRenderStep(uid, 2000, UpdateOrientation)
end

-- Create VexUI ScreenGui
local function CreateVexUI()
    local VexUI = Instance.new("ScreenGui")
    VexUI.Name = "VexUI"
    VexUI.DisplayOrder = 1000000000
    VexUI.IgnoreGuiInset = true
    VexUI.ResetOnSpawn = false
    VexUI.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    
    -- Set parent based on environment
    if gethui then
        VexUI.Parent = gethui()
    elseif syn and syn.protect_gui then 
        syn.protect_gui(VexUI)
        VexUI.Parent = CoreGui
    elseif not isStudio and CoreGui:FindFirstChild("RobloxGui") then
        VexUI.Parent = CoreGui:FindFirstChild("RobloxGui")
    elseif not isStudio then
        VexUI.Parent = CoreGui
    else
        VexUI.Parent = Player:WaitForChild("PlayerGui")
    end
    
    -- Create template container
    local Templates = Instance.new("Folder")
    Templates.Name = "Templates"
    Templates.Parent = VexUI
    
    -- Create Notifications frame
    local Notifications = Instance.new("Frame")
    Notifications.Name = "Notifications"
    Notifications.BackgroundTransparency = 1
    Notifications.Position = UDim2.new(1, -20, 0, 20)
    Notifications.Size = UDim2.new(0, 300, 1, -40)
    Notifications.AnchorPoint = Vector2.new(1, 0)
    Notifications.Parent = VexUI
    
    -- Create UIListLayout for notifications
    local NotificationList = Instance.new("UIListLayout")
    NotificationList.Name = "NotificationList"
    NotificationList.HorizontalAlignment = Enum.HorizontalAlignment.Right
    NotificationList.SortOrder = Enum.SortOrder.LayoutOrder
    NotificationList.Padding = UDim.new(0, 10)
    NotificationList.Parent = Notifications
    
    -- Create notification template
    local NotificationTemplate = Instance.new("Frame")
    NotificationTemplate.Name = "Template"
    NotificationTemplate.BackgroundColor3 = VexTheme.Window.Background
    NotificationTemplate.BorderSizePixel = 0
    NotificationTemplate.Size = UDim2.new(1, 0, 0, 0)
    NotificationTemplate.Position = UDim2.new(1, 0, 0, 0)
    NotificationTemplate.AnchorPoint = Vector2.new(1, 0)
    NotificationTemplate.BackgroundTransparency = 0.1
    NotificationTemplate.Visible = false
    NotificationTemplate.Parent = Notifications
    
    -- Add corner and stroke to notification
    local NotifCorner = Instance.new("UICorner")
    NotifCorner.CornerRadius = UDim.new(0, 8)
    NotifCorner.Parent = NotificationTemplate
    
    local NotifStroke = Instance.new("UIStroke")
    NotifStroke.Color = VexTheme.Window.Stroke
    NotifStroke.Thickness = 1.5
    NotifStroke.Transparency = 0.5
    NotifStroke.Parent = NotificationTemplate
    
    -- Create Window Template
    local WindowTemplate = Instance.new("Frame")
    WindowTemplate.Name = "WindowTemplate"
    WindowTemplate.BackgroundColor3 = VexTheme.Window.Background
    WindowTemplate.BorderSizePixel = 0
    WindowTemplate.Size = UDim2.new(0, 600, 0, 400)
    WindowTemplate.Position = UDim2.new(0.5, 0, 0.5, 0)
    WindowTemplate.AnchorPoint = Vector2.new(0.5, 0.5)
    WindowTemplate.Visible = false
    WindowTemplate.Parent = VexUI
    
    -- Add corner to WindowTemplate
    local WindowCorner = Instance.new("UICorner")
    WindowCorner.CornerRadius = VexTheme.Window.Radius
    WindowCorner.Parent = WindowTemplate
    
    -- Add stroke to WindowTemplate
    local WindowStroke = Instance.new("UIStroke")
    WindowStroke.Color = VexTheme.Window.Stroke
    WindowStroke.Thickness = 1.5
    WindowStroke.Parent = WindowTemplate
    
    -- Create TitleBar
    local TitleBar = Instance.new("Frame")
    TitleBar.Name = "TitleBar"
    TitleBar.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
    TitleBar.BackgroundTransparency = 0.5
    TitleBar.BorderSizePixel = 0
    TitleBar.Size = UDim2.new(1, 0, 0, 40)
    TitleBar.Parent = WindowTemplate
    
    -- Add corner to TitleBar
    local TitleCorner = Instance.new("UICorner")
    TitleCorner.CornerRadius = UDim.new(0, 8)
    TitleCorner.Parent = TitleBar
    
    -- Create Title and Logo
    local TitleLabel = Instance.new("TextLabel")
    TitleLabel.Name = "Title"
    TitleLabel.BackgroundTransparency = 1
    TitleLabel.Position = UDim2.new(0, 40, 0, 0)
    TitleLabel.Size = UDim2.new(1, -120, 1, 0)
    TitleLabel.Font = Enum.Font.GothamBold
    TitleLabel.TextColor3 = VexTheme.Window.Text
    TitleLabel.TextSize = 16
    TitleLabel.TextXAlignment = Enum.TextXAlignment.Left
    TitleLabel.Text = "Vex Hub"
    TitleLabel.Parent = TitleBar
    
    local Logo = Instance.new("ImageLabel")
    Logo.Name = "Logo"
    Logo.BackgroundTransparency = 1
    Logo.Position = UDim2.new(0, 10, 0.5, 0)
    Logo.Size = UDim2.new(0, 24, 0, 24)
    Logo.AnchorPoint = Vector2.new(0, 0.5)
    Logo.Image = "rbxassetid://10723434557"
    Logo.Parent = TitleBar
    
    -- Create Window Controls
    local Controls = Instance.new("Frame")
    Controls.Name = "Controls"
    Controls.BackgroundTransparency = 1
    Controls.Position = UDim2.new(1, -10, 0, 0)
    Controls.Size = UDim2.new(0, 100, 1, 0)
    Controls.AnchorPoint = Vector2.new(1, 0)
    Controls.Parent = TitleBar
    
    local ControlsLayout = Instance.new("UIListLayout")
    ControlsLayout.FillDirection = Enum.FillDirection.Horizontal
    ControlsLayout.HorizontalAlignment = Enum.HorizontalAlignment.Right
    ControlsLayout.VerticalAlignment = Enum.VerticalAlignment.Center
    ControlsLayout.Padding = UDim.new(0, 8)
    ControlsLayout.Parent = Controls
    
    -- Create control buttons
    local function CreateControlButton(name, icon)
        local Button = Instance.new("Frame")
        Button.Name = name
        Button.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
        Button.BackgroundTransparency = 0.8
        Button.Size = UDim2.new(0, 26, 0, 26)
        Button.Parent = Controls
        
        local Corner = Instance.new("UICorner")
        Corner.CornerRadius = UDim.new(0, 4)
        Corner.Parent = Button
        
        local Icon = Instance.new("ImageLabel")
        Icon.Name = "Icon"
        Icon.BackgroundTransparency = 1
        Icon.Position = UDim2.new(0.5, 0, 0.5, 0)
        Icon.Size = UDim2.new(0, 16, 0, 16)
        Icon.AnchorPoint = Vector2.new(0.5, 0.5)
        Icon.Image = GetIcon(icon, "Material")
        Icon.Parent = Button
        
        local Interact = Instance.new("TextButton")
        Interact.Name = "Interact"
        Interact.BackgroundTransparency = 1
        Interact.Text = ""
        Interact.Size = UDim2.new(1, 0, 1, 0)
        Interact.Parent = Button
        
        return Button
    end
    
    local CloseButton = CreateControlButton("Close", "close")
    local MinimizeButton = CreateControlButton("Minimize", "minimize")
    
    -- Create Content Area
    local Content = Instance.new("Frame")
    Content.Name = "Content"
    Content.BackgroundTransparency = 1
    Content.Position = UDim2.new(0, 0, 0, 40)
    Content.Size = UDim2.new(1, 0, 1, -40)
    Content.ClipsDescendants = true
    Content.Parent = WindowTemplate
    
    -- Create Navigation
    local Navigation = Instance.new("Frame")
    Navigation.Name = "Navigation"
    Navigation.BackgroundColor3 = Color3.fromRGB(18, 18, 18)
    Navigation.BackgroundTransparency = 0.2
    Navigation.BorderSizePixel = 0
    Navigation.Size = UDim2.new(0, 60, 1, 0)
    Navigation.Parent = Content
    
    local NavCorner = Instance.new("UICorner")
    NavCorner.CornerRadius = UDim.new(0, 8)
    NavCorner.Parent = Navigation
    
    local NavTabs = Instance.new("ScrollingFrame")
    NavTabs.Name = "Tabs"
    NavTabs.BackgroundTransparency = 1
    NavTabs.BorderSizePixel = 0
    NavTabs.Position = UDim2.new(0, 0, 0, 10)
    NavTabs.Size = UDim2.new(1, 0, 1, -20)
    NavTabs.ScrollBarThickness = 0
    NavTabs.ScrollingEnabled = true
    NavTabs.AutomaticCanvasSize = Enum.AutomaticSize.Y
    NavTabs.CanvasSize = UDim2.new(0, 0, 0, 0)
    NavTabs.Parent = Navigation
    
    local TabsLayout = Instance.new("UIListLayout")
    TabsLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
    TabsLayout.SortOrder = Enum.SortOrder.LayoutOrder
    TabsLayout.Padding = UDim.new(0, 10)
    TabsLayout.Parent = NavTabs
    
    -- Create Tab Button Template
    local TabTemplate = Instance.new("Frame")
    TabTemplate.Name = "TabTemplate"
    TabTemplate.Size = UDim2.new(0, 40, 0, 40)
    TabTemplate.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    TabTemplate.BackgroundTransparency = 0.8
    TabTemplate.Parent = Templates
    
    local TabCorner = Instance.new("UICorner")
    TabCorner.CornerRadius = UDim.new(0, 6)
    TabCorner.Parent = TabTemplate
    
    local TabStroke = Instance.new("UIStroke")
    TabStroke.Color = VexTheme.Window.Stroke
    TabStroke.Thickness = 1
    TabStroke.Transparency = 0.7
    TabStroke.Parent = TabTemplate
    
    local TabIcon = Instance.new("ImageLabel")
    TabIcon.Name = "Icon"
    TabIcon.BackgroundTransparency = 1
    TabIcon.Position = UDim2.new(0.5, 0, 0.5, 0)
    TabIcon.Size = UDim2.new(0, 24, 0, 24)
    TabIcon.AnchorPoint = Vector2.new(0.5, 0.5)
    TabIcon.Image = "rbxassetid://10723434557"
    TabIcon.Parent = TabTemplate
    
    local TabInteract = Instance.new("TextButton")
    TabInteract.Name = "Interact"
    TabInteract.BackgroundTransparency = 1
    TabInteract.Text = ""
    TabInteract.Size = UDim2.new(1, 0, 1, 0)
    TabInteract.Parent = TabTemplate
    
    -- Create Element Templates
    local ElementTemplates = Instance.new("Folder")
    ElementTemplates.Name = "Elements"
    ElementTemplates.Parent = Templates
    
    -- Pages Container
    local Pages = Instance.new("Frame")
    Pages.Name = "Pages"
    Pages.BackgroundTransparency = 1
    Pages.Position = UDim2.new(0, 70, 0, 10)
    Pages.Size = UDim2.new(1, -90, 1, -20)
    Pages.ClipsDescendants = true
    Pages.Parent = Content
    
    -- Create page template
    local PageTemplate = Instance.new("ScrollingFrame")
    PageTemplate.Name = "PageTemplate"
    PageTemplate.BackgroundTransparency = 1
    PageTemplate.BorderSizePixel = 0
    PageTemplate.Size = UDim2.new(1, 0, 1, 0)
    PageTemplate.ScrollBarThickness = 3
    PageTemplate.ScrollBarImageColor3 = Color3.fromRGB(70, 70, 70)
    PageTemplate.ScrollingEnabled = true
    PageTemplate.AutomaticCanvasSize = Enum.AutomaticSize.Y
    PageTemplate.CanvasSize = UDim2.new(0, 0, 0, 0)
    PageTemplate.Visible = false
    PageTemplate.Parent = Templates
    
    local PagePadding = Instance.new("UIPadding")
    PagePadding.PaddingLeft = UDim.new(0, 10)
    PagePadding.PaddingRight = UDim.new(0, 10)
    PagePadding.PaddingTop = UDim.new(0, 10)
    PagePadding.PaddingBottom = UDim.new(0, 10)
    PagePadding.Parent = PageTemplate
    
    local PageLayout = Instance.new("UIListLayout")
    PageLayout.SortOrder = Enum.SortOrder.LayoutOrder
    PageLayout.Padding = UDim.new(0, 10)
    PageLayout.Parent = PageTemplate
    
    return VexUI
end

-- Create UI elements
local VexUI = CreateVexUI()

-- Main window creation function
function Vex:CreateWindow(WindowSettings)
    WindowSettings = Kwargify({
        Title = "Vex Hub",
        SubTitle = "",
        TabWidth = 160,
        Size = UDim2.new(0, 550, 0, 350),
        Position = UDim2.new(0.5, -275, 0.5, -175), -- Center by default
        Acrylic = true, -- Windows 11 style acrylic effect
        Theme = "Dark"
    }, WindowSettings or {})
    
    -- Check if VexUI exists, create if not
    if not VexUI then
        -- Create VexUI container
        VexUI = {
            Windows = {},
            Templates = {
                Elements = Instance.new("Folder")
            }
        }
        
        -- Set default theme
        VexTheme = {
            Window = {
                Background = Color3.fromRGB(25, 25, 25),
                Stroke = Color3.fromRGB(60, 60, 60),
                TabBackground = Color3.fromRGB(20, 20, 20),
                TabBackgroundSelected = Color3.fromRGB(30, 30, 30),
                TabText = Color3.fromRGB(240, 240, 240),
                TabTextSelected = Color3.fromRGB(255, 255, 255),
                SectionBackground = Color3.fromRGB(30, 30, 30),
                SectionBackgroundLight = Color3.fromRGB(35, 35, 35)
            },
            Elements = {
                Background = Color3.fromRGB(40, 40, 40),
                Stroke = Color3.fromRGB(80, 80, 80),
                Text = Color3.fromRGB(240, 240, 240),
                SubText = Color3.fromRGB(200, 200, 200),
                Accent = Color3.fromRGB(65, 105, 225), -- Royal Blue
                ToggleOn = Color3.fromRGB(65, 105, 225),
                ToggleOff = Color3.fromRGB(60, 60, 60),
                SliderBackground = Color3.fromRGB(55, 55, 55),
                Radius = UDim.new(0, 6)
            }
        }
        
        -- Apply theme if specified
        if WindowSettings.Theme and WindowSettings.Theme ~= "Dark" then
            Vex:SetTheme(WindowSettings.Theme)
        end
    end
    
    -- Create UI container
    local VexWindow = Instance.new("ScreenGui")
    VexWindow.Name = "Vex_" .. HttpService:GenerateGUID(false)
    VexWindow.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    
    -- Set parent based on environment
    if syn then
        syn.protect_gui(VexWindow)
        VexWindow.Parent = CoreGui
    elseif gethui then
        VexWindow.Parent = gethui()
    elseif CoreGui:FindFirstChild("RobloxGui") then
        VexWindow.Parent = CoreGui.RobloxGui
    else
        VexWindow.Parent = CoreGui
    end
    
    -- Create main window
    local Main = Instance.new("Frame")
    Main.Name = "Main"
    Main.BackgroundColor3 = VexTheme.Window.Background
    Main.BorderSizePixel = 0
    Main.Position = WindowSettings.Position
    Main.Size = WindowSettings.Size
    Main.ClipsDescendants = true
    Main.Parent = VexWindow
    
    -- Create corner
    local MainCorner = Instance.new("UICorner")
    MainCorner.CornerRadius = UDim.new(0, 8)
    MainCorner.Parent = Main
    
    -- Create window shadow
    local MainShadow = Instance.new("ImageLabel")
    MainShadow.Name = "Shadow"
    MainShadow.BackgroundTransparency = 1
    MainShadow.Position = UDim2.new(0.5, 0, 0.5, 0)
    MainShadow.Size = UDim2.new(1, 30, 1, 30)
    MainShadow.AnchorPoint = Vector2.new(0.5, 0.5)
    MainShadow.ScaleType = Enum.ScaleType.Slice
    MainShadow.SliceCenter = Rect.new(20, 20, 280, 280)
    MainShadow.Image = "rbxassetid://5554236805"
    MainShadow.ImageColor3 = Color3.fromRGB(0, 0, 0)
    MainShadow.ImageTransparency = 0.6
    MainShadow.ZIndex = 0
    MainShadow.Parent = Main
    
    -- Create the window instance
    local WindowInstance = VexUI.WindowTemplate:Clone()
    WindowInstance.Name = "Window_" .. WindowSettings.Name
    WindowInstance.Parent = VexUI
    WindowInstance.Visible = true
    
    -- Set window properties
    WindowInstance.TitleBar.Title.Text = WindowSettings.Name
    WindowInstance.TitleBar.Logo.Image = "rbxassetid://" .. WindowSettings.LogoID
    
    -- Initialize WindowAPI
    local WindowAPI = {
        Instance = {
            Main = Main,
            TopBar = TitleBar,
            Container = Content
        },
        Settings = WindowSettings,
        Tabs = {},
        CurrentTab = nil
    }
    
    -- Create Window object
    local Window = setmetatable({}, {
        __index = WindowAPI
    })
    
    -- Add window to VexUI.Windows array
    if not VexUI.Windows then
        VexUI.Windows = {}
    end
    table.insert(VexUI.Windows, Window)
    
    -- Make the window draggable
    Window:MakeDraggable()
    
    -- Apply acrylic effect if enabled
    if WindowSettings.Acrylic then
        Window:SetAcrylic(true)
    end
    
    -- Create Tab function
    function Window:CreateTab(TabSettings)
        TabSettings = Kwargify({
            Title = "Tab",
            Icon = "home" -- Default icon
        }, TabSettings or {})
        
        -- Create tab button
        local TabButton = Instance.new("Frame")
        TabButton.Name = "Tab_" .. TabSettings.Title
        TabButton.BackgroundColor3 = VexTheme.Window.TabBackground
        TabButton.BackgroundTransparency = 0.8
        TabButton.Size = UDim2.new(1, 0, 0, 36)
        TabButton.Position = UDim2.new(0, 0, 0, #Window.Tabs * 36)
        TabButton.Parent = Navigation.Tabs
        
        -- Create tab page
        local TabPage = VexUI.Templates.PageTemplate:Clone()
        TabPage.Name = TabSettings.Name .. "Page"
        TabPage.Parent = Pages
        TabPage.Visible = false
        
        -- Create Tab API
        local Tab = {
            Button = TabButton,
            Page = TabPage,
            Sections = {},
            Elements = {},
            Name = TabSettings.Name
        }
        
        -- Tab button hover effects
        TabButton.Interact.MouseEnter:Connect(function()
            if Window.CurrentTab ~= Tab then
                tween(TabButton, {BackgroundTransparency = 0.6})
            end
        end)
        
        TabButton.Interact.MouseLeave:Connect(function()
            if Window.CurrentTab ~= Tab then
                tween(TabButton, {BackgroundTransparency = 0.8})
            end
        end)
        
        -- Tab selection
        TabButton.Interact.MouseButton1Click:Connect(function()
            Window:SelectTab(Tab)
        end)
        
        -- Section creation function
        function Tab:CreateSection(SectionSettings)
            SectionSettings = Kwargify({
                Name = "Section",
                Collapsible = true
            }, SectionSettings or {})
            
            -- Create section container
            local Section = Instance.new("Frame")
            Section.Name = SectionSettings.Name .. "Section"
            Section.BackgroundColor3 = VexTheme.Elements.Background
            Section.BackgroundTransparency = 0.3
            Section.BorderSizePixel = 0
            Section.Size = UDim2.new(1, 0, 0, 36) -- Initial height, will expand
            Section.AutomaticSize = Enum.AutomaticSize.Y
            Section.Parent = TabPage
            
            -- Add corner to section
            local SectionCorner = Instance.new("UICorner")
            SectionCorner.CornerRadius = VexTheme.Elements.Radius
            SectionCorner.Parent = Section
            
            -- Add stroke to section
            local SectionStroke = Instance.new("UIStroke")
            SectionStroke.Color = VexTheme.Elements.Stroke
            SectionStroke.Thickness = 1
            SectionStroke.Transparency = 0.5
            SectionStroke.Parent = Section
            
            -- Create header
            local Header = Instance.new("Frame")
            Header.Name = "Header"
            Header.BackgroundTransparency = 1
            Header.Size = UDim2.new(1, 0, 0, 36)
            Header.Parent = Section
            
            local Title = Instance.new("TextLabel")
            Title.Name = "Title"
            Title.BackgroundTransparency = 1
            Title.Position = UDim2.new(0, 10, 0, 0)
            Title.Size = UDim2.new(1, -50, 1, 0)
            Title.Font = Enum.Font.GothamBold
            Title.TextColor3 = VexTheme.Elements.Text
            Title.TextSize = 14
            Title.TextXAlignment = Enum.TextXAlignment.Left
            Title.Text = SectionSettings.Name
            Title.Parent = Header
            
            -- Add collapse button if section is collapsible
            local CollapseButton
            if SectionSettings.Collapsible then
                CollapseButton = Instance.new("ImageButton")
                CollapseButton.Name = "CollapseButton"
                CollapseButton.BackgroundTransparency = 1
                CollapseButton.Position = UDim2.new(1, -30, 0.5, 0)
                CollapseButton.Size = UDim2.new(0, 20, 0, 20)
                CollapseButton.AnchorPoint = Vector2.new(0, 0.5)
                CollapseButton.Image = GetIcon("expand_less", "Material")
                CollapseButton.Parent = Header
            end
            
            -- Create content container
            local Content = Instance.new("Frame")
            Content.Name = "Content"
            Content.BackgroundTransparency = 1
            Content.Position = UDim2.new(0, 0, 0, 36)
            Content.Size = UDim2.new(1, 0, 0, 0)
            Content.AutomaticSize = Enum.AutomaticSize.Y
            Content.ClipsDescendants = true
            Content.Parent = Section
            
            -- Add padding and layout to content
            local ContentPadding = Instance.new("UIPadding")
            ContentPadding.PaddingLeft = UDim.new(0, 10)
            ContentPadding.PaddingRight = UDim.new(0, 10)
            ContentPadding.PaddingTop = UDim.new(0, 5)
            ContentPadding.PaddingBottom = UDim.new(0, 10)
            ContentPadding.Parent = Content
            
            local ContentLayout = Instance.new("UIListLayout")
            ContentLayout.SortOrder = Enum.SortOrder.LayoutOrder
            ContentLayout.Padding = UDim.new(0, 8)
            ContentLayout.Parent = Content
            
            -- Create Section API
            local SectionAPI = {
                Instance = Section,
                Settings = SectionSettings,
                Elements = {},
                Collapsed = false
            }
            
            -- Add collapse functionality
            if SectionSettings.Collapsible then
                Header.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        SectionAPI:Toggle()
                    end
                end)
                
                function SectionAPI:Toggle()
                    self.Collapsed = not self.Collapsed
                    
                    if self.Collapsed then
                        tween(Content, {Size = UDim2.new(1, 0, 0, 0)})
                        tween(CollapseButton, {Rotation = 180})
                    else
                        tween(Content, {Size = UDim2.new(1, 0, 0, ContentLayout.AbsoluteContentSize.Y + 15)})
                        tween(CollapseButton, {Rotation = 0})
                    end
                end
            end
            
            -- Add Section to Tab
            table.insert(Tab.Sections, SectionAPI)
            
            -- Return Section API with element creation functions (will be added in next part)
            return SectionAPI
        end
        
        -- Add tab to window
        table.insert(Window.Tabs, Tab)
        
        -- Select this tab if it's the first one
        if #Window.Tabs == 1 then
            Window:SelectTab(Tab)
        end
        
        return Tab
    end
    
    -- Tab selection function
    function Window:SelectTab(Tab)
        -- Hide current tab if exists
        if Window.CurrentTab then
            Window.CurrentTab.Page.Visible = false
            tween(Window.CurrentTab.Button, {BackgroundTransparency = 0.8})
            tween(Window.CurrentTab.Button.UIStroke, {Transparency = 0.7})
        end
        
        -- Show new tab
        Tab.Page.Visible = true
        tween(Tab.Button, {BackgroundTransparency = 0.3})
        tween(Tab.Button.UIStroke, {Transparency = 0.3})
        
        Window.CurrentTab = Tab
    end
    
    -- Initialize window positioning with animation
    WindowInstance.Position = UDim2.new(0.5, 0, -0.5, 0)
    WindowInstance.Visible = true
    tween(WindowInstance, {Position = UDim2.new(0.5, 0, 0.5, 0)})
    
    return Window
end

-- Add button, toggle and label element templates
local function CreateElementTemplates()
    local ElementTemplates = VexUI.Templates.Elements
    
    -- Create Button template
    local ButtonTemplate = Instance.new("Frame")
    ButtonTemplate.Name = "ButtonTemplate"
    ButtonTemplate.BackgroundColor3 = VexTheme.Elements.Background
    ButtonTemplate.BackgroundTransparency = 0.5
    ButtonTemplate.Size = UDim2.new(1, 0, 0, 30) -- Reduced from 36
    ButtonTemplate.Parent = ElementTemplates
    
    local ButtonCorner = Instance.new("UICorner")
    ButtonCorner.CornerRadius = VexTheme.Elements.Radius
    ButtonCorner.Parent = ButtonTemplate
    
    local ButtonStroke = Instance.new("UIStroke")
    ButtonStroke.Color = VexTheme.Elements.Stroke
    ButtonStroke.Thickness = 1
    ButtonStroke.Transparency = 0.5
    ButtonStroke.Parent = ButtonTemplate
    
    local ButtonTitle = Instance.new("TextLabel")
    ButtonTitle.Name = "Title"
    ButtonTitle.BackgroundTransparency = 1
    ButtonTitle.Position = UDim2.new(0, 10, 0, 0)
    ButtonTitle.Size = UDim2.new(1, -20, 1, 0)
    ButtonTitle.Font = Enum.Font.Gotham
    ButtonTitle.TextColor3 = VexTheme.Elements.Text
    ButtonTitle.TextSize = 13 -- Reduced from 14
    ButtonTitle.TextXAlignment = Enum.TextXAlignment.Left
    ButtonTitle.Text = "Button"
    ButtonTitle.Parent = ButtonTemplate
    
    local ButtonInteract = Instance.new("TextButton")
    ButtonInteract.Name = "Interact"
    ButtonInteract.BackgroundTransparency = 1
    ButtonInteract.Text = ""
    ButtonInteract.Size = UDim2.new(1, 0, 1, 0)
    ButtonInteract.Parent = ButtonTemplate
    
    -- Create Toggle template
    local ToggleTemplate = Instance.new("Frame")
    ToggleTemplate.Name = "ToggleTemplate"
    ToggleTemplate.BackgroundColor3 = VexTheme.Elements.Background
    ToggleTemplate.BackgroundTransparency = 0.5
    ToggleTemplate.Size = UDim2.new(1, 0, 0, 30) -- Reduced from 36
    ToggleTemplate.Parent = ElementTemplates
    
    local ToggleCorner = Instance.new("UICorner")
    ToggleCorner.CornerRadius = VexTheme.Elements.Radius
    ToggleCorner.Parent = ToggleTemplate
    
    local ToggleStroke = Instance.new("UIStroke")
    ToggleStroke.Color = VexTheme.Elements.Stroke
    ToggleStroke.Thickness = 1
    ToggleStroke.Transparency = 0.5
    ToggleStroke.Parent = ToggleTemplate
    
    local ToggleTitle = Instance.new("TextLabel")
    ToggleTitle.Name = "Title"
    ToggleTitle.BackgroundTransparency = 1
    ToggleTitle.Position = UDim2.new(0, 10, 0, 0)
    ToggleTitle.Size = UDim2.new(1, -60, 1, 0)
    ToggleTitle.Font = Enum.Font.Gotham
    ToggleTitle.TextColor3 = VexTheme.Elements.Text
    ToggleTitle.TextSize = 14
    ToggleTitle.TextXAlignment = Enum.TextXAlignment.Left
    ToggleTitle.Text = "Toggle"
    ToggleTitle.Parent = ToggleTemplate
    
    -- Create toggle indicator
    local ToggleIndicator = Instance.new("Frame")
    ToggleIndicator.Name = "Indicator"
    ToggleIndicator.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
    ToggleIndicator.Position = UDim2.new(1, -50, 0.5, 0)
    ToggleIndicator.Size = UDim2.new(0, 40, 0, 22)
    ToggleIndicator.AnchorPoint = Vector2.new(0, 0.5)
    ToggleIndicator.Parent = ToggleTemplate
    
    local IndicatorCorner = Instance.new("UICorner")
    IndicatorCorner.CornerRadius = UDim.new(1, 0)
    IndicatorCorner.Parent = ToggleIndicator
    
    local ToggleCircle = Instance.new("Frame")
    ToggleCircle.Name = "Circle"
    ToggleCircle.BackgroundColor3 = Color3.fromRGB(200, 200, 200)
    ToggleCircle.Position = UDim2.new(0, 3, 0.5, 0)
    ToggleCircle.Size = UDim2.new(0, 16, 0, 16)
    ToggleCircle.AnchorPoint = Vector2.new(0, 0.5)
    ToggleCircle.Parent = ToggleIndicator
    
    local CircleCorner = Instance.new("UICorner")
    CircleCorner.CornerRadius = UDim.new(1, 0)
    CircleCorner.Parent = ToggleCircle
    
    local ToggleInteract = Instance.new("TextButton")
    ToggleInteract.Name = "Interact"
    ToggleInteract.BackgroundTransparency = 1
    ToggleInteract.Text = ""
    ToggleInteract.Size = UDim2.new(1, 0, 1, 0)
    ToggleInteract.Parent = ToggleTemplate
    
    -- Create Label template
    local LabelTemplate = Instance.new("Frame")
    LabelTemplate.Name = "LabelTemplate"
    LabelTemplate.BackgroundColor3 = VexTheme.Elements.Background
    LabelTemplate.BackgroundTransparency = 0.5
    LabelTemplate.Size = UDim2.new(1, 0, 0, 36)
    LabelTemplate.Parent = ElementTemplates
    
    local LabelCorner = Instance.new("UICorner")
    LabelCorner.CornerRadius = VexTheme.Elements.Radius
    LabelCorner.Parent = LabelTemplate
    
    local LabelStroke = Instance.new("UIStroke")
    LabelStroke.Color = VexTheme.Elements.Stroke
    LabelStroke.Thickness = 1
    LabelStroke.Transparency = 0.5
    LabelStroke.Parent = LabelTemplate
    
    local LabelTitle = Instance.new("TextLabel")
    LabelTitle.Name = "Title"
    LabelTitle.BackgroundTransparency = 1
    LabelTitle.Position = UDim2.new(0, 10, 0, 0)
    LabelTitle.Size = UDim2.new(1, -20, 1, 0)
    LabelTitle.Font = Enum.Font.Gotham
    LabelTitle.TextColor3 = VexTheme.Elements.Text
    LabelTitle.TextSize = 14
    LabelTitle.TextXAlignment = Enum.TextXAlignment.Left
    LabelTitle.Text = "Label"
    LabelTitle.Parent = LabelTemplate
    
    -- Create Toggle with Description template
    local ToggleDescTemplate = Instance.new("Frame")
    ToggleDescTemplate.Name = "ToggleDescTemplate"
    ToggleDescTemplate.BackgroundColor3 = VexTheme.Elements.Background
    ToggleDescTemplate.BackgroundTransparency = 0.5
    ToggleDescTemplate.Size = UDim2.new(1, 0, 0, 50)
    ToggleDescTemplate.Parent = ElementTemplates
    
    local ToggleDescCorner = Instance.new("UICorner")
    ToggleDescCorner.CornerRadius = VexTheme.Elements.Radius
    ToggleDescCorner.Parent = ToggleDescTemplate
    
    local ToggleDescStroke = Instance.new("UIStroke")
    ToggleDescStroke.Color = VexTheme.Elements.Stroke
    ToggleDescStroke.Thickness = 1
    ToggleDescStroke.Transparency = 0.5
    ToggleDescStroke.Parent = ToggleDescTemplate
    
    local ToggleDescTitle = Instance.new("TextLabel")
    ToggleDescTitle.Name = "Title"
    ToggleDescTitle.BackgroundTransparency = 1
    ToggleDescTitle.Position = UDim2.new(0, 10, 0, 5)
    ToggleDescTitle.Size = UDim2.new(1, -60, 0, 20)
    ToggleDescTitle.Font = Enum.Font.GothamBold
    ToggleDescTitle.TextColor3 = VexTheme.Elements.Text
    ToggleDescTitle.TextSize = 14
    ToggleDescTitle.TextXAlignment = Enum.TextXAlignment.Left
    ToggleDescTitle.Text = "Toggle"
    ToggleDescTitle.Parent = ToggleDescTemplate
    
    local ToggleDesc = Instance.new("TextLabel")
    ToggleDesc.Name = "Description"
    ToggleDesc.BackgroundTransparency = 1
    ToggleDesc.Position = UDim2.new(0, 10, 0, 25)
    ToggleDesc.Size = UDim2.new(1, -60, 0, 20)
    ToggleDesc.Font = Enum.Font.Gotham
    ToggleDesc.TextColor3 = VexTheme.Elements.SubText
    ToggleDesc.TextSize = 12
    ToggleDesc.TextXAlignment = Enum.TextXAlignment.Left
    ToggleDesc.Text = "Toggle description"
    ToggleDesc.TextWrapped = true
    ToggleDesc.Parent = ToggleDescTemplate
    
    -- Create toggle indicator for desc version
    local ToggleDescIndicator = Instance.new("Frame")
    ToggleDescIndicator.Name = "Indicator"
    ToggleDescIndicator.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
    ToggleDescIndicator.Position = UDim2.new(1, -50, 0, 14)
    ToggleDescIndicator.Size = UDim2.new(0, 40, 0, 22)
    ToggleDescIndicator.AnchorPoint = Vector2.new(0, 0)
    ToggleDescIndicator.Parent = ToggleDescTemplate
    
    local IndicatorDescCorner = Instance.new("UICorner")
    IndicatorDescCorner.CornerRadius = UDim.new(1, 0)
    IndicatorDescCorner.Parent = ToggleDescIndicator
    
    local ToggleDescCircle = Instance.new("Frame")
    ToggleDescCircle.Name = "Circle"
    ToggleDescCircle.BackgroundColor3 = Color3.fromRGB(200, 200, 200)
    ToggleDescCircle.Position = UDim2.new(0, 3, 0.5, 0)
    ToggleDescCircle.Size = UDim2.new(0, 16, 0, 16)
    ToggleDescCircle.AnchorPoint = Vector2.new(0, 0.5)
    ToggleDescCircle.Parent = ToggleDescIndicator
    
    local CircleDescCorner = Instance.new("UICorner")
    CircleDescCorner.CornerRadius = UDim.new(1, 0)
    CircleDescCorner.Parent = ToggleDescCircle
    
    local ToggleDescInteract = Instance.new("TextButton")
    ToggleDescInteract.Name = "Interact"
    ToggleDescInteract.BackgroundTransparency = 1
    ToggleDescInteract.Text = ""
    ToggleDescInteract.Size = UDim2.new(1, 0, 1, 0)
    ToggleDescInteract.Parent = ToggleDescTemplate
end

-- Create element templates
CreateElementTemplates()

-- Add notification functionality
function Vex:Notification(NotifSettings)
    NotifSettings = Kwargify({
        Title = "Notification",
        Content = "This is a notification",
        Icon = "info",
        IconSource = "Material",
        Duration = 5,
    }, NotifSettings or {})
    
    -- Create notification instance
    local Notification = VexUI.Notifications.Template:Clone()
    Notification.Name = "Notification"
    Notification.Parent = VexUI.Notifications
    
    -- Create notification content
    local IconContainer = Instance.new("Frame")
    IconContainer.Name = "IconContainer"
    IconContainer.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    IconContainer.BackgroundTransparency = 0.5
    IconContainer.Size = UDim2.new(0, 36, 0, 36)
    IconContainer.Position = UDim2.new(0, 10, 0, 10)
    IconContainer.Parent = Notification
    
    local IconCorner = Instance.new("UICorner")
    IconCorner.CornerRadius = UDim.new(0, 6)
    IconCorner.Parent = IconContainer
    
    local Icon = Instance.new("ImageLabel")
    Icon.Name = "Icon"
    Icon.BackgroundTransparency = 1
    Icon.Position = UDim2.new(0.5, 0, 0.5, 0)
    Icon.Size = UDim2.new(0, 20, 0, 20)
    Icon.AnchorPoint = Vector2.new(0.5, 0.5)
    Icon.Image = GetIcon(NotifSettings.Icon, NotifSettings.IconSource) or GetIcon("info", "Material")
    Icon.Parent = IconContainer
    
    local Title = Instance.new("TextLabel")
    Title.Name = "Title"
    Title.BackgroundTransparency = 1
    Title.Position = UDim2.new(0, 56, 0, 10)
    Title.Size = UDim2.new(1, -66, 0, 20)
    Title.Font = Enum.Font.GothamBold
    Title.TextColor3 = VexTheme.Window.Text
    Title.TextSize = 14
    Title.TextXAlignment = Enum.TextXAlignment.Left
    Title.Text = NotifSettings.Title
    Title.Parent = Notification
    
    local Content = Instance.new("TextLabel")
    Content.Name = "Content"
    Content.BackgroundTransparency = 1
    Content.Position = UDim2.new(0, 56, 0, 30)
    Content.Size = UDim2.new(1, -66, 0, 0)
    Content.Font = Enum.Font.Gotham
    Content.TextColor3 = VexTheme.Window.SubText
    Content.TextSize = 13
    Content.TextXAlignment = Enum.TextXAlignment.Left
    Content.TextYAlignment = Enum.TextYAlignment.Top
    Content.Text = NotifSettings.Content
    Content.TextWrapped = true
    Content.AutomaticSize = Enum.AutomaticSize.Y
    Content.Parent = Notification
    
    -- Determine height based on text
    Content.Size = UDim2.new(1, -66, 0, 0)
    
    -- Show notification with animation
    Notification.Size = UDim2.new(1, 0, 0, math.max(56, Content.TextBounds.Y + 40))
    Notification.Position = UDim2.new(1, 300, 0, 0)
    Notification.Visible = true
    
    -- Animate in
    tween(Notification, {Position = UDim2.new(1, 0, 0, 0)}, function()
        -- Wait duration and then animate out
        delay(NotifSettings.Duration, function()
            tween(Notification, {Position = UDim2.new(1, 300, 0, 0)}, function()
                Notification:Destroy()
            end)
        end)
    end)
    
    -- Create notification API for future reference
    local NotificationAPI = {
        Instance = Notification,
        Settings = NotifSettings,
        Close = function()
            tween(Notification, {Position = UDim2.new(1, 300, 0, 0)}, function()
                Notification:Destroy()
            end)
        end
    }
    
    return NotificationAPI
end

-- Add element creation functions to Section API
local function ApplyElementFunctions(SectionAPI)
    -- Button
    function SectionAPI:AddButton(ButtonSettings)
        ButtonSettings = Kwargify({
            Name = "Button",
            Callback = function() end
        }, ButtonSettings or {})
        
        -- Create button
        local Button = VexUI.Templates.Elements.ButtonTemplate:Clone()
        Button.Name = ButtonSettings.Name .. "Button"
        Button.Title.Text = ButtonSettings.Name
        Button.Parent = SectionAPI.Instance.Content
        Button.Visible = true
        
        -- Button interaction
        Button.Interact.MouseEnter:Connect(function()
            tween(Button, {BackgroundTransparency = 0.4})
        end)
        
        Button.Interact.MouseLeave:Connect(function()
            tween(Button, {BackgroundTransparency = 0.5})
        end)
        
        Button.Interact.MouseButton1Click:Connect(function()
            tween(Button, {BackgroundTransparency = 0.3}, function()
                tween(Button, {BackgroundTransparency = 0.5})
            end)
            
            -- Execute callback
            task.spawn(ButtonSettings.Callback)
        end)
        
        -- Create Button API
        local ButtonAPI = {
            Instance = Button,
            Settings = ButtonSettings
        }
        
        -- Add to section elements
        table.insert(SectionAPI.Elements, ButtonAPI)
        
        return ButtonAPI
    end
    
    -- Toggle
    function SectionAPI:AddToggle(ToggleSettings)
        ToggleSettings = Kwargify({
            Name = "Toggle",
            Description = nil,
            Default = false,
            Callback = function(Value) end
        }, ToggleSettings or {})
        
        -- Create toggle based on whether description is provided
        local Toggle
        if ToggleSettings.Description and ToggleSettings.Description ~= "" then
            Toggle = VexUI.Templates.Elements.ToggleDescTemplate:Clone()
            Toggle.Title.Text = ToggleSettings.Name
            Toggle.Description.Text = ToggleSettings.Description
        else
            Toggle = VexUI.Templates.Elements.ToggleTemplate:Clone()
            Toggle.Title.Text = ToggleSettings.Name
        end
        
        Toggle.Name = ToggleSettings.Name .. "Toggle"
        Toggle.Parent = SectionAPI.Instance.Content
        Toggle.Visible = true
        
        -- Create Toggle API
        local ToggleAPI = {
            Instance = Toggle,
            Settings = ToggleSettings,
            Value = ToggleSettings.Default
        }
        
        -- Set initial state
        local function UpdateToggle(value)
            ToggleAPI.Value = value
            
            if value then
                local indicator = Toggle:FindFirstChild("Indicator", true)
                local circle = indicator:FindFirstChild("Circle")
                
                tween(indicator, {BackgroundColor3 = VexTheme.Elements.Accent})
                tween(circle, {Position = UDim2.new(1, -19, 0.5, 0)})
            else
                local indicator = Toggle:FindFirstChild("Indicator", true)
                local circle = indicator:FindFirstChild("Circle")
                
                tween(indicator, {BackgroundColor3 = Color3.fromRGB(60, 60, 60)})
                tween(circle, {Position = UDim2.new(0, 3, 0.5, 0)})
            end
            
            task.spawn(function()
                ToggleSettings.Callback(value)
            end)
        end
        
        -- Set initial state
        UpdateToggle(ToggleSettings.Default)
        
        -- Toggle interaction
        Toggle.Interact.MouseEnter:Connect(function()
            tween(Toggle, {BackgroundTransparency = 0.4})
        end)
        
        Toggle.Interact.MouseLeave:Connect(function()
            tween(Toggle, {BackgroundTransparency = 0.5})
        end)
        
        Toggle.Interact.MouseButton1Click:Connect(function()
            UpdateToggle(not ToggleAPI.Value)
        end)
        
        -- Set function
        function ToggleAPI:Set(value)
            if value ~= ToggleAPI.Value then
                UpdateToggle(value)
            end
        end
        
        -- Add to section elements
        table.insert(SectionAPI.Elements, ToggleAPI)
        
        return ToggleAPI
    end
    
    -- Label
    function SectionAPI:AddLabel(LabelSettings)
        LabelSettings = Kwargify({
            Text = "Label"
        }, LabelSettings or {})
        
        -- Create label
        local Label = VexUI.Templates.Elements.LabelTemplate:Clone()
        Label.Name = "Label"
        Label.Title.Text = LabelSettings.Text
        Label.Parent = SectionAPI.Instance.Content
        Label.Visible = true
        
        -- Create Label API
        local LabelAPI = {
            Instance = Label,
            Settings = LabelSettings
        }
        
        -- Set text function
        function LabelAPI:SetText(text)
            Label.Title.Text = text
            LabelSettings.Text = text
        end
        
        -- Add to section elements
        table.insert(SectionAPI.Elements, LabelAPI)
        
        return LabelAPI
    end
    
    return SectionAPI
end

-- Override the section creation function to apply element functions
local originalCreateSection = Tab.CreateSection
function Tab:CreateSection(SectionSettings)
    local SectionAPI = originalCreateSection(self, SectionSettings)
    return ApplyElementFunctions(SectionAPI)
end

-- Create slider and dropdown templates
local function CreateAdvancedElementTemplates()
    local ElementTemplates = VexUI.Templates.Elements
    
    -- Create Slider template
    local SliderTemplate = Instance.new("Frame")
    SliderTemplate.Name = "SliderTemplate"
    SliderTemplate.BackgroundColor3 = VexTheme.Elements.Background
    SliderTemplate.BackgroundTransparency = 0.5
    SliderTemplate.Size = UDim2.new(1, 0, 0, 56)
    SliderTemplate.Parent = ElementTemplates
    
    local SliderCorner = Instance.new("UICorner")
    SliderCorner.CornerRadius = VexTheme.Elements.Radius
    SliderCorner.Parent = SliderTemplate
    
    local SliderStroke = Instance.new("UIStroke")
    SliderStroke.Color = VexTheme.Elements.Stroke
    SliderStroke.Thickness = 1
    SliderStroke.Transparency = 0.5
    SliderStroke.Parent = SliderTemplate
    
    local SliderTitle = Instance.new("TextLabel")
    SliderTitle.Name = "Title"
    SliderTitle.BackgroundTransparency = 1
    SliderTitle.Position = UDim2.new(0, 10, 0, 5)
    SliderTitle.Size = UDim2.new(1, -70, 0, 20)
    SliderTitle.Font = Enum.Font.GothamBold
    SliderTitle.TextColor3 = VexTheme.Elements.Text
    SliderTitle.TextSize = 14
    SliderTitle.TextXAlignment = Enum.TextXAlignment.Left
    SliderTitle.Text = "Slider"
    SliderTitle.Parent = SliderTemplate
    
    -- Create value label
    local ValueLabel = Instance.new("TextBox")
    ValueLabel.Name = "ValueLabel"
    ValueLabel.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    ValueLabel.BackgroundTransparency = 0.5
    ValueLabel.Position = UDim2.new(1, -60, 0, 8)
    ValueLabel.Size = UDim2.new(0, 50, 0, 20)
    ValueLabel.Font = Enum.Font.Gotham
    ValueLabel.TextColor3 = VexTheme.Elements.Text
    ValueLabel.TextSize = 12
    ValueLabel.Text = "50"
    ValueLabel.ClearTextOnFocus = false
    ValueLabel.Parent = SliderTemplate
    
    local ValueCorner = Instance.new("UICorner")
    ValueCorner.CornerRadius = UDim.new(0, 4)
    ValueCorner.Parent = ValueLabel
    
    -- Create slider bar
    local SliderBar = Instance.new("Frame")
    SliderBar.Name = "SliderBar"
    SliderBar.BackgroundColor3 = VexTheme.Elements.SliderBackground
    SliderBar.Position = UDim2.new(0, 10, 0, 36)
    SliderBar.Size = UDim2.new(1, -20, 0, 8)
    SliderBar.Parent = SliderTemplate
    
    local SliderBarCorner = Instance.new("UICorner")
    SliderBarCorner.CornerRadius = UDim.new(1, 0)
    SliderBarCorner.Parent = SliderBar
    
    -- Create slider fill
    local SliderFill = Instance.new("Frame")
    SliderFill.Name = "Fill"
    SliderFill.BackgroundColor3 = VexTheme.Elements.Accent
    SliderFill.Size = UDim2.new(0.5, 0, 1, 0)
    SliderFill.Parent = SliderBar
    
    local SliderFillCorner = Instance.new("UICorner")
    SliderFillCorner.CornerRadius = UDim.new(1, 0)
    SliderFillCorner.Parent = SliderFill
    
    -- Create slider knob
    local SliderKnob = Instance.new("Frame")
    SliderKnob.Name = "Knob"
    SliderKnob.BackgroundColor3 = Color3.fromRGB(240, 240, 240)
    SliderKnob.Position = UDim2.new(0.5, -6, 0.5, -6)
    SliderKnob.Size = UDim2.new(0, 12, 0, 12)
    SliderKnob.AnchorPoint = Vector2.new(0, 0.5)
    SliderKnob.Parent = SliderFill
    
    local KnobCorner = Instance.new("UICorner")
    KnobCorner.CornerRadius = UDim.new(1, 0)
    KnobCorner.Parent = SliderKnob
    
    local SliderInteract = Instance.new("TextButton")
    SliderInteract.Name = "Interact"
    SliderInteract.BackgroundTransparency = 1
    SliderInteract.Text = ""
    SliderInteract.Size = UDim2.new(1, 0, 1, 0)
    SliderInteract.Parent = SliderBar
    
    -- Create dropdown template
    local DropdownTemplate = Instance.new("Frame")
    DropdownTemplate.Name = "DropdownTemplate"
    DropdownTemplate.BackgroundColor3 = VexTheme.Elements.Background
    DropdownTemplate.BackgroundTransparency = 0.5
    DropdownTemplate.Size = UDim2.new(1, 0, 0, 36) -- Will expand when opened
    DropdownTemplate.ClipsDescendants = true
    DropdownTemplate.Parent = ElementTemplates
    
    local DropdownCorner = Instance.new("UICorner")
    DropdownCorner.CornerRadius = VexTheme.Elements.Radius
    DropdownCorner.Parent = DropdownTemplate
    
    local DropdownStroke = Instance.new("UIStroke")
    DropdownStroke.Color = VexTheme.Elements.Stroke
    DropdownStroke.Thickness = 1
    DropdownStroke.Transparency = 0.5
    DropdownStroke.Parent = DropdownTemplate
    
    -- Create header
    local DropdownHeader = Instance.new("Frame")
    DropdownHeader.Name = "Header"
    DropdownHeader.BackgroundTransparency = 1
    DropdownHeader.Size = UDim2.new(1, 0, 0, 36)
    DropdownHeader.Parent = DropdownTemplate
    
    local DropdownTitle = Instance.new("TextLabel")
    DropdownTitle.Name = "Title"
    DropdownTitle.BackgroundTransparency = 1
    DropdownTitle.Position = UDim2.new(0, 10, 0, 0)
    DropdownTitle.Size = UDim2.new(1, -46, 1, 0)
    DropdownTitle.Font = Enum.Font.Gotham
    DropdownTitle.TextColor3 = VexTheme.Elements.Text
    DropdownTitle.TextSize = 14
    DropdownTitle.TextXAlignment = Enum.TextXAlignment.Left
    DropdownTitle.Text = "Dropdown"
    DropdownTitle.Parent = DropdownHeader
    
    local DropdownIcon = Instance.new("ImageLabel")
    DropdownIcon.Name = "Icon"
    DropdownIcon.BackgroundTransparency = 1
    DropdownIcon.Position = UDim2.new(1, -26, 0.5, 0)
    DropdownIcon.Size = UDim2.new(0, 16, 0, 16)
    DropdownIcon.AnchorPoint = Vector2.new(0.5, 0.5)
    DropdownIcon.Image = GetIcon("expand_more", "Material")
    DropdownIcon.Parent = DropdownHeader
    
    local DropdownInteract = Instance.new("TextButton")
    DropdownInteract.Name = "Interact"
    DropdownInteract.BackgroundTransparency = 1
    DropdownInteract.Text = ""
    DropdownInteract.Size = UDim2.new(1, 0, 1, 0)
    DropdownInteract.Parent = DropdownHeader
    
    -- Create options container
    local OptionsContainer = Instance.new("ScrollingFrame")
    OptionsContainer.Name = "Options"
    OptionsContainer.BackgroundTransparency = 1
    OptionsContainer.BorderSizePixel = 0
    OptionsContainer.Position = UDim2.new(0, 0, 0, 36)
    OptionsContainer.Size = UDim2.new(1, 0, 0, 100)
    OptionsContainer.CanvasSize = UDim2.new(0, 0, 0, 0)
    OptionsContainer.AutomaticCanvasSize = Enum.AutomaticSize.Y
    OptionsContainer.ScrollBarThickness = 3
    OptionsContainer.ScrollBarImageColor3 = Color3.fromRGB(70, 70, 70)
    OptionsContainer.Visible = false
    OptionsContainer.Parent = DropdownTemplate
    
    local OptionsLayout = Instance.new("UIListLayout")
    OptionsLayout.SortOrder = Enum.SortOrder.LayoutOrder
    OptionsLayout.Parent = OptionsContainer
    
    local OptionsPadding = Instance.new("UIPadding")
    OptionsPadding.PaddingLeft = UDim.new(0, 5)
    OptionsPadding.PaddingRight = UDim.new(0, 5)
    OptionsPadding.PaddingTop = UDim.new(0, 5)
    OptionsPadding.PaddingBottom = UDim.new(0, 5)
    OptionsPadding.Parent = OptionsContainer
    
    -- Create option template
    local OptionTemplate = Instance.new("Frame")
    OptionTemplate.Name = "OptionTemplate"
    OptionTemplate.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    OptionTemplate.BackgroundTransparency = 0.5
    OptionTemplate.Size = UDim2.new(1, 0, 0, 30)
    OptionTemplate.Parent = ElementTemplates
    
    local OptionCorner = Instance.new("UICorner")
    OptionCorner.CornerRadius = UDim.new(0, 4)
    OptionCorner.Parent = OptionTemplate
    
    local OptionText = Instance.new("TextLabel")
    OptionText.Name = "Text"
    OptionText.BackgroundTransparency = 1
    OptionText.Position = UDim2.new(0, 8, 0, 0)
    OptionText.Size = UDim2.new(1, -16, 1, 0)
    OptionText.Font = Enum.Font.Gotham
    OptionText.TextColor3 = VexTheme.Elements.Text
    OptionText.TextSize = 13
    OptionText.TextXAlignment = Enum.TextXAlignment.Left
    OptionText.Text = "Option"
    OptionText.Parent = OptionTemplate
    
    local OptionInteract = Instance.new("TextButton")
    OptionInteract.Name = "Interact"
    OptionInteract.BackgroundTransparency = 1
    OptionInteract.Text = ""
    OptionInteract.Size = UDim2.new(1, 0, 1, 0)
    OptionInteract.Parent = OptionTemplate
end

-- Create advanced element templates
CreateAdvancedElementTemplates()

-- Add more element creation functions to Section API
local function ApplyAdvancedElementFunctions(SectionAPI)
    -- Slider
    function SectionAPI:AddSlider(SliderSettings)
        SliderSettings = Kwargify({
            Name = "Slider",
            Min = 0,
            Max = 100,
            Default = 50,
            Increment = 1,
            Callback = function(Value) end
        }, SliderSettings or {})
        
        -- Create slider
        local Slider = VexUI.Templates.Elements.SliderTemplate:Clone()
        Slider.Name = SliderSettings.Name .. "Slider"
        Slider.Title.Text = SliderSettings.Name
        Slider.Parent = SectionAPI.Instance.Content
        Slider.Visible = true
        
        -- Ensure default is within range and properly incremented
        local function ValidateValue(value)
            value = math.clamp(value, SliderSettings.Min, SliderSettings.Max)
            if SliderSettings.Increment > 0 then
                value = SliderSettings.Min + (math.floor((value - SliderSettings.Min) / SliderSettings.Increment + 0.5) * SliderSettings.Increment)
            end
            return value
        end
        
        SliderSettings.Default = ValidateValue(SliderSettings.Default)
        
        -- Create Slider API
        local SliderAPI = {
            Instance = Slider,
            Settings = SliderSettings,
            Value = SliderSettings.Default
        }
        
        -- Update slider visuals
        local function UpdateSlider(value, isTyping)
            value = ValidateValue(value)
            SliderAPI.Value = value
            
            -- Update text
            Slider.ValueLabel.Text = tostring(value)
            
            -- Update slider visuals
            local percent = (value - SliderSettings.Min) / (SliderSettings.Max - SliderSettings.Min)
            if not isTyping then
                Slider.SliderBar.Fill.Size = UDim2.new(percent, 0, 1, 0)
            end
            
            -- Call callback
            if not isTyping then
                task.spawn(function()
                    SliderSettings.Callback(value)
                end)
            end
        end
        
        -- Set initial slider state
        UpdateSlider(SliderSettings.Default)
        
        -- Slider interaction
        local isDragging = false
        
        Slider.Interact.MouseEnter:Connect(function()
            tween(Slider, {BackgroundTransparency = 0.4})
        end)
        
        Slider.Interact.MouseLeave:Connect(function()
            tween(Slider, {BackgroundTransparency = 0.5})
        end)
        
        Slider.Interact.MouseButton1Down:Connect(function()
            isDragging = true
            
            -- Update slider based on mouse position
            local function Update()
                if not isDragging then return end
                
                local mousePos = UserInputService:GetMouseLocation()
                local sliderPos = Slider.SliderBar.AbsolutePosition
                local sliderWidth = Slider.SliderBar.AbsoluteSize.X
                
                local percent = math.clamp((mousePos.X - sliderPos.X) / sliderWidth, 0, 1)
                local value = SliderSettings.Min + (SliderSettings.Max - SliderSettings.Min) * percent
                
                UpdateSlider(value)
            end
            
            -- Initial update
            Update()
            
            -- Connect to mouse movement
            local moveConnection
            moveConnection = UserInputService.InputChanged:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseMovement then
                    Update()
                end
            end)
            
            -- Handle mouse release
            local releaseConnection
            releaseConnection = UserInputService.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    isDragging = false
                    moveConnection:Disconnect()
                    releaseConnection:Disconnect()
                end
            end)
        end)
        
        -- TextBox value entry
        Slider.ValueLabel.FocusLost:Connect(function(enterPressed)
            local success, value = pcall(function()
                return tonumber(Slider.ValueLabel.Text)
            end)
            
            if success and value then
                UpdateSlider(value)
            else
                Slider.ValueLabel.Text = tostring(SliderAPI.Value)
            end
        end)
        
        -- Value validation during typing
        Slider.ValueLabel:GetPropertyChangedSignal("Text"):Connect(function()
            local text = Slider.ValueLabel.Text
            if text == "" or text == "-" then return end
            
            -- Check if text is a valid number
            local success, value = pcall(function()
                return tonumber(text)
            end)
            
            if not success or not value then
                Slider.ValueLabel.Text = string.match(text, "[%-%d%.]*") or ""
            end
        end)
        
        -- Set value function
        function SliderAPI:Set(value)
            UpdateSlider(value)
        end
        
        -- Add to section elements
        table.insert(SectionAPI.Elements, SliderAPI)
        
        return SliderAPI
    end
    
    -- Dropdown
    function SectionAPI:AddDropdown(DropdownSettings)
        DropdownSettings = Kwargify({
            Name = "Dropdown",
            Options = {},
            Default = nil,
            MultiSelect = false,
            Callback = function(Option) end
        }, DropdownSettings or {})
        
        -- Create dropdown
        local Dropdown = VexUI.Templates.Elements.DropdownTemplate:Clone()
        Dropdown.Name = DropdownSettings.Name .. "Dropdown"
        Dropdown.Header.Title.Text = DropdownSettings.Name
        Dropdown.Parent = SectionAPI.Instance.Content
        Dropdown.Visible = true
        
        -- Create Dropdown API
        local DropdownAPI = {
            Instance = Dropdown,
            Settings = DropdownSettings,
            Value = DropdownSettings.MultiSelect and {} or DropdownSettings.Default,
            IsOpen = false
        }
        
        -- Create option buttons
        local function CreateOptions()
            -- Clear existing options
            for _, child in pairs(Dropdown.Options:GetChildren()) do
                if child:IsA("Frame") then
                    child:Destroy()
                end
            end
            
            -- Create new options
            for i, option in ipairs(DropdownSettings.Options) do
                local OptionButton = VexUI.Templates.Elements.OptionTemplate:Clone()
                OptionButton.Name = "Option_" .. option
                OptionButton.Text.Text = option
                OptionButton.LayoutOrder = i
                OptionButton.Parent = Dropdown.Options
                
                -- Handle option selection visuals
                if DropdownSettings.MultiSelect then
                    -- Create checkbox for multi-select
                    local Checkbox = Instance.new("Frame")
                    Checkbox.Name = "Checkbox"
                    Checkbox.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
                    Checkbox.Position = UDim2.new(1, -26, 0.5, 0)
                    Checkbox.Size = UDim2.new(0, 18, 0, 18)
                    Checkbox.AnchorPoint = Vector2.new(0.5, 0.5)
                    Checkbox.Parent = OptionButton
                    
                    local CheckboxCorner = Instance.new("UICorner")
                    CheckboxCorner.CornerRadius = UDim.new(0, 4)
                    CheckboxCorner.Parent = Checkbox
                    
                    -- Check if option is selected
                    local isSelected = table.find(DropdownAPI.Value, option) ~= nil
                    if isSelected then
                        Checkbox.BackgroundColor3 = VexTheme.Elements.Accent
                    end
                    
                    -- Option click handler
                    OptionButton.Interact.MouseButton1Click:Connect(function()
                        local index = table.find(DropdownAPI.Value, option)
                        
                        if index then
                            -- Remove option
                            table.remove(DropdownAPI.Value, index)
                            Checkbox.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
                        else
                            -- Add option
                            table.insert(DropdownAPI.Value, option)
                            Checkbox.BackgroundColor3 = VexTheme.Elements.Accent
                        end
                        
                        -- Update header text
                        if #DropdownAPI.Value == 0 then
                            Dropdown.Header.Title.Text = DropdownSettings.Name
                        elseif #DropdownAPI.Value == 1 then
                            Dropdown.Header.Title.Text = DropdownAPI.Value[1]
                        else
                            Dropdown.Header.Title.Text = DropdownSettings.Name .. " (" .. #DropdownAPI.Value .. ")"
                        end
                        
                        -- Call callback
                        task.spawn(function()
                            DropdownSettings.Callback(DropdownAPI.Value)
                        end)
                    end)
                else
                    -- Single select option
                    if option == DropdownAPI.Value then
                        OptionButton.BackgroundColor3 = VexTheme.Elements.Accent
                        OptionButton.BackgroundTransparency = 0.7
                    end
                    
                    -- Option click handler
                    OptionButton.Interact.MouseButton1Click:Connect(function()
                        -- Update selected option
                        DropdownAPI.Value = option
                        
                        -- Update header text
                        Dropdown.Header.Title.Text = option
                        
                        -- Update visuals
                        for _, child in pairs(Dropdown.Options:GetChildren()) do
                            if child:IsA("Frame") then
                                if child.Name == "Option_" .. option then
                                    child.BackgroundColor3 = VexTheme.Elements.Accent
                                    child.BackgroundTransparency = 0.7
                                else
                                    child.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
                                    child.BackgroundTransparency = 0.5
                                end
                            end
                        end
                        
                        -- Close dropdown
                        DropdownAPI:Toggle(false)
                        
                        -- Call callback
                        task.spawn(function()
                            DropdownSettings.Callback(option)
                        end)
                    end)
                end
                
                -- Option hover effects
                OptionButton.Interact.MouseEnter:Connect(function()
                    if not (not DropdownSettings.MultiSelect and option == DropdownAPI.Value) then
                        tween(OptionButton, {BackgroundTransparency = 0.3})
                    end
                end)
                
                OptionButton.Interact.MouseLeave:Connect(function()
                    if not (not DropdownSettings.MultiSelect and option == DropdownAPI.Value) then
                        tween(OptionButton, {BackgroundTransparency = 0.5})
                    end
                end)
            end
        end
        
        -- Set initial selection
        if DropdownSettings.MultiSelect then
            if DropdownSettings.Default and type(DropdownSettings.Default) == "table" then
                DropdownAPI.Value = DropdownSettings.Default
            else
                DropdownAPI.Value = {}
            end
            
            -- Update header text
            if #DropdownAPI.Value == 0 then
                Dropdown.Header.Title.Text = DropdownSettings.Name
            elseif #DropdownAPI.Value == 1 then
                Dropdown.Header.Title.Text = DropdownAPI.Value[1]
            else
                Dropdown.Header.Title.Text = DropdownSettings.Name .. " (" .. #DropdownAPI.Value .. ")"
            end
        else
            if DropdownSettings.Default and table.find(DropdownSettings.Options, DropdownSettings.Default) then
                DropdownAPI.Value = DropdownSettings.Default
                Dropdown.Header.Title.Text = DropdownSettings.Default
            else
                DropdownAPI.Value = nil
            end
        end
        
        -- Create options
        CreateOptions()
        
        -- Toggle dropdown visibility
        function DropdownAPI:Toggle(state)
            if state == nil then
                state = not DropdownAPI.IsOpen
            end
            
            DropdownAPI.IsOpen = state
            
            if state then
                -- Open dropdown
                Dropdown.Options.Visible = true
                tween(Dropdown, {Size = UDim2.new(1, 0, 0, 36 + math.min(150, Dropdown.Options.CanvasSize.Y.Offset + 10))})
                tween(Dropdown.Header.Icon, {Rotation = 180})
            else
                -- Close dropdown
                tween(Dropdown, {Size = UDim2.new(1, 0, 0, 36)}, function()
                    Dropdown.Options.Visible = false
                end)
                tween(Dropdown.Header.Icon, {Rotation = 0})
            end
        end
        
        -- Dropdown header interaction
        Dropdown.Header.Interact.MouseEnter:Connect(function()
            tween(Dropdown, {BackgroundTransparency = 0.4})
        end)
        
        Dropdown.Header.Interact.MouseLeave:Connect(function()
            tween(Dropdown, {BackgroundTransparency = 0.5})
        end)
        
        Dropdown.Header.Interact.MouseButton1Click:Connect(function()
            DropdownAPI:Toggle()
        end)
        
        -- Set value function
        function DropdownAPI:Set(value)
            if DropdownSettings.MultiSelect and type(value) == "table" then
                DropdownAPI.Value = value
                CreateOptions() -- Recreate options with new selection
                
                -- Update header text
                if #value == 0 then
                    Dropdown.Header.Title.Text = DropdownSettings.Name
                elseif #value == 1 then
                    Dropdown.Header.Title.Text = value[1]
                else
                    Dropdown.Header.Title.Text = DropdownSettings.Name .. " (" .. #value .. ")"
                end
                
                task.spawn(function()
                    DropdownSettings.Callback(value)
                end)
            elseif not DropdownSettings.MultiSelect and type(value) == "string" and table.find(DropdownSettings.Options, value) then
                DropdownAPI.Value = value
                Dropdown.Header.Title.Text = value
                CreateOptions() -- Recreate options with new selection
                
                task.spawn(function()
                    DropdownSettings.Callback(value)
                end)
            end
        end
        
        -- Add/remove options
        function DropdownAPI:SetOptions(options)
            DropdownSettings.Options = options
            
            -- Validate current selection
            if DropdownSettings.MultiSelect then
                for i = #DropdownAPI.Value, 1, -1 do
                    if not table.find(options, DropdownAPI.Value[i]) then
                        table.remove(DropdownAPI.Value, i)
                    end
                end
                
                -- Update header text
                if #DropdownAPI.Value == 0 then
                    Dropdown.Header.Title.Text = DropdownSettings.Name
                elseif #DropdownAPI.Value == 1 then
                    Dropdown.Header.Title.Text = DropdownAPI.Value[1]
                else
                    Dropdown.Header.Title.Text = DropdownSettings.Name .. " (" .. #DropdownAPI.Value .. ")"
                end
            else
                if not table.find(options, DropdownAPI.Value) then
                    DropdownAPI.Value = nil
                    Dropdown.Header.Title.Text = DropdownSettings.Name
                end
            end
            
            -- Recreate options
            CreateOptions()
        end
        
        -- Add to section elements
        table.insert(SectionAPI.Elements, DropdownAPI)
        
        return DropdownAPI
    end
    
    return SectionAPI
end

-- Update ApplyElementFunctions to also apply advanced element functions
local originalApplyElementFunctions = ApplyElementFunctions
function ApplyElementFunctions(SectionAPI)
    local enhancedAPI = originalApplyElementFunctions(SectionAPI)
    return ApplyAdvancedElementFunctions(enhancedAPI)
end

-- Create notification system
function Vex:CreateNotification(NotificationSettings)
    NotificationSettings = Kwargify({
        Title = "Notification",
        Content = "This is a notification",
        Duration = 5,
        Type = "Info" -- Info, Success, Warning, Error
    }, NotificationSettings or {})
    
    -- Get notification container or create if it doesn't exist
    local NotificationContainer = VexUI.Notifications
    if not NotificationContainer then
        NotificationContainer = Instance.new("Frame")
        NotificationContainer.Name = "Notifications"
        NotificationContainer.BackgroundTransparency = 1
        NotificationContainer.Position = UDim2.new(1, -20, 0, 20)
        NotificationContainer.Size = UDim2.new(0, 280, 1, -40)
        NotificationContainer.AnchorPoint = Vector2.new(1, 0)
        NotificationContainer.Parent = VexUI.Main
        
        local NotificationLayout = Instance.new("UIListLayout")
        NotificationLayout.SortOrder = Enum.SortOrder.LayoutOrder
        NotificationLayout.VerticalAlignment = Enum.VerticalAlignment.Top
        NotificationLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
        NotificationLayout.Padding = UDim.new(0, 10)
        NotificationLayout.Parent = NotificationContainer
        
        VexUI.Notifications = NotificationContainer
    end
    
    -- Create notification
    local Notification = Instance.new("Frame")
    Notification.Name = "Notification"
    Notification.BackgroundColor3 = VexTheme.Window.Background
    Notification.BackgroundTransparency = 0.1
    Notification.Size = UDim2.new(1, 0, 0, 0)
    Notification.ClipsDescendants = true
    Notification.Parent = NotificationContainer
    
    local NotificationCorner = Instance.new("UICorner")
    NotificationCorner.CornerRadius = UDim.new(0, 8)
    NotificationCorner.Parent = Notification
    
    local NotificationStroke = Instance.new("UIStroke")
    NotificationStroke.Color = VexTheme.Window.Stroke
    NotificationStroke.Thickness = 1.5
    NotificationStroke.Parent = Notification
    
    -- Create accent bar based on type
    local AccentColor
    if NotificationSettings.Type == "Success" then
        AccentColor = Color3.fromRGB(46, 204, 113)
    elseif NotificationSettings.Type == "Warning" then
        AccentColor = Color3.fromRGB(241, 196, 15)
    elseif NotificationSettings.Type == "Error" then
        AccentColor = Color3.fromRGB(231, 76, 60)
    else -- Info or default
        AccentColor = VexTheme.Elements.Accent
    end
    
    local AccentBar = Instance.new("Frame")
    AccentBar.Name = "AccentBar"
    AccentBar.BackgroundColor3 = AccentColor
    AccentBar.Position = UDim2.new(0, 0, 0, 0)
    AccentBar.Size = UDim2.new(0, 4, 1, 0)
    AccentBar.Parent = Notification
    
    local AccentBarCorner = Instance.new("UICorner")
    AccentBarCorner.CornerRadius = UDim.new(0, 8)
    AccentBarCorner.Parent = AccentBar
    
    -- Create title
    local Title = Instance.new("TextLabel")
    Title.Name = "Title"
    Title.BackgroundTransparency = 1
    Title.Position = UDim2.new(0, 15, 0, 10)
    Title.Size = UDim2.new(1, -25, 0, 20)
    Title.Font = Enum.Font.GothamBold
    Title.TextColor3 = VexTheme.Elements.Text
    Title.TextSize = 14
    Title.TextXAlignment = Enum.TextXAlignment.Left
    Title.Text = NotificationSettings.Title
    Title.Parent = Notification
    
    -- Create content
    local Content = Instance.new("TextLabel")
    Content.Name = "Content"
    Content.BackgroundTransparency = 1
    Content.Position = UDim2.new(0, 15, 0, 32)
    Content.Size = UDim2.new(1, -25, 0, 0)
    Content.Font = Enum.Font.Gotham
    Content.TextColor3 = VexTheme.Elements.SubText
    Content.TextSize = 12
    Content.TextXAlignment = Enum.TextXAlignment.Left
    Content.TextYAlignment = Enum.TextYAlignment.Top
    Content.TextWrapped = true
    Content.Text = NotificationSettings.Content
    Content.Parent = Notification
    
    -- Calculate content height
    local textSize = game:GetService("TextService"):GetTextSize(
        Content.Text,
        Content.TextSize,
        Content.Font,
        Vector2.new(Content.AbsoluteSize.X, math.huge)
    )
    
    local contentHeight = textSize.Y + 5
    Content.Size = UDim2.new(1, -25, 0, contentHeight)
    
    -- Calculate notification height
    local notificationHeight = 42 + contentHeight
    
    -- Create close button
    local CloseButton = Instance.new("ImageButton")
    CloseButton.Name = "CloseButton"
    CloseButton.BackgroundTransparency = 1
    CloseButton.Position = UDim2.new(1, -25, 0, 10)
    CloseButton.Size = UDim2.new(0, 15, 0, 15)
    CloseButton.Image = GetIcon("close", "Material")
    CloseButton.Parent = Notification
    
    -- Create progress bar
    local ProgressBar = Instance.new("Frame")
    ProgressBar.Name = "ProgressBar"
    ProgressBar.BackgroundColor3 = AccentColor
    ProgressBar.Position = UDim2.new(0, 0, 1, -2)
    ProgressBar.Size = UDim2.new(1, 0, 0, 2)
    ProgressBar.Parent = Notification
    
    -- Animate notification
    tween(Notification, {Size = UDim2.new(1, 0, 0, notificationHeight)}, nil, 0.3)
    
    -- Close function
    local function Close()
        tween(Notification, {Size = UDim2.new(1, 0, 0, 0)}, function()
            Notification:Destroy()
        end, 0.3)
    end
    
    -- Close on button click
    CloseButton.MouseButton1Click:Connect(Close)
    
    -- Auto close after duration
    if NotificationSettings.Duration > 0 then
        -- Animate progress bar
        tween(ProgressBar, {Size = UDim2.new(0, 0, 0, 2)}, nil, NotificationSettings.Duration)
        
        delay(NotificationSettings.Duration, Close)
    end
    
    -- Return notification API
    return {
        Close = Close
    }
end

-- Theme Manager
function Vex:SetTheme(ThemeName)
    -- Default Dark theme (already defined in the library)
    if ThemeName == "Dark" then
        VexTheme = {
            Window = {
                Background = Color3.fromRGB(25, 25, 25),
                Stroke = Color3.fromRGB(60, 60, 60),
                TabBackground = Color3.fromRGB(20, 20, 20),
                TabBackgroundSelected = Color3.fromRGB(30, 30, 30),
                TabText = Color3.fromRGB(240, 240, 240),
                TabTextSelected = Color3.fromRGB(255, 255, 255),
                SectionBackground = Color3.fromRGB(30, 30, 30),
                SectionBackgroundLight = Color3.fromRGB(35, 35, 35)
            },
            Elements = {
                Background = Color3.fromRGB(40, 40, 40),
                Stroke = Color3.fromRGB(80, 80, 80),
                Text = Color3.fromRGB(240, 240, 240),
                SubText = Color3.fromRGB(200, 200, 200),
                Accent = Color3.fromRGB(65, 105, 225), -- Royal Blue
                ToggleOn = Color3.fromRGB(65, 105, 225),
                ToggleOff = Color3.fromRGB(60, 60, 60),
                SliderBackground = Color3.fromRGB(55, 55, 55),
                Radius = UDim.new(0, 6)
            }
        }
    -- Light theme
    elseif ThemeName == "Light" then
        VexTheme = {
            Window = {
                Background = Color3.fromRGB(240, 240, 240),
                Stroke = Color3.fromRGB(200, 200, 200),
                TabBackground = Color3.fromRGB(230, 230, 230),
                TabBackgroundSelected = Color3.fromRGB(250, 250, 250),
                TabText = Color3.fromRGB(60, 60, 60),
                TabTextSelected = Color3.fromRGB(20, 20, 20),
                SectionBackground = Color3.fromRGB(250, 250, 250),
                SectionBackgroundLight = Color3.fromRGB(245, 245, 245)
            },
            Elements = {
                Background = Color3.fromRGB(235, 235, 235),
                Stroke = Color3.fromRGB(180, 180, 180),
                Text = Color3.fromRGB(40, 40, 40),
                SubText = Color3.fromRGB(80, 80, 80),
                Accent = Color3.fromRGB(65, 105, 225), -- Royal Blue
                ToggleOn = Color3.fromRGB(65, 105, 225),
                ToggleOff = Color3.fromRGB(180, 180, 180),
                SliderBackground = Color3.fromRGB(200, 200, 200),
                Radius = UDim.new(0, 6)
            }
        }
    -- Discord-inspired theme
    elseif ThemeName == "Discord" then
        VexTheme = {
            Window = {
                Background = Color3.fromRGB(54, 57, 63),
                Stroke = Color3.fromRGB(80, 85, 90),
                TabBackground = Color3.fromRGB(47, 49, 54),
                TabBackgroundSelected = Color3.fromRGB(57, 60, 67),
                TabText = Color3.fromRGB(220, 221, 222),
                TabTextSelected = Color3.fromRGB(255, 255, 255),
                SectionBackground = Color3.fromRGB(47, 49, 54),
                SectionBackgroundLight = Color3.fromRGB(52, 55, 60)
            },
            Elements = {
                Background = Color3.fromRGB(64, 68, 75),
                Stroke = Color3.fromRGB(100, 105, 110),
                Text = Color3.fromRGB(220, 221, 222),
                SubText = Color3.fromRGB(180, 180, 180),
                Accent = Color3.fromRGB(114, 137, 218), -- Discord Blurple
                ToggleOn = Color3.fromRGB(114, 137, 218),
                ToggleOff = Color3.fromRGB(80, 85, 90),
                SliderBackground = Color3.fromRGB(72, 76, 82),
                Radius = UDim.new(0, 5)
            }
        }
    -- Spotify-inspired theme
    elseif ThemeName == "Spotify" then
        VexTheme = {
            Window = {
                Background = Color3.fromRGB(18, 18, 18),
                Stroke = Color3.fromRGB(40, 40, 40),
                TabBackground = Color3.fromRGB(24, 24, 24),
                TabBackgroundSelected = Color3.fromRGB(33, 33, 33),
                TabText = Color3.fromRGB(200, 200, 200),
                TabTextSelected = Color3.fromRGB(255, 255, 255),
                SectionBackground = Color3.fromRGB(24, 24, 24),
                SectionBackgroundLight = Color3.fromRGB(33, 33, 33)
            },
            Elements = {
                Background = Color3.fromRGB(40, 40, 40),
                Stroke = Color3.fromRGB(60, 60, 60),
                Text = Color3.fromRGB(230, 230, 230),
                SubText = Color3.fromRGB(180, 180, 180),
                Accent = Color3.fromRGB(29, 185, 84), -- Spotify Green
                ToggleOn = Color3.fromRGB(29, 185, 84),
                ToggleOff = Color3.fromRGB(80, 80, 80),
                SliderBackground = Color3.fromRGB(50, 50, 50),
                Radius = UDim.new(0, 8)
            }
        }
    -- Aqua theme
    elseif ThemeName == "Aqua" then
        VexTheme = {
            Window = {
                Background = Color3.fromRGB(20, 30, 40),
                Stroke = Color3.fromRGB(30, 60, 80),
                TabBackground = Color3.fromRGB(15, 25, 35),
                TabBackgroundSelected = Color3.fromRGB(25, 40, 50),
                TabText = Color3.fromRGB(200, 220, 230),
                TabTextSelected = Color3.fromRGB(220, 240, 255),
                SectionBackground = Color3.fromRGB(25, 35, 45),
                SectionBackgroundLight = Color3.fromRGB(30, 40, 50)
            },
            Elements = {
                Background = Color3.fromRGB(30, 45, 55),
                Stroke = Color3.fromRGB(40, 70, 90),
                Text = Color3.fromRGB(220, 230, 240),
                SubText = Color3.fromRGB(180, 200, 210),
                Accent = Color3.fromRGB(0, 180, 220), -- Cyan
                ToggleOn = Color3.fromRGB(0, 180, 220),
                ToggleOff = Color3.fromRGB(50, 70, 90),
                SliderBackground = Color3.fromRGB(40, 55, 65),
                Radius = UDim.new(0, 6)
            }
        }
    end
    
    -- Update ThemeGradient
    Vex.ThemeGradient = ColorSequence.new{
        ColorSequenceKeypoint.new(0.00, VexTheme.Window.Background), 
        ColorSequenceKeypoint.new(0.50, Color3.fromRGB(
            math.clamp(VexTheme.Window.Background.R * 255 + 10, 0, 255)/255,
            math.clamp(VexTheme.Window.Background.G * 255 + 10, 0, 255)/255,
            math.clamp(VexTheme.Window.Background.B * 255 + 10, 0, 255)/255
        )), 
        ColorSequenceKeypoint.new(1.00, VexTheme.Window.Background)
    }
    
    -- If we have any open windows, update them
    if VexUI and VexUI.Windows then
        for _, window in pairs(VexUI.Windows) do
            if window.UpdateTheme then
                window:UpdateTheme()
            end
        end
    end
    
    -- Return theme for reference
    return VexTheme
end

-- Window SetTheme Method
function WindowAPI:SetTheme(ThemeName)
    -- Set theme in Vex
    Vex:SetTheme(ThemeName)
    
    -- Update window with new theme
    self:UpdateTheme()
end

-- Window UpdateTheme Method (used by WindowAPI:SetTheme and Vex:SetTheme)
function WindowAPI:UpdateTheme()
    -- Apply theme to window elements
    self.Instance.Main.BackgroundColor3 = VexTheme.Window.Background
    self.Instance.Main.TopBar.BackgroundColor3 = VexTheme.Window.Background
    self.Instance.Main.TopBar.Stroke.Color = VexTheme.Window.Stroke
    self.Instance.Main.BackgroundGradient.UIGradient.Color = Vex.ThemeGradient
    
    -- Update tabs
    for _, tab in pairs(self.Tabs) do
        if tab.Selected then
            tab.Instance.BackgroundColor3 = VexTheme.Window.TabBackgroundSelected
            tab.Instance.TextLabel.TextColor3 = VexTheme.Window.TabTextSelected
        else
            tab.Instance.BackgroundColor3 = VexTheme.Window.TabBackground
            tab.Instance.TextLabel.TextColor3 = VexTheme.Window.TabText
        end
        
        -- Update sections in tab
        for _, section in pairs(tab.Sections) do
            section.Instance.BackgroundColor3 = VexTheme.Window.SectionBackground
            section.Instance.Title.TextColor3 = VexTheme.Elements.Text
            
            -- Update elements in section
            for _, element in pairs(section.Elements) do
                if element.Instance then
                    if element.Instance:FindFirstChild("Title") then
                        element.Instance.Title.TextColor3 = VexTheme.Elements.Text
                    end
                    
                    if element.Type == "Toggle" then
                        element.Instance.BackgroundColor3 = VexTheme.Elements.Background
                        element.Instance.Stroke.Color = VexTheme.Elements.Stroke
                        
                        if element.Toggled then
                            element.Instance.ToggleFrame.BackgroundColor3 = VexTheme.Elements.ToggleOn
                        else
                            element.Instance.ToggleFrame.BackgroundColor3 = VexTheme.Elements.ToggleOff
                        end
                    elseif element.Type == "Button" then
                        element.Instance.BackgroundColor3 = VexTheme.Elements.Background
                        element.Instance.Stroke.Color = VexTheme.Elements.Stroke
                    elseif element.Type == "Slider" then
                        element.Instance.BackgroundColor3 = VexTheme.Elements.Background
                        element.Instance.Stroke.Color = VexTheme.Elements.Stroke
                        element.Instance.SliderBar.BackgroundColor3 = VexTheme.Elements.SliderBackground
                        element.Instance.SliderBar.Fill.BackgroundColor3 = VexTheme.Elements.Accent
                    elseif element.Type == "Dropdown" then
                        element.Instance.BackgroundColor3 = VexTheme.Elements.Background
                        element.Instance.Stroke.Color = VexTheme.Elements.Stroke
                        element.Instance.Header.Title.TextColor3 = VexTheme.Elements.Text
                    elseif element.Type == "Label" then
                        element.Instance.TextColor3 = VexTheme.Elements.SubText
                    end
                end
            end
        end
    end
end

-- Window Set/Toggles Acrylic Effect
function WindowAPI:SetAcrylic(Enabled)
    self.Settings.Acrylic = Enabled
    
    if Enabled then
        -- Enable acrylic effect
        self.Instance.Main.BlurFrame.Visible = true
        self.Instance.Main.BackgroundTransparency = 0.92
        self.Instance.Main.TopBar.BackgroundTransparency = 0.8
    else
        -- Disable acrylic effect
        self.Instance.Main.BlurFrame.Visible = false
        self.Instance.Main.BackgroundTransparency = 0
        self.Instance.Main.TopBar.BackgroundTransparency = 0
    end
end

-- Reset window position and size
function WindowAPI:Reset()
    -- Reset window position to center
    self.Instance.Main.Position = UDim2.new(0.5, -275, 0.5, -175)
    self.Settings.Position = UDim2.new(0.5, -275, 0.5, -175)
    
    -- Reset window size
    self.Instance.Main.Size = UDim2.new(0, 550, 0, 350)
    self.Settings.Size = UDim2.new(0, 550, 0, 350)
    
    -- Update window
    self:UpdateTheme()
    
    -- Notify user
    Vex:CreateNotification({
        Title = "Window Reset",
        Content = "Window position and size have been reset to default",
        Duration = 3,
        Type = "Info"
    })
end

-- Make window draggable
function WindowAPI:MakeDraggable()
    -- Make window draggable from top bar
    Draggable(self.Instance.Main, self.Instance.Main.TopBar, true)
    
    -- Add drag start and end events
    local dragging = false
    
    self.Instance.Main.TopBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            tween(self.Instance.Main.TopBar, {BackgroundTransparency = 0.4})
        end
    end)
    
    self.Instance.Main.TopBar.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
            
            -- Update stored position
            self.Settings.Position = self.Instance.Main.Position
            
            -- Reset topbar transparency
            if self.Settings.Acrylic then
                tween(self.Instance.Main.TopBar, {BackgroundTransparency = 0.8})
            else
                tween(self.Instance.Main.TopBar, {BackgroundTransparency = 0})
            end
        end
    end)
end

-- Return the Vex library
return Vex 
